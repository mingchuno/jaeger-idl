// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: zipkin.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Zipkin.Proto3 {

  /// <summary>Holder for reflection information generated from zipkin.proto</summary>
  public static partial class ZipkinReflection {

    #region Descriptor
    /// <summary>File descriptor for zipkin.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ZipkinReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgx6aXBraW4ucHJvdG8SDXppcGtpbi5wcm90bzMi9QMKBFNwYW4SEAoIdHJh",
            "Y2VfaWQYASABKAwSEQoJcGFyZW50X2lkGAIgASgMEgoKAmlkGAMgASgMEiYK",
            "BGtpbmQYBCABKA4yGC56aXBraW4ucHJvdG8zLlNwYW4uS2luZBIMCgRuYW1l",
            "GAUgASgJEhEKCXRpbWVzdGFtcBgGIAEoBhIQCghkdXJhdGlvbhgHIAEoBBIv",
            "Cg5sb2NhbF9lbmRwb2ludBgIIAEoCzIXLnppcGtpbi5wcm90bzMuRW5kcG9p",
            "bnQSMAoPcmVtb3RlX2VuZHBvaW50GAkgASgLMhcuemlwa2luLnByb3RvMy5F",
            "bmRwb2ludBIuCgthbm5vdGF0aW9ucxgKIAMoCzIZLnppcGtpbi5wcm90bzMu",
            "QW5ub3RhdGlvbhIrCgR0YWdzGAsgAygLMh0uemlwa2luLnByb3RvMy5TcGFu",
            "LlRhZ3NFbnRyeRINCgVkZWJ1ZxgMIAEoCBIOCgZzaGFyZWQYDSABKAgaKwoJ",
            "VGFnc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiVQoE",
            "S2luZBIZChVTUEFOX0tJTkRfVU5TUEVDSUZJRUQQABIKCgZDTElFTlQQARIK",
            "CgZTRVJWRVIQAhIMCghQUk9EVUNFUhADEgwKCENPTlNVTUVSEAQiSgoIRW5k",
            "cG9pbnQSFAoMc2VydmljZV9uYW1lGAEgASgJEgwKBGlwdjQYAiABKAwSDAoE",
            "aXB2NhgDIAEoDBIMCgRwb3J0GAQgASgFIi4KCkFubm90YXRpb24SEQoJdGlt",
            "ZXN0YW1wGAEgASgGEg0KBXZhbHVlGAIgASgJIjEKC0xpc3RPZlNwYW5zEiIK",
            "BXNwYW5zGAEgAygLMhMuemlwa2luLnByb3RvMy5TcGFuIhAKDlJlcG9ydFJl",
            "c3BvbnNlMlQKC1NwYW5TZXJ2aWNlEkUKBlJlcG9ydBIaLnppcGtpbi5wcm90",
            "bzMuTGlzdE9mU3BhbnMaHS56aXBraW4ucHJvdG8zLlJlcG9ydFJlc3BvbnNl",
            "IgBCEgoOemlwa2luMi5wcm90bzNQAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Zipkin.Proto3.Span), global::Zipkin.Proto3.Span.Parser, new[]{ "TraceId", "ParentId", "Id", "Kind", "Name", "Timestamp", "Duration", "LocalEndpoint", "RemoteEndpoint", "Annotations", "Tags", "Debug", "Shared" }, null, new[]{ typeof(global::Zipkin.Proto3.Span.Types.Kind) }, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Zipkin.Proto3.Endpoint), global::Zipkin.Proto3.Endpoint.Parser, new[]{ "ServiceName", "Ipv4", "Ipv6", "Port" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Zipkin.Proto3.Annotation), global::Zipkin.Proto3.Annotation.Parser, new[]{ "Timestamp", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Zipkin.Proto3.ListOfSpans), global::Zipkin.Proto3.ListOfSpans.Parser, new[]{ "Spans" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Zipkin.Proto3.ReportResponse), global::Zipkin.Proto3.ReportResponse.Parser, null, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A span is a single-host view of an operation. A trace is a series of spans
  /// (often RPC calls) which nest to form a latency tree. Spans are in the same
  /// trace when they share the same trace ID. The parent_id field establishes the
  /// position of one span in the tree.
  ///
  /// The root span is where parent_id is Absent and usually has the longest
  /// duration in the trace. However, nested asynchronous work can materialize as
  /// child spans whose duration exceed the root span.
  ///
  /// Spans usually represent remote activity such as RPC calls, or messaging
  /// producers and consumers. However, they can also represent in-process
  /// activity in any position of the trace. For example, a root span could
  /// represent a server receiving an initial client request. A root span could
  /// also represent a scheduled job that has no remote context.
  ///
  /// Encoding notes:
  ///
  /// Epoch timestamp are encoded fixed64 as varint would also be 8 bytes, and more
  /// expensive to encode and size. Duration is stored uint64, as often the numbers
  /// are quite small.
  ///
  /// Default values are ok, as only natural numbers are used. For example, zero is
  /// an invalid timestamp and an invalid duration, false values for debug or shared
  /// are ignorable, and zero-length strings also coerce to null.
  ///
  /// The next id is 14.
  ///
  /// Note fields up to 15 take 1 byte to encode. Take care when adding new fields
  /// https://developers.google.com/protocol-buffers/docs/proto3#assigning-tags
  /// </summary>
  public sealed partial class Span : pb::IMessage<Span>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Span> _parser = new pb::MessageParser<Span>(() => new Span());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Span> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Zipkin.Proto3.ZipkinReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Span() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Span(Span other) : this() {
      traceId_ = other.traceId_;
      parentId_ = other.parentId_;
      id_ = other.id_;
      kind_ = other.kind_;
      name_ = other.name_;
      timestamp_ = other.timestamp_;
      duration_ = other.duration_;
      localEndpoint_ = other.localEndpoint_ != null ? other.localEndpoint_.Clone() : null;
      remoteEndpoint_ = other.remoteEndpoint_ != null ? other.remoteEndpoint_.Clone() : null;
      annotations_ = other.annotations_.Clone();
      tags_ = other.tags_.Clone();
      debug_ = other.debug_;
      shared_ = other.shared_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Span Clone() {
      return new Span(this);
    }

    /// <summary>Field number for the "trace_id" field.</summary>
    public const int TraceIdFieldNumber = 1;
    private pb::ByteString traceId_ = pb::ByteString.Empty;
    /// <summary>
    /// Randomly generated, unique identifier for a trace, set on all spans within
    /// it.
    ///
    /// This field is required and encoded as 8 or 16 bytes, in big endian byte
    /// order.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TraceId {
      get { return traceId_; }
      set {
        traceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parent_id" field.</summary>
    public const int ParentIdFieldNumber = 2;
    private pb::ByteString parentId_ = pb::ByteString.Empty;
    /// <summary>
    /// The parent span ID or absent if this the root span in a trace.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ParentId {
      get { return parentId_; }
      set {
        parentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private pb::ByteString id_ = pb::ByteString.Empty;
    /// <summary>
    /// Unique identifier for this operation within the trace.
    ///
    /// This field is required and encoded as 8 opaque bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 4;
    private global::Zipkin.Proto3.Span.Types.Kind kind_ = global::Zipkin.Proto3.Span.Types.Kind.SpanKindUnspecified;
    /// <summary>
    /// When present, used to interpret remote_endpoint
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Zipkin.Proto3.Span.Types.Kind Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    /// <summary>
    /// The logical operation this span represents in lowercase (e.g. rpc method).
    /// Leave absent if unknown.
    ///
    /// As these are lookup labels, take care to ensure names are low cardinality.
    /// For example, do not embed variables into the name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 6;
    private ulong timestamp_;
    /// <summary>
    /// Epoch microseconds of the start of this span, possibly absent if
    /// incomplete.
    ///
    /// For example, 1502787600000000 corresponds to 2017-08-15 09:00 UTC
    ///
    /// This value should be set directly by instrumentation, using the most
    /// precise value possible. For example, gettimeofday or multiplying epoch
    /// millis by 1000.
    ///
    /// There are three known edge-cases where this could be reported absent.
    /// - A span was allocated but never started (ex not yet received a timestamp)
    /// - The span's start event was lost
    /// - Data about a completed span (ex tags) were sent after the fact
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 7;
    private ulong duration_;
    /// <summary>
    /// Duration in microseconds of the critical path, if known. Durations of less
    /// than one are rounded up. Duration of children can be longer than their
    /// parents due to asynchronous operations.
    ///
    /// For example 150 milliseconds is 150000 microseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "local_endpoint" field.</summary>
    public const int LocalEndpointFieldNumber = 8;
    private global::Zipkin.Proto3.Endpoint localEndpoint_;
    /// <summary>
    /// The host that recorded this span, primarily for query by service name.
    ///
    /// Instrumentation should always record this. Usually, absent implies late
    /// data. The IP address corresponding to this is usually the site local or
    /// advertised service address. When present, the port indicates the listen
    /// port.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Zipkin.Proto3.Endpoint LocalEndpoint {
      get { return localEndpoint_; }
      set {
        localEndpoint_ = value;
      }
    }

    /// <summary>Field number for the "remote_endpoint" field.</summary>
    public const int RemoteEndpointFieldNumber = 9;
    private global::Zipkin.Proto3.Endpoint remoteEndpoint_;
    /// <summary>
    /// When an RPC (or messaging) span, indicates the other side of the
    /// connection.
    ///
    /// By recording the remote endpoint, your trace will contain network context
    /// even if the peer is not tracing. For example, you can record the IP from
    /// the "X-Forwarded-For" header or the service name and socket of a remote
    /// peer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Zipkin.Proto3.Endpoint RemoteEndpoint {
      get { return remoteEndpoint_; }
      set {
        remoteEndpoint_ = value;
      }
    }

    /// <summary>Field number for the "annotations" field.</summary>
    public const int AnnotationsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Zipkin.Proto3.Annotation> _repeated_annotations_codec
        = pb::FieldCodec.ForMessage(82, global::Zipkin.Proto3.Annotation.Parser);
    private readonly pbc::RepeatedField<global::Zipkin.Proto3.Annotation> annotations_ = new pbc::RepeatedField<global::Zipkin.Proto3.Annotation>();
    /// <summary>
    /// Associates events that explain latency with the time they happened.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Zipkin.Proto3.Annotation> Annotations {
      get { return annotations_; }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 11;
    private static readonly pbc::MapField<string, string>.Codec _map_tags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 90);
    private readonly pbc::MapField<string, string> tags_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Tags give your span context for search, viewing and analysis.
    ///
    /// For example, a key "your_app.version" would let you lookup traces by
    /// version. A tag "sql.query" isn't searchable, but it can help in debugging
    /// when viewing a trace.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "debug" field.</summary>
    public const int DebugFieldNumber = 12;
    private bool debug_;
    /// <summary>
    /// True is a request to store this span even if it overrides sampling policy.
    ///
    /// This is true when the "X-B3-Flags" header has a value of 1.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Debug {
      get { return debug_; }
      set {
        debug_ = value;
      }
    }

    /// <summary>Field number for the "shared" field.</summary>
    public const int SharedFieldNumber = 13;
    private bool shared_;
    /// <summary>
    /// True if we are contributing to a span started by another tracer (ex on a
    /// different host).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Shared {
      get { return shared_; }
      set {
        shared_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Span);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Span other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TraceId != other.TraceId) return false;
      if (ParentId != other.ParentId) return false;
      if (Id != other.Id) return false;
      if (Kind != other.Kind) return false;
      if (Name != other.Name) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Duration != other.Duration) return false;
      if (!object.Equals(LocalEndpoint, other.LocalEndpoint)) return false;
      if (!object.Equals(RemoteEndpoint, other.RemoteEndpoint)) return false;
      if(!annotations_.Equals(other.annotations_)) return false;
      if (!Tags.Equals(other.Tags)) return false;
      if (Debug != other.Debug) return false;
      if (Shared != other.Shared) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TraceId.Length != 0) hash ^= TraceId.GetHashCode();
      if (ParentId.Length != 0) hash ^= ParentId.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Kind != global::Zipkin.Proto3.Span.Types.Kind.SpanKindUnspecified) hash ^= Kind.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (Duration != 0UL) hash ^= Duration.GetHashCode();
      if (localEndpoint_ != null) hash ^= LocalEndpoint.GetHashCode();
      if (remoteEndpoint_ != null) hash ^= RemoteEndpoint.GetHashCode();
      hash ^= annotations_.GetHashCode();
      hash ^= Tags.GetHashCode();
      if (Debug != false) hash ^= Debug.GetHashCode();
      if (Shared != false) hash ^= Shared.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TraceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(TraceId);
      }
      if (ParentId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ParentId);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Id);
      }
      if (Kind != global::Zipkin.Proto3.Span.Types.Kind.SpanKindUnspecified) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Kind);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(49);
        output.WriteFixed64(Timestamp);
      }
      if (Duration != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(Duration);
      }
      if (localEndpoint_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(LocalEndpoint);
      }
      if (remoteEndpoint_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(RemoteEndpoint);
      }
      annotations_.WriteTo(output, _repeated_annotations_codec);
      tags_.WriteTo(output, _map_tags_codec);
      if (Debug != false) {
        output.WriteRawTag(96);
        output.WriteBool(Debug);
      }
      if (Shared != false) {
        output.WriteRawTag(104);
        output.WriteBool(Shared);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TraceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(TraceId);
      }
      if (ParentId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ParentId);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Id);
      }
      if (Kind != global::Zipkin.Proto3.Span.Types.Kind.SpanKindUnspecified) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Kind);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(49);
        output.WriteFixed64(Timestamp);
      }
      if (Duration != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(Duration);
      }
      if (localEndpoint_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(LocalEndpoint);
      }
      if (remoteEndpoint_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(RemoteEndpoint);
      }
      annotations_.WriteTo(ref output, _repeated_annotations_codec);
      tags_.WriteTo(ref output, _map_tags_codec);
      if (Debug != false) {
        output.WriteRawTag(96);
        output.WriteBool(Debug);
      }
      if (Shared != false) {
        output.WriteRawTag(104);
        output.WriteBool(Shared);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TraceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TraceId);
      }
      if (ParentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ParentId);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Id);
      }
      if (Kind != global::Zipkin.Proto3.Span.Types.Kind.SpanKindUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Timestamp != 0UL) {
        size += 1 + 8;
      }
      if (Duration != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Duration);
      }
      if (localEndpoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalEndpoint);
      }
      if (remoteEndpoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RemoteEndpoint);
      }
      size += annotations_.CalculateSize(_repeated_annotations_codec);
      size += tags_.CalculateSize(_map_tags_codec);
      if (Debug != false) {
        size += 1 + 1;
      }
      if (Shared != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Span other) {
      if (other == null) {
        return;
      }
      if (other.TraceId.Length != 0) {
        TraceId = other.TraceId;
      }
      if (other.ParentId.Length != 0) {
        ParentId = other.ParentId;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Kind != global::Zipkin.Proto3.Span.Types.Kind.SpanKindUnspecified) {
        Kind = other.Kind;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      if (other.Duration != 0UL) {
        Duration = other.Duration;
      }
      if (other.localEndpoint_ != null) {
        if (localEndpoint_ == null) {
          LocalEndpoint = new global::Zipkin.Proto3.Endpoint();
        }
        LocalEndpoint.MergeFrom(other.LocalEndpoint);
      }
      if (other.remoteEndpoint_ != null) {
        if (remoteEndpoint_ == null) {
          RemoteEndpoint = new global::Zipkin.Proto3.Endpoint();
        }
        RemoteEndpoint.MergeFrom(other.RemoteEndpoint);
      }
      annotations_.Add(other.annotations_);
      tags_.Add(other.tags_);
      if (other.Debug != false) {
        Debug = other.Debug;
      }
      if (other.Shared != false) {
        Shared = other.Shared;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TraceId = input.ReadBytes();
            break;
          }
          case 18: {
            ParentId = input.ReadBytes();
            break;
          }
          case 26: {
            Id = input.ReadBytes();
            break;
          }
          case 32: {
            Kind = (global::Zipkin.Proto3.Span.Types.Kind) input.ReadEnum();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 49: {
            Timestamp = input.ReadFixed64();
            break;
          }
          case 56: {
            Duration = input.ReadUInt64();
            break;
          }
          case 66: {
            if (localEndpoint_ == null) {
              LocalEndpoint = new global::Zipkin.Proto3.Endpoint();
            }
            input.ReadMessage(LocalEndpoint);
            break;
          }
          case 74: {
            if (remoteEndpoint_ == null) {
              RemoteEndpoint = new global::Zipkin.Proto3.Endpoint();
            }
            input.ReadMessage(RemoteEndpoint);
            break;
          }
          case 82: {
            annotations_.AddEntriesFrom(input, _repeated_annotations_codec);
            break;
          }
          case 90: {
            tags_.AddEntriesFrom(input, _map_tags_codec);
            break;
          }
          case 96: {
            Debug = input.ReadBool();
            break;
          }
          case 104: {
            Shared = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TraceId = input.ReadBytes();
            break;
          }
          case 18: {
            ParentId = input.ReadBytes();
            break;
          }
          case 26: {
            Id = input.ReadBytes();
            break;
          }
          case 32: {
            Kind = (global::Zipkin.Proto3.Span.Types.Kind) input.ReadEnum();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 49: {
            Timestamp = input.ReadFixed64();
            break;
          }
          case 56: {
            Duration = input.ReadUInt64();
            break;
          }
          case 66: {
            if (localEndpoint_ == null) {
              LocalEndpoint = new global::Zipkin.Proto3.Endpoint();
            }
            input.ReadMessage(LocalEndpoint);
            break;
          }
          case 74: {
            if (remoteEndpoint_ == null) {
              RemoteEndpoint = new global::Zipkin.Proto3.Endpoint();
            }
            input.ReadMessage(RemoteEndpoint);
            break;
          }
          case 82: {
            annotations_.AddEntriesFrom(ref input, _repeated_annotations_codec);
            break;
          }
          case 90: {
            tags_.AddEntriesFrom(ref input, _map_tags_codec);
            break;
          }
          case 96: {
            Debug = input.ReadBool();
            break;
          }
          case 104: {
            Shared = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Span message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// When present, kind clarifies timestamp, duration and remote_endpoint. When
      /// absent, the span is local or incomplete. Unlike client and server, there
      /// is no direct critical path latency relationship between producer and
      /// consumer spans.
      /// </summary>
      public enum Kind {
        /// <summary>
        /// Default value interpreted as absent.
        /// </summary>
        [pbr::OriginalName("SPAN_KIND_UNSPECIFIED")] SpanKindUnspecified = 0,
        /// <summary>
        /// The span represents the client side of an RPC operation, implying the
        /// following:
        ///
        /// timestamp is the moment a request was sent to the server.
        /// duration is the delay until a response or an error was received.
        /// remote_endpoint is the server.
        /// </summary>
        [pbr::OriginalName("CLIENT")] Client = 1,
        /// <summary>
        /// The span represents the server side of an RPC operation, implying the
        /// following:
        ///
        /// timestamp is the moment a client request was received.
        /// duration is the delay until a response was sent or an error.
        /// remote_endpoint is the client.
        /// </summary>
        [pbr::OriginalName("SERVER")] Server = 2,
        /// <summary>
        /// The span represents production of a message to a remote broker, implying
        /// the following:
        ///
        /// timestamp is the moment a message was sent to a destination.
        /// duration is the delay sending the message, such as batching.
        /// remote_endpoint is the broker.
        /// </summary>
        [pbr::OriginalName("PRODUCER")] Producer = 3,
        /// <summary>
        /// The span represents consumption of a message from a remote broker, not
        /// time spent servicing it. For example, a message processor would be an
        /// in-process child span of a consumer. Consumer spans imply the following:
        ///
        /// timestamp is the moment a message was received from an origin.
        /// duration is the delay consuming the message, such as from backlog.
        /// remote_endpoint is the broker.
        /// </summary>
        [pbr::OriginalName("CONSUMER")] Consumer = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /// The network context of a node in the service graph.
  ///
  /// The next id is 5.
  /// </summary>
  public sealed partial class Endpoint : pb::IMessage<Endpoint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Endpoint> _parser = new pb::MessageParser<Endpoint>(() => new Endpoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Endpoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Zipkin.Proto3.ZipkinReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Endpoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Endpoint(Endpoint other) : this() {
      serviceName_ = other.serviceName_;
      ipv4_ = other.ipv4_;
      ipv6_ = other.ipv6_;
      port_ = other.port_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Endpoint Clone() {
      return new Endpoint(this);
    }

    /// <summary>Field number for the "service_name" field.</summary>
    public const int ServiceNameFieldNumber = 1;
    private string serviceName_ = "";
    /// <summary>
    /// Lower-case label of this node in the service graph, such as "favstar".
    /// Leave absent if unknown.
    ///
    /// This is a primary label for trace lookup and aggregation, so it should be
    /// intuitive and consistent. Many use a name from service discovery.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ipv4" field.</summary>
    public const int Ipv4FieldNumber = 2;
    private pb::ByteString ipv4_ = pb::ByteString.Empty;
    /// <summary>
    /// 4 byte representation of the primary IPv4 address associated with this
    /// connection. Absent if unknown.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv4 {
      get { return ipv4_; }
      set {
        ipv4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ipv6" field.</summary>
    public const int Ipv6FieldNumber = 3;
    private pb::ByteString ipv6_ = pb::ByteString.Empty;
    /// <summary>
    /// 16 byte representation of the primary IPv6 address associated with this
    /// connection. Absent if unknown.
    ///
    /// Prefer using the ipv4 field for mapped addresses.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6 {
      get { return ipv6_; }
      set {
        ipv6_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 4;
    private int port_;
    /// <summary>
    /// Depending on context, this could be a listen port or the client-side of a
    /// socket. Absent if unknown.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Endpoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Endpoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceName != other.ServiceName) return false;
      if (Ipv4 != other.Ipv4) return false;
      if (Ipv6 != other.Ipv6) return false;
      if (Port != other.Port) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      if (Ipv4.Length != 0) hash ^= Ipv4.GetHashCode();
      if (Ipv6.Length != 0) hash ^= Ipv6.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ServiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceName);
      }
      if (Ipv4.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Ipv4);
      }
      if (Ipv6.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Ipv6);
      }
      if (Port != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Port);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ServiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceName);
      }
      if (Ipv4.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Ipv4);
      }
      if (Ipv6.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Ipv6);
      }
      if (Port != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Port);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      if (Ipv4.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Ipv4);
      }
      if (Ipv6.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Ipv6);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Endpoint other) {
      if (other == null) {
        return;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      if (other.Ipv4.Length != 0) {
        Ipv4 = other.Ipv4;
      }
      if (other.Ipv6.Length != 0) {
        Ipv6 = other.Ipv6;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServiceName = input.ReadString();
            break;
          }
          case 18: {
            Ipv4 = input.ReadBytes();
            break;
          }
          case 26: {
            Ipv6 = input.ReadBytes();
            break;
          }
          case 32: {
            Port = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ServiceName = input.ReadString();
            break;
          }
          case 18: {
            Ipv4 = input.ReadBytes();
            break;
          }
          case 26: {
            Ipv6 = input.ReadBytes();
            break;
          }
          case 32: {
            Port = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Associates an event that explains latency with a timestamp.
  /// Unlike log statements, annotations are often codes. Ex. "ws" for WireSend
  ///
  /// The next id is 3.
  /// </summary>
  public sealed partial class Annotation : pb::IMessage<Annotation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Annotation> _parser = new pb::MessageParser<Annotation>(() => new Annotation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Annotation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Zipkin.Proto3.ZipkinReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Annotation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Annotation(Annotation other) : this() {
      timestamp_ = other.timestamp_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Annotation Clone() {
      return new Annotation(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private ulong timestamp_;
    /// <summary>
    /// Epoch microseconds of this event.
    ///
    /// For example, 1502787600000000 corresponds to 2017-08-15 09:00 UTC
    ///
    /// This value should be set directly by instrumentation, using the most
    /// precise value possible. For example, gettimeofday or multiplying epoch
    /// millis by 1000.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    /// <summary>
    /// Usually a short tag indicating an event, like "error"
    ///
    /// While possible to add larger data, such as garbage collection details, low
    /// cardinality event names both keep the size of spans down and also are easy
    /// to search against.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Annotation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Annotation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Timestamp != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(Timestamp);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Timestamp != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(Timestamp);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0UL) {
        size += 1 + 8;
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Annotation other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Timestamp = input.ReadFixed64();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Timestamp = input.ReadFixed64();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A list of spans with possibly different trace ids, in no particular order.
  ///
  /// This is used for all transports: POST, Kafka messages etc. No other fields
  /// are expected, This message facilitates the mechanics of encoding a list, as
  /// a field number is required. The name of this type is the same in the OpenApi
  /// aka Swagger specification. https://zipkin.io/zipkin-api/#/default/post_spans
  /// </summary>
  public sealed partial class ListOfSpans : pb::IMessage<ListOfSpans>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListOfSpans> _parser = new pb::MessageParser<ListOfSpans>(() => new ListOfSpans());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListOfSpans> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Zipkin.Proto3.ZipkinReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListOfSpans() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListOfSpans(ListOfSpans other) : this() {
      spans_ = other.spans_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListOfSpans Clone() {
      return new ListOfSpans(this);
    }

    /// <summary>Field number for the "spans" field.</summary>
    public const int SpansFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Zipkin.Proto3.Span> _repeated_spans_codec
        = pb::FieldCodec.ForMessage(10, global::Zipkin.Proto3.Span.Parser);
    private readonly pbc::RepeatedField<global::Zipkin.Proto3.Span> spans_ = new pbc::RepeatedField<global::Zipkin.Proto3.Span>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Zipkin.Proto3.Span> Spans {
      get { return spans_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListOfSpans);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListOfSpans other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!spans_.Equals(other.spans_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= spans_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      spans_.WriteTo(output, _repeated_spans_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      spans_.WriteTo(ref output, _repeated_spans_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += spans_.CalculateSize(_repeated_spans_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListOfSpans other) {
      if (other == null) {
        return;
      }
      spans_.Add(other.spans_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            spans_.AddEntriesFrom(input, _repeated_spans_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            spans_.AddEntriesFrom(ref input, _repeated_spans_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Response for SpanService/Report RPC. This response currently does not return
  /// any information beyond indicating that the request has finished. That said,
  /// it may be extended in the future.
  /// </summary>
  public sealed partial class ReportResponse : pb::IMessage<ReportResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReportResponse> _parser = new pb::MessageParser<ReportResponse>(() => new ReportResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Zipkin.Proto3.ZipkinReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportResponse(ReportResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportResponse Clone() {
      return new ReportResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
