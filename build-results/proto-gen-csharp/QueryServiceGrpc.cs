// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: api_v3/query_service.proto
// </auto-generated>
// Original file comments:
// Copyright (c) 2021 The Jaeger Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Jaeger.ApiV3 {
  public static partial class QueryService
  {
    static readonly string __ServiceName = "jaeger.api_v3.QueryService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Jaeger.ApiV3.GetTraceRequest> __Marshaller_jaeger_api_v3_GetTraceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Jaeger.ApiV3.GetTraceRequest.Parser));
    static readonly grpc::Marshaller<global::Jaeger.ApiV3.SpansResponseChunk> __Marshaller_jaeger_api_v3_SpansResponseChunk = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Jaeger.ApiV3.SpansResponseChunk.Parser));
    static readonly grpc::Marshaller<global::Jaeger.ApiV3.FindTracesRequest> __Marshaller_jaeger_api_v3_FindTracesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Jaeger.ApiV3.FindTracesRequest.Parser));
    static readonly grpc::Marshaller<global::Jaeger.ApiV3.GetServicesRequest> __Marshaller_jaeger_api_v3_GetServicesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Jaeger.ApiV3.GetServicesRequest.Parser));
    static readonly grpc::Marshaller<global::Jaeger.ApiV3.GetServicesResponse> __Marshaller_jaeger_api_v3_GetServicesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Jaeger.ApiV3.GetServicesResponse.Parser));
    static readonly grpc::Marshaller<global::Jaeger.ApiV3.GetOperationsRequest> __Marshaller_jaeger_api_v3_GetOperationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Jaeger.ApiV3.GetOperationsRequest.Parser));
    static readonly grpc::Marshaller<global::Jaeger.ApiV3.GetOperationsResponse> __Marshaller_jaeger_api_v3_GetOperationsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Jaeger.ApiV3.GetOperationsResponse.Parser));

    static readonly grpc::Method<global::Jaeger.ApiV3.GetTraceRequest, global::Jaeger.ApiV3.SpansResponseChunk> __Method_GetTrace = new grpc::Method<global::Jaeger.ApiV3.GetTraceRequest, global::Jaeger.ApiV3.SpansResponseChunk>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetTrace",
        __Marshaller_jaeger_api_v3_GetTraceRequest,
        __Marshaller_jaeger_api_v3_SpansResponseChunk);

    static readonly grpc::Method<global::Jaeger.ApiV3.FindTracesRequest, global::Jaeger.ApiV3.SpansResponseChunk> __Method_FindTraces = new grpc::Method<global::Jaeger.ApiV3.FindTracesRequest, global::Jaeger.ApiV3.SpansResponseChunk>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "FindTraces",
        __Marshaller_jaeger_api_v3_FindTracesRequest,
        __Marshaller_jaeger_api_v3_SpansResponseChunk);

    static readonly grpc::Method<global::Jaeger.ApiV3.GetServicesRequest, global::Jaeger.ApiV3.GetServicesResponse> __Method_GetServices = new grpc::Method<global::Jaeger.ApiV3.GetServicesRequest, global::Jaeger.ApiV3.GetServicesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetServices",
        __Marshaller_jaeger_api_v3_GetServicesRequest,
        __Marshaller_jaeger_api_v3_GetServicesResponse);

    static readonly grpc::Method<global::Jaeger.ApiV3.GetOperationsRequest, global::Jaeger.ApiV3.GetOperationsResponse> __Method_GetOperations = new grpc::Method<global::Jaeger.ApiV3.GetOperationsRequest, global::Jaeger.ApiV3.GetOperationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOperations",
        __Marshaller_jaeger_api_v3_GetOperationsRequest,
        __Marshaller_jaeger_api_v3_GetOperationsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Jaeger.ApiV3.QueryServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of QueryService</summary>
    [grpc::BindServiceMethod(typeof(QueryService), "BindService")]
    public abstract partial class QueryServiceBase
    {
      /// <summary>
      /// GetTrace returns a single trace.
      /// Note that the JSON response over HTTP is wrapped into result envelope "{"result": ...}"
      /// It means that the JSON response cannot be directly unmarshalled using JSONPb.
      /// This can be fixed by first parsing into user-defined envelope with standard JSON library
      /// or string manipulation to remove the envelope. Alternatively generate objects using OpenAPI.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetTrace(global::Jaeger.ApiV3.GetTraceRequest request, grpc::IServerStreamWriter<global::Jaeger.ApiV3.SpansResponseChunk> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// FindTraces searches for traces.
      /// See GetTrace for JSON unmarshalling.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task FindTraces(global::Jaeger.ApiV3.FindTracesRequest request, grpc::IServerStreamWriter<global::Jaeger.ApiV3.SpansResponseChunk> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetServices returns service names.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Jaeger.ApiV3.GetServicesResponse> GetServices(global::Jaeger.ApiV3.GetServicesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetOperations returns operation names.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Jaeger.ApiV3.GetOperationsResponse> GetOperations(global::Jaeger.ApiV3.GetOperationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for QueryService</summary>
    public partial class QueryServiceClient : grpc::ClientBase<QueryServiceClient>
    {
      /// <summary>Creates a new client for QueryService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public QueryServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for QueryService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public QueryServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected QueryServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected QueryServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// GetTrace returns a single trace.
      /// Note that the JSON response over HTTP is wrapped into result envelope "{"result": ...}"
      /// It means that the JSON response cannot be directly unmarshalled using JSONPb.
      /// This can be fixed by first parsing into user-defined envelope with standard JSON library
      /// or string manipulation to remove the envelope. Alternatively generate objects using OpenAPI.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Jaeger.ApiV3.SpansResponseChunk> GetTrace(global::Jaeger.ApiV3.GetTraceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTrace(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetTrace returns a single trace.
      /// Note that the JSON response over HTTP is wrapped into result envelope "{"result": ...}"
      /// It means that the JSON response cannot be directly unmarshalled using JSONPb.
      /// This can be fixed by first parsing into user-defined envelope with standard JSON library
      /// or string manipulation to remove the envelope. Alternatively generate objects using OpenAPI.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Jaeger.ApiV3.SpansResponseChunk> GetTrace(global::Jaeger.ApiV3.GetTraceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetTrace, null, options, request);
      }
      /// <summary>
      /// FindTraces searches for traces.
      /// See GetTrace for JSON unmarshalling.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Jaeger.ApiV3.SpansResponseChunk> FindTraces(global::Jaeger.ApiV3.FindTracesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindTraces(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// FindTraces searches for traces.
      /// See GetTrace for JSON unmarshalling.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Jaeger.ApiV3.SpansResponseChunk> FindTraces(global::Jaeger.ApiV3.FindTracesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_FindTraces, null, options, request);
      }
      /// <summary>
      /// GetServices returns service names.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Jaeger.ApiV3.GetServicesResponse GetServices(global::Jaeger.ApiV3.GetServicesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServices(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetServices returns service names.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Jaeger.ApiV3.GetServicesResponse GetServices(global::Jaeger.ApiV3.GetServicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetServices, null, options, request);
      }
      /// <summary>
      /// GetServices returns service names.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Jaeger.ApiV3.GetServicesResponse> GetServicesAsync(global::Jaeger.ApiV3.GetServicesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServicesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetServices returns service names.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Jaeger.ApiV3.GetServicesResponse> GetServicesAsync(global::Jaeger.ApiV3.GetServicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetServices, null, options, request);
      }
      /// <summary>
      /// GetOperations returns operation names.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Jaeger.ApiV3.GetOperationsResponse GetOperations(global::Jaeger.ApiV3.GetOperationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOperations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetOperations returns operation names.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Jaeger.ApiV3.GetOperationsResponse GetOperations(global::Jaeger.ApiV3.GetOperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOperations, null, options, request);
      }
      /// <summary>
      /// GetOperations returns operation names.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Jaeger.ApiV3.GetOperationsResponse> GetOperationsAsync(global::Jaeger.ApiV3.GetOperationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOperationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetOperations returns operation names.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Jaeger.ApiV3.GetOperationsResponse> GetOperationsAsync(global::Jaeger.ApiV3.GetOperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOperations, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override QueryServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new QueryServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(QueryServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetTrace, serviceImpl.GetTrace)
          .AddMethod(__Method_FindTraces, serviceImpl.FindTraces)
          .AddMethod(__Method_GetServices, serviceImpl.GetServices)
          .AddMethod(__Method_GetOperations, serviceImpl.GetOperations).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, QueryServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetTrace, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Jaeger.ApiV3.GetTraceRequest, global::Jaeger.ApiV3.SpansResponseChunk>(serviceImpl.GetTrace));
      serviceBinder.AddMethod(__Method_FindTraces, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Jaeger.ApiV3.FindTracesRequest, global::Jaeger.ApiV3.SpansResponseChunk>(serviceImpl.FindTraces));
      serviceBinder.AddMethod(__Method_GetServices, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Jaeger.ApiV3.GetServicesRequest, global::Jaeger.ApiV3.GetServicesResponse>(serviceImpl.GetServices));
      serviceBinder.AddMethod(__Method_GetOperations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Jaeger.ApiV3.GetOperationsRequest, global::Jaeger.ApiV3.GetOperationsResponse>(serviceImpl.GetOperations));
    }

  }
}
#endregion
