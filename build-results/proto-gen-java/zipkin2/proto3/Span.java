// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zipkin.proto

package zipkin2.proto3;

/**
 * <pre>
 * A span is a single-host view of an operation. A trace is a series of spans
 * (often RPC calls) which nest to form a latency tree. Spans are in the same
 * trace when they share the same trace ID. The parent_id field establishes the
 * position of one span in the tree.
 * The root span is where parent_id is Absent and usually has the longest
 * duration in the trace. However, nested asynchronous work can materialize as
 * child spans whose duration exceed the root span.
 * Spans usually represent remote activity such as RPC calls, or messaging
 * producers and consumers. However, they can also represent in-process
 * activity in any position of the trace. For example, a root span could
 * represent a server receiving an initial client request. A root span could
 * also represent a scheduled job that has no remote context.
 * Encoding notes:
 * Epoch timestamp are encoded fixed64 as varint would also be 8 bytes, and more
 * expensive to encode and size. Duration is stored uint64, as often the numbers
 * are quite small.
 * Default values are ok, as only natural numbers are used. For example, zero is
 * an invalid timestamp and an invalid duration, false values for debug or shared
 * are ignorable, and zero-length strings also coerce to null.
 * The next id is 14.
 * Note fields up to 15 take 1 byte to encode. Take care when adding new fields
 * https://developers.google.com/protocol-buffers/docs/proto3#assigning-tags
 * </pre>
 *
 * Protobuf type {@code zipkin.proto3.Span}
 */
public final class Span extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:zipkin.proto3.Span)
    SpanOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Span.newBuilder() to construct.
  private Span(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Span() {
    traceId_ = com.google.protobuf.ByteString.EMPTY;
    parentId_ = com.google.protobuf.ByteString.EMPTY;
    id_ = com.google.protobuf.ByteString.EMPTY;
    kind_ = 0;
    name_ = "";
    annotations_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Span();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Span(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {

            traceId_ = input.readBytes();
            break;
          }
          case 18: {

            parentId_ = input.readBytes();
            break;
          }
          case 26: {

            id_ = input.readBytes();
            break;
          }
          case 32: {
            int rawValue = input.readEnum();

            kind_ = rawValue;
            break;
          }
          case 42: {
            java.lang.String s = input.readStringRequireUtf8();

            name_ = s;
            break;
          }
          case 49: {

            timestamp_ = input.readFixed64();
            break;
          }
          case 56: {

            duration_ = input.readUInt64();
            break;
          }
          case 66: {
            zipkin2.proto3.Endpoint.Builder subBuilder = null;
            if (localEndpoint_ != null) {
              subBuilder = localEndpoint_.toBuilder();
            }
            localEndpoint_ = input.readMessage(zipkin2.proto3.Endpoint.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(localEndpoint_);
              localEndpoint_ = subBuilder.buildPartial();
            }

            break;
          }
          case 74: {
            zipkin2.proto3.Endpoint.Builder subBuilder = null;
            if (remoteEndpoint_ != null) {
              subBuilder = remoteEndpoint_.toBuilder();
            }
            remoteEndpoint_ = input.readMessage(zipkin2.proto3.Endpoint.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(remoteEndpoint_);
              remoteEndpoint_ = subBuilder.buildPartial();
            }

            break;
          }
          case 82: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              annotations_ = new java.util.ArrayList<zipkin2.proto3.Annotation>();
              mutable_bitField0_ |= 0x00000001;
            }
            annotations_.add(
                input.readMessage(zipkin2.proto3.Annotation.parser(), extensionRegistry));
            break;
          }
          case 90: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              tags_ = com.google.protobuf.MapField.newMapField(
                  TagsDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000002;
            }
            com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
            tags__ = input.readMessage(
                TagsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            tags_.getMutableMap().put(
                tags__.getKey(), tags__.getValue());
            break;
          }
          case 96: {

            debug_ = input.readBool();
            break;
          }
          case 104: {

            shared_ = input.readBool();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        annotations_ = java.util.Collections.unmodifiableList(annotations_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return zipkin2.proto3.Zipkin.internal_static_zipkin_proto3_Span_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 11:
        return internalGetTags();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return zipkin2.proto3.Zipkin.internal_static_zipkin_proto3_Span_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            zipkin2.proto3.Span.class, zipkin2.proto3.Span.Builder.class);
  }

  /**
   * <pre>
   * When present, kind clarifies timestamp, duration and remote_endpoint. When
   * absent, the span is local or incomplete. Unlike client and server, there
   * is no direct critical path latency relationship between producer and
   * consumer spans.
   * </pre>
   *
   * Protobuf enum {@code zipkin.proto3.Span.Kind}
   */
  public enum Kind
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Default value interpreted as absent.
     * </pre>
     *
     * <code>SPAN_KIND_UNSPECIFIED = 0;</code>
     */
    SPAN_KIND_UNSPECIFIED(0),
    /**
     * <pre>
     * The span represents the client side of an RPC operation, implying the
     * following:
     * timestamp is the moment a request was sent to the server.
     * duration is the delay until a response or an error was received.
     * remote_endpoint is the server.
     * </pre>
     *
     * <code>CLIENT = 1;</code>
     */
    CLIENT(1),
    /**
     * <pre>
     * The span represents the server side of an RPC operation, implying the
     * following:
     * timestamp is the moment a client request was received.
     * duration is the delay until a response was sent or an error.
     * remote_endpoint is the client.
     * </pre>
     *
     * <code>SERVER = 2;</code>
     */
    SERVER(2),
    /**
     * <pre>
     * The span represents production of a message to a remote broker, implying
     * the following:
     * timestamp is the moment a message was sent to a destination.
     * duration is the delay sending the message, such as batching.
     * remote_endpoint is the broker.
     * </pre>
     *
     * <code>PRODUCER = 3;</code>
     */
    PRODUCER(3),
    /**
     * <pre>
     * The span represents consumption of a message from a remote broker, not
     * time spent servicing it. For example, a message processor would be an
     * in-process child span of a consumer. Consumer spans imply the following:
     * timestamp is the moment a message was received from an origin.
     * duration is the delay consuming the message, such as from backlog.
     * remote_endpoint is the broker.
     * </pre>
     *
     * <code>CONSUMER = 4;</code>
     */
    CONSUMER(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Default value interpreted as absent.
     * </pre>
     *
     * <code>SPAN_KIND_UNSPECIFIED = 0;</code>
     */
    public static final int SPAN_KIND_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * The span represents the client side of an RPC operation, implying the
     * following:
     * timestamp is the moment a request was sent to the server.
     * duration is the delay until a response or an error was received.
     * remote_endpoint is the server.
     * </pre>
     *
     * <code>CLIENT = 1;</code>
     */
    public static final int CLIENT_VALUE = 1;
    /**
     * <pre>
     * The span represents the server side of an RPC operation, implying the
     * following:
     * timestamp is the moment a client request was received.
     * duration is the delay until a response was sent or an error.
     * remote_endpoint is the client.
     * </pre>
     *
     * <code>SERVER = 2;</code>
     */
    public static final int SERVER_VALUE = 2;
    /**
     * <pre>
     * The span represents production of a message to a remote broker, implying
     * the following:
     * timestamp is the moment a message was sent to a destination.
     * duration is the delay sending the message, such as batching.
     * remote_endpoint is the broker.
     * </pre>
     *
     * <code>PRODUCER = 3;</code>
     */
    public static final int PRODUCER_VALUE = 3;
    /**
     * <pre>
     * The span represents consumption of a message from a remote broker, not
     * time spent servicing it. For example, a message processor would be an
     * in-process child span of a consumer. Consumer spans imply the following:
     * timestamp is the moment a message was received from an origin.
     * duration is the delay consuming the message, such as from backlog.
     * remote_endpoint is the broker.
     * </pre>
     *
     * <code>CONSUMER = 4;</code>
     */
    public static final int CONSUMER_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Kind valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static Kind forNumber(int value) {
      switch (value) {
        case 0: return SPAN_KIND_UNSPECIFIED;
        case 1: return CLIENT;
        case 2: return SERVER;
        case 3: return PRODUCER;
        case 4: return CONSUMER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Kind>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Kind> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Kind>() {
            public Kind findValueByNumber(int number) {
              return Kind.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return zipkin2.proto3.Span.getDescriptor().getEnumTypes().get(0);
    }

    private static final Kind[] VALUES = values();

    public static Kind valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Kind(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:zipkin.proto3.Span.Kind)
  }

  public static final int TRACE_ID_FIELD_NUMBER = 1;
  private com.google.protobuf.ByteString traceId_;
  /**
   * <pre>
   * Randomly generated, unique identifier for a trace, set on all spans within
   * it.
   * This field is required and encoded as 8 or 16 bytes, in big endian byte
   * order.
   * </pre>
   *
   * <code>bytes trace_id = 1;</code>
   * @return The traceId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getTraceId() {
    return traceId_;
  }

  public static final int PARENT_ID_FIELD_NUMBER = 2;
  private com.google.protobuf.ByteString parentId_;
  /**
   * <pre>
   * The parent span ID or absent if this the root span in a trace.
   * </pre>
   *
   * <code>bytes parent_id = 2;</code>
   * @return The parentId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getParentId() {
    return parentId_;
  }

  public static final int ID_FIELD_NUMBER = 3;
  private com.google.protobuf.ByteString id_;
  /**
   * <pre>
   * Unique identifier for this operation within the trace.
   * This field is required and encoded as 8 opaque bytes.
   * </pre>
   *
   * <code>bytes id = 3;</code>
   * @return The id.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getId() {
    return id_;
  }

  public static final int KIND_FIELD_NUMBER = 4;
  private int kind_;
  /**
   * <pre>
   * When present, used to interpret remote_endpoint
   * </pre>
   *
   * <code>.zipkin.proto3.Span.Kind kind = 4;</code>
   * @return The enum numeric value on the wire for kind.
   */
  @java.lang.Override public int getKindValue() {
    return kind_;
  }
  /**
   * <pre>
   * When present, used to interpret remote_endpoint
   * </pre>
   *
   * <code>.zipkin.proto3.Span.Kind kind = 4;</code>
   * @return The kind.
   */
  @java.lang.Override public zipkin2.proto3.Span.Kind getKind() {
    @SuppressWarnings("deprecation")
    zipkin2.proto3.Span.Kind result = zipkin2.proto3.Span.Kind.valueOf(kind_);
    return result == null ? zipkin2.proto3.Span.Kind.UNRECOGNIZED : result;
  }

  public static final int NAME_FIELD_NUMBER = 5;
  private volatile java.lang.Object name_;
  /**
   * <pre>
   * The logical operation this span represents in lowercase (e.g. rpc method).
   * Leave absent if unknown.
   * As these are lookup labels, take care to ensure names are low cardinality.
   * For example, do not embed variables into the name.
   * </pre>
   *
   * <code>string name = 5;</code>
   * @return The name.
   */
  @java.lang.Override
  public java.lang.String getName() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The logical operation this span represents in lowercase (e.g. rpc method).
   * Leave absent if unknown.
   * As these are lookup labels, take care to ensure names are low cardinality.
   * For example, do not embed variables into the name.
   * </pre>
   *
   * <code>string name = 5;</code>
   * @return The bytes for name.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNameBytes() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TIMESTAMP_FIELD_NUMBER = 6;
  private long timestamp_;
  /**
   * <pre>
   * Epoch microseconds of the start of this span, possibly absent if
   * incomplete.
   * For example, 1502787600000000 corresponds to 2017-08-15 09:00 UTC
   * This value should be set directly by instrumentation, using the most
   * precise value possible. For example, gettimeofday or multiplying epoch
   * millis by 1000.
   * There are three known edge-cases where this could be reported absent.
   * - A span was allocated but never started (ex not yet received a timestamp)
   * - The span's start event was lost
   * - Data about a completed span (ex tags) were sent after the fact
   * </pre>
   *
   * <code>fixed64 timestamp = 6;</code>
   * @return The timestamp.
   */
  @java.lang.Override
  public long getTimestamp() {
    return timestamp_;
  }

  public static final int DURATION_FIELD_NUMBER = 7;
  private long duration_;
  /**
   * <pre>
   * Duration in microseconds of the critical path, if known. Durations of less
   * than one are rounded up. Duration of children can be longer than their
   * parents due to asynchronous operations.
   * For example 150 milliseconds is 150000 microseconds.
   * </pre>
   *
   * <code>uint64 duration = 7;</code>
   * @return The duration.
   */
  @java.lang.Override
  public long getDuration() {
    return duration_;
  }

  public static final int LOCAL_ENDPOINT_FIELD_NUMBER = 8;
  private zipkin2.proto3.Endpoint localEndpoint_;
  /**
   * <pre>
   * The host that recorded this span, primarily for query by service name.
   * Instrumentation should always record this. Usually, absent implies late
   * data. The IP address corresponding to this is usually the site local or
   * advertised service address. When present, the port indicates the listen
   * port.
   * </pre>
   *
   * <code>.zipkin.proto3.Endpoint local_endpoint = 8;</code>
   * @return Whether the localEndpoint field is set.
   */
  @java.lang.Override
  public boolean hasLocalEndpoint() {
    return localEndpoint_ != null;
  }
  /**
   * <pre>
   * The host that recorded this span, primarily for query by service name.
   * Instrumentation should always record this. Usually, absent implies late
   * data. The IP address corresponding to this is usually the site local or
   * advertised service address. When present, the port indicates the listen
   * port.
   * </pre>
   *
   * <code>.zipkin.proto3.Endpoint local_endpoint = 8;</code>
   * @return The localEndpoint.
   */
  @java.lang.Override
  public zipkin2.proto3.Endpoint getLocalEndpoint() {
    return localEndpoint_ == null ? zipkin2.proto3.Endpoint.getDefaultInstance() : localEndpoint_;
  }
  /**
   * <pre>
   * The host that recorded this span, primarily for query by service name.
   * Instrumentation should always record this. Usually, absent implies late
   * data. The IP address corresponding to this is usually the site local or
   * advertised service address. When present, the port indicates the listen
   * port.
   * </pre>
   *
   * <code>.zipkin.proto3.Endpoint local_endpoint = 8;</code>
   */
  @java.lang.Override
  public zipkin2.proto3.EndpointOrBuilder getLocalEndpointOrBuilder() {
    return getLocalEndpoint();
  }

  public static final int REMOTE_ENDPOINT_FIELD_NUMBER = 9;
  private zipkin2.proto3.Endpoint remoteEndpoint_;
  /**
   * <pre>
   * When an RPC (or messaging) span, indicates the other side of the
   * connection.
   * By recording the remote endpoint, your trace will contain network context
   * even if the peer is not tracing. For example, you can record the IP from
   * the "X-Forwarded-For" header or the service name and socket of a remote
   * peer.
   * </pre>
   *
   * <code>.zipkin.proto3.Endpoint remote_endpoint = 9;</code>
   * @return Whether the remoteEndpoint field is set.
   */
  @java.lang.Override
  public boolean hasRemoteEndpoint() {
    return remoteEndpoint_ != null;
  }
  /**
   * <pre>
   * When an RPC (or messaging) span, indicates the other side of the
   * connection.
   * By recording the remote endpoint, your trace will contain network context
   * even if the peer is not tracing. For example, you can record the IP from
   * the "X-Forwarded-For" header or the service name and socket of a remote
   * peer.
   * </pre>
   *
   * <code>.zipkin.proto3.Endpoint remote_endpoint = 9;</code>
   * @return The remoteEndpoint.
   */
  @java.lang.Override
  public zipkin2.proto3.Endpoint getRemoteEndpoint() {
    return remoteEndpoint_ == null ? zipkin2.proto3.Endpoint.getDefaultInstance() : remoteEndpoint_;
  }
  /**
   * <pre>
   * When an RPC (or messaging) span, indicates the other side of the
   * connection.
   * By recording the remote endpoint, your trace will contain network context
   * even if the peer is not tracing. For example, you can record the IP from
   * the "X-Forwarded-For" header or the service name and socket of a remote
   * peer.
   * </pre>
   *
   * <code>.zipkin.proto3.Endpoint remote_endpoint = 9;</code>
   */
  @java.lang.Override
  public zipkin2.proto3.EndpointOrBuilder getRemoteEndpointOrBuilder() {
    return getRemoteEndpoint();
  }

  public static final int ANNOTATIONS_FIELD_NUMBER = 10;
  private java.util.List<zipkin2.proto3.Annotation> annotations_;
  /**
   * <pre>
   * Associates events that explain latency with the time they happened.
   * </pre>
   *
   * <code>repeated .zipkin.proto3.Annotation annotations = 10;</code>
   */
  @java.lang.Override
  public java.util.List<zipkin2.proto3.Annotation> getAnnotationsList() {
    return annotations_;
  }
  /**
   * <pre>
   * Associates events that explain latency with the time they happened.
   * </pre>
   *
   * <code>repeated .zipkin.proto3.Annotation annotations = 10;</code>
   */
  @java.lang.Override
  public java.util.List<? extends zipkin2.proto3.AnnotationOrBuilder> 
      getAnnotationsOrBuilderList() {
    return annotations_;
  }
  /**
   * <pre>
   * Associates events that explain latency with the time they happened.
   * </pre>
   *
   * <code>repeated .zipkin.proto3.Annotation annotations = 10;</code>
   */
  @java.lang.Override
  public int getAnnotationsCount() {
    return annotations_.size();
  }
  /**
   * <pre>
   * Associates events that explain latency with the time they happened.
   * </pre>
   *
   * <code>repeated .zipkin.proto3.Annotation annotations = 10;</code>
   */
  @java.lang.Override
  public zipkin2.proto3.Annotation getAnnotations(int index) {
    return annotations_.get(index);
  }
  /**
   * <pre>
   * Associates events that explain latency with the time they happened.
   * </pre>
   *
   * <code>repeated .zipkin.proto3.Annotation annotations = 10;</code>
   */
  @java.lang.Override
  public zipkin2.proto3.AnnotationOrBuilder getAnnotationsOrBuilder(
      int index) {
    return annotations_.get(index);
  }

  public static final int TAGS_FIELD_NUMBER = 11;
  private static final class TagsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, java.lang.String> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, java.lang.String>newDefaultInstance(
                zipkin2.proto3.Zipkin.internal_static_zipkin_proto3_Span_TagsEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.STRING,
                "");
  }
  private com.google.protobuf.MapField<
      java.lang.String, java.lang.String> tags_;
  private com.google.protobuf.MapField<java.lang.String, java.lang.String>
  internalGetTags() {
    if (tags_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          TagsDefaultEntryHolder.defaultEntry);
    }
    return tags_;
  }

  public int getTagsCount() {
    return internalGetTags().getMap().size();
  }
  /**
   * <pre>
   * Tags give your span context for search, viewing and analysis.
   * For example, a key "your_app.version" would let you lookup traces by
   * version. A tag "sql.query" isn't searchable, but it can help in debugging
   * when viewing a trace.
   * </pre>
   *
   * <code>map&lt;string, string&gt; tags = 11;</code>
   */

  @java.lang.Override
  public boolean containsTags(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    return internalGetTags().getMap().containsKey(key);
  }
  /**
   * Use {@link #getTagsMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.String> getTags() {
    return getTagsMap();
  }
  /**
   * <pre>
   * Tags give your span context for search, viewing and analysis.
   * For example, a key "your_app.version" would let you lookup traces by
   * version. A tag "sql.query" isn't searchable, but it can help in debugging
   * when viewing a trace.
   * </pre>
   *
   * <code>map&lt;string, string&gt; tags = 11;</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.String, java.lang.String> getTagsMap() {
    return internalGetTags().getMap();
  }
  /**
   * <pre>
   * Tags give your span context for search, viewing and analysis.
   * For example, a key "your_app.version" would let you lookup traces by
   * version. A tag "sql.query" isn't searchable, but it can help in debugging
   * when viewing a trace.
   * </pre>
   *
   * <code>map&lt;string, string&gt; tags = 11;</code>
   */
  @java.lang.Override

  public java.lang.String getTagsOrDefault(
      java.lang.String key,
      java.lang.String defaultValue) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetTags().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * Tags give your span context for search, viewing and analysis.
   * For example, a key "your_app.version" would let you lookup traces by
   * version. A tag "sql.query" isn't searchable, but it can help in debugging
   * when viewing a trace.
   * </pre>
   *
   * <code>map&lt;string, string&gt; tags = 11;</code>
   */
  @java.lang.Override

  public java.lang.String getTagsOrThrow(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetTags().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int DEBUG_FIELD_NUMBER = 12;
  private boolean debug_;
  /**
   * <pre>
   * True is a request to store this span even if it overrides sampling policy.
   * This is true when the "X-B3-Flags" header has a value of 1.
   * </pre>
   *
   * <code>bool debug = 12;</code>
   * @return The debug.
   */
  @java.lang.Override
  public boolean getDebug() {
    return debug_;
  }

  public static final int SHARED_FIELD_NUMBER = 13;
  private boolean shared_;
  /**
   * <pre>
   * True if we are contributing to a span started by another tracer (ex on a
   * different host).
   * </pre>
   *
   * <code>bool shared = 13;</code>
   * @return The shared.
   */
  @java.lang.Override
  public boolean getShared() {
    return shared_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!traceId_.isEmpty()) {
      output.writeBytes(1, traceId_);
    }
    if (!parentId_.isEmpty()) {
      output.writeBytes(2, parentId_);
    }
    if (!id_.isEmpty()) {
      output.writeBytes(3, id_);
    }
    if (kind_ != zipkin2.proto3.Span.Kind.SPAN_KIND_UNSPECIFIED.getNumber()) {
      output.writeEnum(4, kind_);
    }
    if (!getNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, name_);
    }
    if (timestamp_ != 0L) {
      output.writeFixed64(6, timestamp_);
    }
    if (duration_ != 0L) {
      output.writeUInt64(7, duration_);
    }
    if (localEndpoint_ != null) {
      output.writeMessage(8, getLocalEndpoint());
    }
    if (remoteEndpoint_ != null) {
      output.writeMessage(9, getRemoteEndpoint());
    }
    for (int i = 0; i < annotations_.size(); i++) {
      output.writeMessage(10, annotations_.get(i));
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetTags(),
        TagsDefaultEntryHolder.defaultEntry,
        11);
    if (debug_ != false) {
      output.writeBool(12, debug_);
    }
    if (shared_ != false) {
      output.writeBool(13, shared_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!traceId_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(1, traceId_);
    }
    if (!parentId_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(2, parentId_);
    }
    if (!id_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(3, id_);
    }
    if (kind_ != zipkin2.proto3.Span.Kind.SPAN_KIND_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(4, kind_);
    }
    if (!getNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, name_);
    }
    if (timestamp_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeFixed64Size(6, timestamp_);
    }
    if (duration_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(7, duration_);
    }
    if (localEndpoint_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, getLocalEndpoint());
    }
    if (remoteEndpoint_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, getRemoteEndpoint());
    }
    for (int i = 0; i < annotations_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, annotations_.get(i));
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
         : internalGetTags().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
      tags__ = TagsDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, tags__);
    }
    if (debug_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(12, debug_);
    }
    if (shared_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(13, shared_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof zipkin2.proto3.Span)) {
      return super.equals(obj);
    }
    zipkin2.proto3.Span other = (zipkin2.proto3.Span) obj;

    if (!getTraceId()
        .equals(other.getTraceId())) return false;
    if (!getParentId()
        .equals(other.getParentId())) return false;
    if (!getId()
        .equals(other.getId())) return false;
    if (kind_ != other.kind_) return false;
    if (!getName()
        .equals(other.getName())) return false;
    if (getTimestamp()
        != other.getTimestamp()) return false;
    if (getDuration()
        != other.getDuration()) return false;
    if (hasLocalEndpoint() != other.hasLocalEndpoint()) return false;
    if (hasLocalEndpoint()) {
      if (!getLocalEndpoint()
          .equals(other.getLocalEndpoint())) return false;
    }
    if (hasRemoteEndpoint() != other.hasRemoteEndpoint()) return false;
    if (hasRemoteEndpoint()) {
      if (!getRemoteEndpoint()
          .equals(other.getRemoteEndpoint())) return false;
    }
    if (!getAnnotationsList()
        .equals(other.getAnnotationsList())) return false;
    if (!internalGetTags().equals(
        other.internalGetTags())) return false;
    if (getDebug()
        != other.getDebug()) return false;
    if (getShared()
        != other.getShared()) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + TRACE_ID_FIELD_NUMBER;
    hash = (53 * hash) + getTraceId().hashCode();
    hash = (37 * hash) + PARENT_ID_FIELD_NUMBER;
    hash = (53 * hash) + getParentId().hashCode();
    hash = (37 * hash) + ID_FIELD_NUMBER;
    hash = (53 * hash) + getId().hashCode();
    hash = (37 * hash) + KIND_FIELD_NUMBER;
    hash = (53 * hash) + kind_;
    hash = (37 * hash) + NAME_FIELD_NUMBER;
    hash = (53 * hash) + getName().hashCode();
    hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getTimestamp());
    hash = (37 * hash) + DURATION_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getDuration());
    if (hasLocalEndpoint()) {
      hash = (37 * hash) + LOCAL_ENDPOINT_FIELD_NUMBER;
      hash = (53 * hash) + getLocalEndpoint().hashCode();
    }
    if (hasRemoteEndpoint()) {
      hash = (37 * hash) + REMOTE_ENDPOINT_FIELD_NUMBER;
      hash = (53 * hash) + getRemoteEndpoint().hashCode();
    }
    if (getAnnotationsCount() > 0) {
      hash = (37 * hash) + ANNOTATIONS_FIELD_NUMBER;
      hash = (53 * hash) + getAnnotationsList().hashCode();
    }
    if (!internalGetTags().getMap().isEmpty()) {
      hash = (37 * hash) + TAGS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetTags().hashCode();
    }
    hash = (37 * hash) + DEBUG_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getDebug());
    hash = (37 * hash) + SHARED_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getShared());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static zipkin2.proto3.Span parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static zipkin2.proto3.Span parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static zipkin2.proto3.Span parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static zipkin2.proto3.Span parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static zipkin2.proto3.Span parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static zipkin2.proto3.Span parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static zipkin2.proto3.Span parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static zipkin2.proto3.Span parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static zipkin2.proto3.Span parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static zipkin2.proto3.Span parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static zipkin2.proto3.Span parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static zipkin2.proto3.Span parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(zipkin2.proto3.Span prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * A span is a single-host view of an operation. A trace is a series of spans
   * (often RPC calls) which nest to form a latency tree. Spans are in the same
   * trace when they share the same trace ID. The parent_id field establishes the
   * position of one span in the tree.
   * The root span is where parent_id is Absent and usually has the longest
   * duration in the trace. However, nested asynchronous work can materialize as
   * child spans whose duration exceed the root span.
   * Spans usually represent remote activity such as RPC calls, or messaging
   * producers and consumers. However, they can also represent in-process
   * activity in any position of the trace. For example, a root span could
   * represent a server receiving an initial client request. A root span could
   * also represent a scheduled job that has no remote context.
   * Encoding notes:
   * Epoch timestamp are encoded fixed64 as varint would also be 8 bytes, and more
   * expensive to encode and size. Duration is stored uint64, as often the numbers
   * are quite small.
   * Default values are ok, as only natural numbers are used. For example, zero is
   * an invalid timestamp and an invalid duration, false values for debug or shared
   * are ignorable, and zero-length strings also coerce to null.
   * The next id is 14.
   * Note fields up to 15 take 1 byte to encode. Take care when adding new fields
   * https://developers.google.com/protocol-buffers/docs/proto3#assigning-tags
   * </pre>
   *
   * Protobuf type {@code zipkin.proto3.Span}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:zipkin.proto3.Span)
      zipkin2.proto3.SpanOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return zipkin2.proto3.Zipkin.internal_static_zipkin_proto3_Span_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 11:
          return internalGetTags();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 11:
          return internalGetMutableTags();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return zipkin2.proto3.Zipkin.internal_static_zipkin_proto3_Span_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              zipkin2.proto3.Span.class, zipkin2.proto3.Span.Builder.class);
    }

    // Construct using zipkin2.proto3.Span.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getAnnotationsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      traceId_ = com.google.protobuf.ByteString.EMPTY;

      parentId_ = com.google.protobuf.ByteString.EMPTY;

      id_ = com.google.protobuf.ByteString.EMPTY;

      kind_ = 0;

      name_ = "";

      timestamp_ = 0L;

      duration_ = 0L;

      if (localEndpointBuilder_ == null) {
        localEndpoint_ = null;
      } else {
        localEndpoint_ = null;
        localEndpointBuilder_ = null;
      }
      if (remoteEndpointBuilder_ == null) {
        remoteEndpoint_ = null;
      } else {
        remoteEndpoint_ = null;
        remoteEndpointBuilder_ = null;
      }
      if (annotationsBuilder_ == null) {
        annotations_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        annotationsBuilder_.clear();
      }
      internalGetMutableTags().clear();
      debug_ = false;

      shared_ = false;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return zipkin2.proto3.Zipkin.internal_static_zipkin_proto3_Span_descriptor;
    }

    @java.lang.Override
    public zipkin2.proto3.Span getDefaultInstanceForType() {
      return zipkin2.proto3.Span.getDefaultInstance();
    }

    @java.lang.Override
    public zipkin2.proto3.Span build() {
      zipkin2.proto3.Span result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public zipkin2.proto3.Span buildPartial() {
      zipkin2.proto3.Span result = new zipkin2.proto3.Span(this);
      int from_bitField0_ = bitField0_;
      result.traceId_ = traceId_;
      result.parentId_ = parentId_;
      result.id_ = id_;
      result.kind_ = kind_;
      result.name_ = name_;
      result.timestamp_ = timestamp_;
      result.duration_ = duration_;
      if (localEndpointBuilder_ == null) {
        result.localEndpoint_ = localEndpoint_;
      } else {
        result.localEndpoint_ = localEndpointBuilder_.build();
      }
      if (remoteEndpointBuilder_ == null) {
        result.remoteEndpoint_ = remoteEndpoint_;
      } else {
        result.remoteEndpoint_ = remoteEndpointBuilder_.build();
      }
      if (annotationsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          annotations_ = java.util.Collections.unmodifiableList(annotations_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.annotations_ = annotations_;
      } else {
        result.annotations_ = annotationsBuilder_.build();
      }
      result.tags_ = internalGetTags();
      result.tags_.makeImmutable();
      result.debug_ = debug_;
      result.shared_ = shared_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof zipkin2.proto3.Span) {
        return mergeFrom((zipkin2.proto3.Span)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(zipkin2.proto3.Span other) {
      if (other == zipkin2.proto3.Span.getDefaultInstance()) return this;
      if (other.getTraceId() != com.google.protobuf.ByteString.EMPTY) {
        setTraceId(other.getTraceId());
      }
      if (other.getParentId() != com.google.protobuf.ByteString.EMPTY) {
        setParentId(other.getParentId());
      }
      if (other.getId() != com.google.protobuf.ByteString.EMPTY) {
        setId(other.getId());
      }
      if (other.kind_ != 0) {
        setKindValue(other.getKindValue());
      }
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        onChanged();
      }
      if (other.getTimestamp() != 0L) {
        setTimestamp(other.getTimestamp());
      }
      if (other.getDuration() != 0L) {
        setDuration(other.getDuration());
      }
      if (other.hasLocalEndpoint()) {
        mergeLocalEndpoint(other.getLocalEndpoint());
      }
      if (other.hasRemoteEndpoint()) {
        mergeRemoteEndpoint(other.getRemoteEndpoint());
      }
      if (annotationsBuilder_ == null) {
        if (!other.annotations_.isEmpty()) {
          if (annotations_.isEmpty()) {
            annotations_ = other.annotations_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureAnnotationsIsMutable();
            annotations_.addAll(other.annotations_);
          }
          onChanged();
        }
      } else {
        if (!other.annotations_.isEmpty()) {
          if (annotationsBuilder_.isEmpty()) {
            annotationsBuilder_.dispose();
            annotationsBuilder_ = null;
            annotations_ = other.annotations_;
            bitField0_ = (bitField0_ & ~0x00000001);
            annotationsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getAnnotationsFieldBuilder() : null;
          } else {
            annotationsBuilder_.addAllMessages(other.annotations_);
          }
        }
      }
      internalGetMutableTags().mergeFrom(
          other.internalGetTags());
      if (other.getDebug() != false) {
        setDebug(other.getDebug());
      }
      if (other.getShared() != false) {
        setShared(other.getShared());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      zipkin2.proto3.Span parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (zipkin2.proto3.Span) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.ByteString traceId_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * Randomly generated, unique identifier for a trace, set on all spans within
     * it.
     * This field is required and encoded as 8 or 16 bytes, in big endian byte
     * order.
     * </pre>
     *
     * <code>bytes trace_id = 1;</code>
     * @return The traceId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getTraceId() {
      return traceId_;
    }
    /**
     * <pre>
     * Randomly generated, unique identifier for a trace, set on all spans within
     * it.
     * This field is required and encoded as 8 or 16 bytes, in big endian byte
     * order.
     * </pre>
     *
     * <code>bytes trace_id = 1;</code>
     * @param value The traceId to set.
     * @return This builder for chaining.
     */
    public Builder setTraceId(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      traceId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Randomly generated, unique identifier for a trace, set on all spans within
     * it.
     * This field is required and encoded as 8 or 16 bytes, in big endian byte
     * order.
     * </pre>
     *
     * <code>bytes trace_id = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearTraceId() {
      
      traceId_ = getDefaultInstance().getTraceId();
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString parentId_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * The parent span ID or absent if this the root span in a trace.
     * </pre>
     *
     * <code>bytes parent_id = 2;</code>
     * @return The parentId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getParentId() {
      return parentId_;
    }
    /**
     * <pre>
     * The parent span ID or absent if this the root span in a trace.
     * </pre>
     *
     * <code>bytes parent_id = 2;</code>
     * @param value The parentId to set.
     * @return This builder for chaining.
     */
    public Builder setParentId(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      parentId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The parent span ID or absent if this the root span in a trace.
     * </pre>
     *
     * <code>bytes parent_id = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearParentId() {
      
      parentId_ = getDefaultInstance().getParentId();
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString id_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * Unique identifier for this operation within the trace.
     * This field is required and encoded as 8 opaque bytes.
     * </pre>
     *
     * <code>bytes id = 3;</code>
     * @return The id.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getId() {
      return id_;
    }
    /**
     * <pre>
     * Unique identifier for this operation within the trace.
     * This field is required and encoded as 8 opaque bytes.
     * </pre>
     *
     * <code>bytes id = 3;</code>
     * @param value The id to set.
     * @return This builder for chaining.
     */
    public Builder setId(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      id_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Unique identifier for this operation within the trace.
     * This field is required and encoded as 8 opaque bytes.
     * </pre>
     *
     * <code>bytes id = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearId() {
      
      id_ = getDefaultInstance().getId();
      onChanged();
      return this;
    }

    private int kind_ = 0;
    /**
     * <pre>
     * When present, used to interpret remote_endpoint
     * </pre>
     *
     * <code>.zipkin.proto3.Span.Kind kind = 4;</code>
     * @return The enum numeric value on the wire for kind.
     */
    @java.lang.Override public int getKindValue() {
      return kind_;
    }
    /**
     * <pre>
     * When present, used to interpret remote_endpoint
     * </pre>
     *
     * <code>.zipkin.proto3.Span.Kind kind = 4;</code>
     * @param value The enum numeric value on the wire for kind to set.
     * @return This builder for chaining.
     */
    public Builder setKindValue(int value) {
      
      kind_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * When present, used to interpret remote_endpoint
     * </pre>
     *
     * <code>.zipkin.proto3.Span.Kind kind = 4;</code>
     * @return The kind.
     */
    @java.lang.Override
    public zipkin2.proto3.Span.Kind getKind() {
      @SuppressWarnings("deprecation")
      zipkin2.proto3.Span.Kind result = zipkin2.proto3.Span.Kind.valueOf(kind_);
      return result == null ? zipkin2.proto3.Span.Kind.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * When present, used to interpret remote_endpoint
     * </pre>
     *
     * <code>.zipkin.proto3.Span.Kind kind = 4;</code>
     * @param value The kind to set.
     * @return This builder for chaining.
     */
    public Builder setKind(zipkin2.proto3.Span.Kind value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      kind_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * When present, used to interpret remote_endpoint
     * </pre>
     *
     * <code>.zipkin.proto3.Span.Kind kind = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearKind() {
      
      kind_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object name_ = "";
    /**
     * <pre>
     * The logical operation this span represents in lowercase (e.g. rpc method).
     * Leave absent if unknown.
     * As these are lookup labels, take care to ensure names are low cardinality.
     * For example, do not embed variables into the name.
     * </pre>
     *
     * <code>string name = 5;</code>
     * @return The name.
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The logical operation this span represents in lowercase (e.g. rpc method).
     * Leave absent if unknown.
     * As these are lookup labels, take care to ensure names are low cardinality.
     * For example, do not embed variables into the name.
     * </pre>
     *
     * <code>string name = 5;</code>
     * @return The bytes for name.
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The logical operation this span represents in lowercase (e.g. rpc method).
     * Leave absent if unknown.
     * As these are lookup labels, take care to ensure names are low cardinality.
     * For example, do not embed variables into the name.
     * </pre>
     *
     * <code>string name = 5;</code>
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      name_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The logical operation this span represents in lowercase (e.g. rpc method).
     * Leave absent if unknown.
     * As these are lookup labels, take care to ensure names are low cardinality.
     * For example, do not embed variables into the name.
     * </pre>
     *
     * <code>string name = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearName() {
      
      name_ = getDefaultInstance().getName();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The logical operation this span represents in lowercase (e.g. rpc method).
     * Leave absent if unknown.
     * As these are lookup labels, take care to ensure names are low cardinality.
     * For example, do not embed variables into the name.
     * </pre>
     *
     * <code>string name = 5;</code>
     * @param value The bytes for name to set.
     * @return This builder for chaining.
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      name_ = value;
      onChanged();
      return this;
    }

    private long timestamp_ ;
    /**
     * <pre>
     * Epoch microseconds of the start of this span, possibly absent if
     * incomplete.
     * For example, 1502787600000000 corresponds to 2017-08-15 09:00 UTC
     * This value should be set directly by instrumentation, using the most
     * precise value possible. For example, gettimeofday or multiplying epoch
     * millis by 1000.
     * There are three known edge-cases where this could be reported absent.
     * - A span was allocated but never started (ex not yet received a timestamp)
     * - The span's start event was lost
     * - Data about a completed span (ex tags) were sent after the fact
     * </pre>
     *
     * <code>fixed64 timestamp = 6;</code>
     * @return The timestamp.
     */
    @java.lang.Override
    public long getTimestamp() {
      return timestamp_;
    }
    /**
     * <pre>
     * Epoch microseconds of the start of this span, possibly absent if
     * incomplete.
     * For example, 1502787600000000 corresponds to 2017-08-15 09:00 UTC
     * This value should be set directly by instrumentation, using the most
     * precise value possible. For example, gettimeofday or multiplying epoch
     * millis by 1000.
     * There are three known edge-cases where this could be reported absent.
     * - A span was allocated but never started (ex not yet received a timestamp)
     * - The span's start event was lost
     * - Data about a completed span (ex tags) were sent after the fact
     * </pre>
     *
     * <code>fixed64 timestamp = 6;</code>
     * @param value The timestamp to set.
     * @return This builder for chaining.
     */
    public Builder setTimestamp(long value) {
      
      timestamp_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Epoch microseconds of the start of this span, possibly absent if
     * incomplete.
     * For example, 1502787600000000 corresponds to 2017-08-15 09:00 UTC
     * This value should be set directly by instrumentation, using the most
     * precise value possible. For example, gettimeofday or multiplying epoch
     * millis by 1000.
     * There are three known edge-cases where this could be reported absent.
     * - A span was allocated but never started (ex not yet received a timestamp)
     * - The span's start event was lost
     * - Data about a completed span (ex tags) were sent after the fact
     * </pre>
     *
     * <code>fixed64 timestamp = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearTimestamp() {
      
      timestamp_ = 0L;
      onChanged();
      return this;
    }

    private long duration_ ;
    /**
     * <pre>
     * Duration in microseconds of the critical path, if known. Durations of less
     * than one are rounded up. Duration of children can be longer than their
     * parents due to asynchronous operations.
     * For example 150 milliseconds is 150000 microseconds.
     * </pre>
     *
     * <code>uint64 duration = 7;</code>
     * @return The duration.
     */
    @java.lang.Override
    public long getDuration() {
      return duration_;
    }
    /**
     * <pre>
     * Duration in microseconds of the critical path, if known. Durations of less
     * than one are rounded up. Duration of children can be longer than their
     * parents due to asynchronous operations.
     * For example 150 milliseconds is 150000 microseconds.
     * </pre>
     *
     * <code>uint64 duration = 7;</code>
     * @param value The duration to set.
     * @return This builder for chaining.
     */
    public Builder setDuration(long value) {
      
      duration_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Duration in microseconds of the critical path, if known. Durations of less
     * than one are rounded up. Duration of children can be longer than their
     * parents due to asynchronous operations.
     * For example 150 milliseconds is 150000 microseconds.
     * </pre>
     *
     * <code>uint64 duration = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearDuration() {
      
      duration_ = 0L;
      onChanged();
      return this;
    }

    private zipkin2.proto3.Endpoint localEndpoint_;
    private com.google.protobuf.SingleFieldBuilderV3<
        zipkin2.proto3.Endpoint, zipkin2.proto3.Endpoint.Builder, zipkin2.proto3.EndpointOrBuilder> localEndpointBuilder_;
    /**
     * <pre>
     * The host that recorded this span, primarily for query by service name.
     * Instrumentation should always record this. Usually, absent implies late
     * data. The IP address corresponding to this is usually the site local or
     * advertised service address. When present, the port indicates the listen
     * port.
     * </pre>
     *
     * <code>.zipkin.proto3.Endpoint local_endpoint = 8;</code>
     * @return Whether the localEndpoint field is set.
     */
    public boolean hasLocalEndpoint() {
      return localEndpointBuilder_ != null || localEndpoint_ != null;
    }
    /**
     * <pre>
     * The host that recorded this span, primarily for query by service name.
     * Instrumentation should always record this. Usually, absent implies late
     * data. The IP address corresponding to this is usually the site local or
     * advertised service address. When present, the port indicates the listen
     * port.
     * </pre>
     *
     * <code>.zipkin.proto3.Endpoint local_endpoint = 8;</code>
     * @return The localEndpoint.
     */
    public zipkin2.proto3.Endpoint getLocalEndpoint() {
      if (localEndpointBuilder_ == null) {
        return localEndpoint_ == null ? zipkin2.proto3.Endpoint.getDefaultInstance() : localEndpoint_;
      } else {
        return localEndpointBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The host that recorded this span, primarily for query by service name.
     * Instrumentation should always record this. Usually, absent implies late
     * data. The IP address corresponding to this is usually the site local or
     * advertised service address. When present, the port indicates the listen
     * port.
     * </pre>
     *
     * <code>.zipkin.proto3.Endpoint local_endpoint = 8;</code>
     */
    public Builder setLocalEndpoint(zipkin2.proto3.Endpoint value) {
      if (localEndpointBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        localEndpoint_ = value;
        onChanged();
      } else {
        localEndpointBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The host that recorded this span, primarily for query by service name.
     * Instrumentation should always record this. Usually, absent implies late
     * data. The IP address corresponding to this is usually the site local or
     * advertised service address. When present, the port indicates the listen
     * port.
     * </pre>
     *
     * <code>.zipkin.proto3.Endpoint local_endpoint = 8;</code>
     */
    public Builder setLocalEndpoint(
        zipkin2.proto3.Endpoint.Builder builderForValue) {
      if (localEndpointBuilder_ == null) {
        localEndpoint_ = builderForValue.build();
        onChanged();
      } else {
        localEndpointBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The host that recorded this span, primarily for query by service name.
     * Instrumentation should always record this. Usually, absent implies late
     * data. The IP address corresponding to this is usually the site local or
     * advertised service address. When present, the port indicates the listen
     * port.
     * </pre>
     *
     * <code>.zipkin.proto3.Endpoint local_endpoint = 8;</code>
     */
    public Builder mergeLocalEndpoint(zipkin2.proto3.Endpoint value) {
      if (localEndpointBuilder_ == null) {
        if (localEndpoint_ != null) {
          localEndpoint_ =
            zipkin2.proto3.Endpoint.newBuilder(localEndpoint_).mergeFrom(value).buildPartial();
        } else {
          localEndpoint_ = value;
        }
        onChanged();
      } else {
        localEndpointBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The host that recorded this span, primarily for query by service name.
     * Instrumentation should always record this. Usually, absent implies late
     * data. The IP address corresponding to this is usually the site local or
     * advertised service address. When present, the port indicates the listen
     * port.
     * </pre>
     *
     * <code>.zipkin.proto3.Endpoint local_endpoint = 8;</code>
     */
    public Builder clearLocalEndpoint() {
      if (localEndpointBuilder_ == null) {
        localEndpoint_ = null;
        onChanged();
      } else {
        localEndpoint_ = null;
        localEndpointBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The host that recorded this span, primarily for query by service name.
     * Instrumentation should always record this. Usually, absent implies late
     * data. The IP address corresponding to this is usually the site local or
     * advertised service address. When present, the port indicates the listen
     * port.
     * </pre>
     *
     * <code>.zipkin.proto3.Endpoint local_endpoint = 8;</code>
     */
    public zipkin2.proto3.Endpoint.Builder getLocalEndpointBuilder() {
      
      onChanged();
      return getLocalEndpointFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The host that recorded this span, primarily for query by service name.
     * Instrumentation should always record this. Usually, absent implies late
     * data. The IP address corresponding to this is usually the site local or
     * advertised service address. When present, the port indicates the listen
     * port.
     * </pre>
     *
     * <code>.zipkin.proto3.Endpoint local_endpoint = 8;</code>
     */
    public zipkin2.proto3.EndpointOrBuilder getLocalEndpointOrBuilder() {
      if (localEndpointBuilder_ != null) {
        return localEndpointBuilder_.getMessageOrBuilder();
      } else {
        return localEndpoint_ == null ?
            zipkin2.proto3.Endpoint.getDefaultInstance() : localEndpoint_;
      }
    }
    /**
     * <pre>
     * The host that recorded this span, primarily for query by service name.
     * Instrumentation should always record this. Usually, absent implies late
     * data. The IP address corresponding to this is usually the site local or
     * advertised service address. When present, the port indicates the listen
     * port.
     * </pre>
     *
     * <code>.zipkin.proto3.Endpoint local_endpoint = 8;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        zipkin2.proto3.Endpoint, zipkin2.proto3.Endpoint.Builder, zipkin2.proto3.EndpointOrBuilder> 
        getLocalEndpointFieldBuilder() {
      if (localEndpointBuilder_ == null) {
        localEndpointBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            zipkin2.proto3.Endpoint, zipkin2.proto3.Endpoint.Builder, zipkin2.proto3.EndpointOrBuilder>(
                getLocalEndpoint(),
                getParentForChildren(),
                isClean());
        localEndpoint_ = null;
      }
      return localEndpointBuilder_;
    }

    private zipkin2.proto3.Endpoint remoteEndpoint_;
    private com.google.protobuf.SingleFieldBuilderV3<
        zipkin2.proto3.Endpoint, zipkin2.proto3.Endpoint.Builder, zipkin2.proto3.EndpointOrBuilder> remoteEndpointBuilder_;
    /**
     * <pre>
     * When an RPC (or messaging) span, indicates the other side of the
     * connection.
     * By recording the remote endpoint, your trace will contain network context
     * even if the peer is not tracing. For example, you can record the IP from
     * the "X-Forwarded-For" header or the service name and socket of a remote
     * peer.
     * </pre>
     *
     * <code>.zipkin.proto3.Endpoint remote_endpoint = 9;</code>
     * @return Whether the remoteEndpoint field is set.
     */
    public boolean hasRemoteEndpoint() {
      return remoteEndpointBuilder_ != null || remoteEndpoint_ != null;
    }
    /**
     * <pre>
     * When an RPC (or messaging) span, indicates the other side of the
     * connection.
     * By recording the remote endpoint, your trace will contain network context
     * even if the peer is not tracing. For example, you can record the IP from
     * the "X-Forwarded-For" header or the service name and socket of a remote
     * peer.
     * </pre>
     *
     * <code>.zipkin.proto3.Endpoint remote_endpoint = 9;</code>
     * @return The remoteEndpoint.
     */
    public zipkin2.proto3.Endpoint getRemoteEndpoint() {
      if (remoteEndpointBuilder_ == null) {
        return remoteEndpoint_ == null ? zipkin2.proto3.Endpoint.getDefaultInstance() : remoteEndpoint_;
      } else {
        return remoteEndpointBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * When an RPC (or messaging) span, indicates the other side of the
     * connection.
     * By recording the remote endpoint, your trace will contain network context
     * even if the peer is not tracing. For example, you can record the IP from
     * the "X-Forwarded-For" header or the service name and socket of a remote
     * peer.
     * </pre>
     *
     * <code>.zipkin.proto3.Endpoint remote_endpoint = 9;</code>
     */
    public Builder setRemoteEndpoint(zipkin2.proto3.Endpoint value) {
      if (remoteEndpointBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        remoteEndpoint_ = value;
        onChanged();
      } else {
        remoteEndpointBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * When an RPC (or messaging) span, indicates the other side of the
     * connection.
     * By recording the remote endpoint, your trace will contain network context
     * even if the peer is not tracing. For example, you can record the IP from
     * the "X-Forwarded-For" header or the service name and socket of a remote
     * peer.
     * </pre>
     *
     * <code>.zipkin.proto3.Endpoint remote_endpoint = 9;</code>
     */
    public Builder setRemoteEndpoint(
        zipkin2.proto3.Endpoint.Builder builderForValue) {
      if (remoteEndpointBuilder_ == null) {
        remoteEndpoint_ = builderForValue.build();
        onChanged();
      } else {
        remoteEndpointBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * When an RPC (or messaging) span, indicates the other side of the
     * connection.
     * By recording the remote endpoint, your trace will contain network context
     * even if the peer is not tracing. For example, you can record the IP from
     * the "X-Forwarded-For" header or the service name and socket of a remote
     * peer.
     * </pre>
     *
     * <code>.zipkin.proto3.Endpoint remote_endpoint = 9;</code>
     */
    public Builder mergeRemoteEndpoint(zipkin2.proto3.Endpoint value) {
      if (remoteEndpointBuilder_ == null) {
        if (remoteEndpoint_ != null) {
          remoteEndpoint_ =
            zipkin2.proto3.Endpoint.newBuilder(remoteEndpoint_).mergeFrom(value).buildPartial();
        } else {
          remoteEndpoint_ = value;
        }
        onChanged();
      } else {
        remoteEndpointBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * When an RPC (or messaging) span, indicates the other side of the
     * connection.
     * By recording the remote endpoint, your trace will contain network context
     * even if the peer is not tracing. For example, you can record the IP from
     * the "X-Forwarded-For" header or the service name and socket of a remote
     * peer.
     * </pre>
     *
     * <code>.zipkin.proto3.Endpoint remote_endpoint = 9;</code>
     */
    public Builder clearRemoteEndpoint() {
      if (remoteEndpointBuilder_ == null) {
        remoteEndpoint_ = null;
        onChanged();
      } else {
        remoteEndpoint_ = null;
        remoteEndpointBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * When an RPC (or messaging) span, indicates the other side of the
     * connection.
     * By recording the remote endpoint, your trace will contain network context
     * even if the peer is not tracing. For example, you can record the IP from
     * the "X-Forwarded-For" header or the service name and socket of a remote
     * peer.
     * </pre>
     *
     * <code>.zipkin.proto3.Endpoint remote_endpoint = 9;</code>
     */
    public zipkin2.proto3.Endpoint.Builder getRemoteEndpointBuilder() {
      
      onChanged();
      return getRemoteEndpointFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * When an RPC (or messaging) span, indicates the other side of the
     * connection.
     * By recording the remote endpoint, your trace will contain network context
     * even if the peer is not tracing. For example, you can record the IP from
     * the "X-Forwarded-For" header or the service name and socket of a remote
     * peer.
     * </pre>
     *
     * <code>.zipkin.proto3.Endpoint remote_endpoint = 9;</code>
     */
    public zipkin2.proto3.EndpointOrBuilder getRemoteEndpointOrBuilder() {
      if (remoteEndpointBuilder_ != null) {
        return remoteEndpointBuilder_.getMessageOrBuilder();
      } else {
        return remoteEndpoint_ == null ?
            zipkin2.proto3.Endpoint.getDefaultInstance() : remoteEndpoint_;
      }
    }
    /**
     * <pre>
     * When an RPC (or messaging) span, indicates the other side of the
     * connection.
     * By recording the remote endpoint, your trace will contain network context
     * even if the peer is not tracing. For example, you can record the IP from
     * the "X-Forwarded-For" header or the service name and socket of a remote
     * peer.
     * </pre>
     *
     * <code>.zipkin.proto3.Endpoint remote_endpoint = 9;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        zipkin2.proto3.Endpoint, zipkin2.proto3.Endpoint.Builder, zipkin2.proto3.EndpointOrBuilder> 
        getRemoteEndpointFieldBuilder() {
      if (remoteEndpointBuilder_ == null) {
        remoteEndpointBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            zipkin2.proto3.Endpoint, zipkin2.proto3.Endpoint.Builder, zipkin2.proto3.EndpointOrBuilder>(
                getRemoteEndpoint(),
                getParentForChildren(),
                isClean());
        remoteEndpoint_ = null;
      }
      return remoteEndpointBuilder_;
    }

    private java.util.List<zipkin2.proto3.Annotation> annotations_ =
      java.util.Collections.emptyList();
    private void ensureAnnotationsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        annotations_ = new java.util.ArrayList<zipkin2.proto3.Annotation>(annotations_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        zipkin2.proto3.Annotation, zipkin2.proto3.Annotation.Builder, zipkin2.proto3.AnnotationOrBuilder> annotationsBuilder_;

    /**
     * <pre>
     * Associates events that explain latency with the time they happened.
     * </pre>
     *
     * <code>repeated .zipkin.proto3.Annotation annotations = 10;</code>
     */
    public java.util.List<zipkin2.proto3.Annotation> getAnnotationsList() {
      if (annotationsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(annotations_);
      } else {
        return annotationsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Associates events that explain latency with the time they happened.
     * </pre>
     *
     * <code>repeated .zipkin.proto3.Annotation annotations = 10;</code>
     */
    public int getAnnotationsCount() {
      if (annotationsBuilder_ == null) {
        return annotations_.size();
      } else {
        return annotationsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Associates events that explain latency with the time they happened.
     * </pre>
     *
     * <code>repeated .zipkin.proto3.Annotation annotations = 10;</code>
     */
    public zipkin2.proto3.Annotation getAnnotations(int index) {
      if (annotationsBuilder_ == null) {
        return annotations_.get(index);
      } else {
        return annotationsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Associates events that explain latency with the time they happened.
     * </pre>
     *
     * <code>repeated .zipkin.proto3.Annotation annotations = 10;</code>
     */
    public Builder setAnnotations(
        int index, zipkin2.proto3.Annotation value) {
      if (annotationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAnnotationsIsMutable();
        annotations_.set(index, value);
        onChanged();
      } else {
        annotationsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Associates events that explain latency with the time they happened.
     * </pre>
     *
     * <code>repeated .zipkin.proto3.Annotation annotations = 10;</code>
     */
    public Builder setAnnotations(
        int index, zipkin2.proto3.Annotation.Builder builderForValue) {
      if (annotationsBuilder_ == null) {
        ensureAnnotationsIsMutable();
        annotations_.set(index, builderForValue.build());
        onChanged();
      } else {
        annotationsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Associates events that explain latency with the time they happened.
     * </pre>
     *
     * <code>repeated .zipkin.proto3.Annotation annotations = 10;</code>
     */
    public Builder addAnnotations(zipkin2.proto3.Annotation value) {
      if (annotationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAnnotationsIsMutable();
        annotations_.add(value);
        onChanged();
      } else {
        annotationsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Associates events that explain latency with the time they happened.
     * </pre>
     *
     * <code>repeated .zipkin.proto3.Annotation annotations = 10;</code>
     */
    public Builder addAnnotations(
        int index, zipkin2.proto3.Annotation value) {
      if (annotationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAnnotationsIsMutable();
        annotations_.add(index, value);
        onChanged();
      } else {
        annotationsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Associates events that explain latency with the time they happened.
     * </pre>
     *
     * <code>repeated .zipkin.proto3.Annotation annotations = 10;</code>
     */
    public Builder addAnnotations(
        zipkin2.proto3.Annotation.Builder builderForValue) {
      if (annotationsBuilder_ == null) {
        ensureAnnotationsIsMutable();
        annotations_.add(builderForValue.build());
        onChanged();
      } else {
        annotationsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Associates events that explain latency with the time they happened.
     * </pre>
     *
     * <code>repeated .zipkin.proto3.Annotation annotations = 10;</code>
     */
    public Builder addAnnotations(
        int index, zipkin2.proto3.Annotation.Builder builderForValue) {
      if (annotationsBuilder_ == null) {
        ensureAnnotationsIsMutable();
        annotations_.add(index, builderForValue.build());
        onChanged();
      } else {
        annotationsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Associates events that explain latency with the time they happened.
     * </pre>
     *
     * <code>repeated .zipkin.proto3.Annotation annotations = 10;</code>
     */
    public Builder addAllAnnotations(
        java.lang.Iterable<? extends zipkin2.proto3.Annotation> values) {
      if (annotationsBuilder_ == null) {
        ensureAnnotationsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, annotations_);
        onChanged();
      } else {
        annotationsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Associates events that explain latency with the time they happened.
     * </pre>
     *
     * <code>repeated .zipkin.proto3.Annotation annotations = 10;</code>
     */
    public Builder clearAnnotations() {
      if (annotationsBuilder_ == null) {
        annotations_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        annotationsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Associates events that explain latency with the time they happened.
     * </pre>
     *
     * <code>repeated .zipkin.proto3.Annotation annotations = 10;</code>
     */
    public Builder removeAnnotations(int index) {
      if (annotationsBuilder_ == null) {
        ensureAnnotationsIsMutable();
        annotations_.remove(index);
        onChanged();
      } else {
        annotationsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Associates events that explain latency with the time they happened.
     * </pre>
     *
     * <code>repeated .zipkin.proto3.Annotation annotations = 10;</code>
     */
    public zipkin2.proto3.Annotation.Builder getAnnotationsBuilder(
        int index) {
      return getAnnotationsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Associates events that explain latency with the time they happened.
     * </pre>
     *
     * <code>repeated .zipkin.proto3.Annotation annotations = 10;</code>
     */
    public zipkin2.proto3.AnnotationOrBuilder getAnnotationsOrBuilder(
        int index) {
      if (annotationsBuilder_ == null) {
        return annotations_.get(index);  } else {
        return annotationsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Associates events that explain latency with the time they happened.
     * </pre>
     *
     * <code>repeated .zipkin.proto3.Annotation annotations = 10;</code>
     */
    public java.util.List<? extends zipkin2.proto3.AnnotationOrBuilder> 
         getAnnotationsOrBuilderList() {
      if (annotationsBuilder_ != null) {
        return annotationsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(annotations_);
      }
    }
    /**
     * <pre>
     * Associates events that explain latency with the time they happened.
     * </pre>
     *
     * <code>repeated .zipkin.proto3.Annotation annotations = 10;</code>
     */
    public zipkin2.proto3.Annotation.Builder addAnnotationsBuilder() {
      return getAnnotationsFieldBuilder().addBuilder(
          zipkin2.proto3.Annotation.getDefaultInstance());
    }
    /**
     * <pre>
     * Associates events that explain latency with the time they happened.
     * </pre>
     *
     * <code>repeated .zipkin.proto3.Annotation annotations = 10;</code>
     */
    public zipkin2.proto3.Annotation.Builder addAnnotationsBuilder(
        int index) {
      return getAnnotationsFieldBuilder().addBuilder(
          index, zipkin2.proto3.Annotation.getDefaultInstance());
    }
    /**
     * <pre>
     * Associates events that explain latency with the time they happened.
     * </pre>
     *
     * <code>repeated .zipkin.proto3.Annotation annotations = 10;</code>
     */
    public java.util.List<zipkin2.proto3.Annotation.Builder> 
         getAnnotationsBuilderList() {
      return getAnnotationsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        zipkin2.proto3.Annotation, zipkin2.proto3.Annotation.Builder, zipkin2.proto3.AnnotationOrBuilder> 
        getAnnotationsFieldBuilder() {
      if (annotationsBuilder_ == null) {
        annotationsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            zipkin2.proto3.Annotation, zipkin2.proto3.Annotation.Builder, zipkin2.proto3.AnnotationOrBuilder>(
                annotations_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        annotations_ = null;
      }
      return annotationsBuilder_;
    }

    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> tags_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetTags() {
      if (tags_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            TagsDefaultEntryHolder.defaultEntry);
      }
      return tags_;
    }
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetMutableTags() {
      onChanged();;
      if (tags_ == null) {
        tags_ = com.google.protobuf.MapField.newMapField(
            TagsDefaultEntryHolder.defaultEntry);
      }
      if (!tags_.isMutable()) {
        tags_ = tags_.copy();
      }
      return tags_;
    }

    public int getTagsCount() {
      return internalGetTags().getMap().size();
    }
    /**
     * <pre>
     * Tags give your span context for search, viewing and analysis.
     * For example, a key "your_app.version" would let you lookup traces by
     * version. A tag "sql.query" isn't searchable, but it can help in debugging
     * when viewing a trace.
     * </pre>
     *
     * <code>map&lt;string, string&gt; tags = 11;</code>
     */

    @java.lang.Override
    public boolean containsTags(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetTags().getMap().containsKey(key);
    }
    /**
     * Use {@link #getTagsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getTags() {
      return getTagsMap();
    }
    /**
     * <pre>
     * Tags give your span context for search, viewing and analysis.
     * For example, a key "your_app.version" would let you lookup traces by
     * version. A tag "sql.query" isn't searchable, but it can help in debugging
     * when viewing a trace.
     * </pre>
     *
     * <code>map&lt;string, string&gt; tags = 11;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.String> getTagsMap() {
      return internalGetTags().getMap();
    }
    /**
     * <pre>
     * Tags give your span context for search, viewing and analysis.
     * For example, a key "your_app.version" would let you lookup traces by
     * version. A tag "sql.query" isn't searchable, but it can help in debugging
     * when viewing a trace.
     * </pre>
     *
     * <code>map&lt;string, string&gt; tags = 11;</code>
     */
    @java.lang.Override

    public java.lang.String getTagsOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetTags().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Tags give your span context for search, viewing and analysis.
     * For example, a key "your_app.version" would let you lookup traces by
     * version. A tag "sql.query" isn't searchable, but it can help in debugging
     * when viewing a trace.
     * </pre>
     *
     * <code>map&lt;string, string&gt; tags = 11;</code>
     */
    @java.lang.Override

    public java.lang.String getTagsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetTags().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearTags() {
      internalGetMutableTags().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * Tags give your span context for search, viewing and analysis.
     * For example, a key "your_app.version" would let you lookup traces by
     * version. A tag "sql.query" isn't searchable, but it can help in debugging
     * when viewing a trace.
     * </pre>
     *
     * <code>map&lt;string, string&gt; tags = 11;</code>
     */

    public Builder removeTags(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableTags().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String>
    getMutableTags() {
      return internalGetMutableTags().getMutableMap();
    }
    /**
     * <pre>
     * Tags give your span context for search, viewing and analysis.
     * For example, a key "your_app.version" would let you lookup traces by
     * version. A tag "sql.query" isn't searchable, but it can help in debugging
     * when viewing a trace.
     * </pre>
     *
     * <code>map&lt;string, string&gt; tags = 11;</code>
     */
    public Builder putTags(
        java.lang.String key,
        java.lang.String value) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      if (value == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableTags().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <pre>
     * Tags give your span context for search, viewing and analysis.
     * For example, a key "your_app.version" would let you lookup traces by
     * version. A tag "sql.query" isn't searchable, but it can help in debugging
     * when viewing a trace.
     * </pre>
     *
     * <code>map&lt;string, string&gt; tags = 11;</code>
     */

    public Builder putAllTags(
        java.util.Map<java.lang.String, java.lang.String> values) {
      internalGetMutableTags().getMutableMap()
          .putAll(values);
      return this;
    }

    private boolean debug_ ;
    /**
     * <pre>
     * True is a request to store this span even if it overrides sampling policy.
     * This is true when the "X-B3-Flags" header has a value of 1.
     * </pre>
     *
     * <code>bool debug = 12;</code>
     * @return The debug.
     */
    @java.lang.Override
    public boolean getDebug() {
      return debug_;
    }
    /**
     * <pre>
     * True is a request to store this span even if it overrides sampling policy.
     * This is true when the "X-B3-Flags" header has a value of 1.
     * </pre>
     *
     * <code>bool debug = 12;</code>
     * @param value The debug to set.
     * @return This builder for chaining.
     */
    public Builder setDebug(boolean value) {
      
      debug_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * True is a request to store this span even if it overrides sampling policy.
     * This is true when the "X-B3-Flags" header has a value of 1.
     * </pre>
     *
     * <code>bool debug = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearDebug() {
      
      debug_ = false;
      onChanged();
      return this;
    }

    private boolean shared_ ;
    /**
     * <pre>
     * True if we are contributing to a span started by another tracer (ex on a
     * different host).
     * </pre>
     *
     * <code>bool shared = 13;</code>
     * @return The shared.
     */
    @java.lang.Override
    public boolean getShared() {
      return shared_;
    }
    /**
     * <pre>
     * True if we are contributing to a span started by another tracer (ex on a
     * different host).
     * </pre>
     *
     * <code>bool shared = 13;</code>
     * @param value The shared to set.
     * @return This builder for chaining.
     */
    public Builder setShared(boolean value) {
      
      shared_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * True if we are contributing to a span started by another tracer (ex on a
     * different host).
     * </pre>
     *
     * <code>bool shared = 13;</code>
     * @return This builder for chaining.
     */
    public Builder clearShared() {
      
      shared_ = false;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:zipkin.proto3.Span)
  }

  // @@protoc_insertion_point(class_scope:zipkin.proto3.Span)
  private static final zipkin2.proto3.Span DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new zipkin2.proto3.Span();
  }

  public static zipkin2.proto3.Span getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Span>
      PARSER = new com.google.protobuf.AbstractParser<Span>() {
    @java.lang.Override
    public Span parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Span(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Span> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Span> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public zipkin2.proto3.Span getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

