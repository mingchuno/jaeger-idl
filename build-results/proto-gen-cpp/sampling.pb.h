// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sampling.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sampling_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sampling_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sampling_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sampling_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sampling_2eproto;
namespace jaeger {
namespace api_v2 {
class OperationSamplingStrategy;
class OperationSamplingStrategyDefaultTypeInternal;
extern OperationSamplingStrategyDefaultTypeInternal _OperationSamplingStrategy_default_instance_;
class PerOperationSamplingStrategies;
class PerOperationSamplingStrategiesDefaultTypeInternal;
extern PerOperationSamplingStrategiesDefaultTypeInternal _PerOperationSamplingStrategies_default_instance_;
class ProbabilisticSamplingStrategy;
class ProbabilisticSamplingStrategyDefaultTypeInternal;
extern ProbabilisticSamplingStrategyDefaultTypeInternal _ProbabilisticSamplingStrategy_default_instance_;
class RateLimitingSamplingStrategy;
class RateLimitingSamplingStrategyDefaultTypeInternal;
extern RateLimitingSamplingStrategyDefaultTypeInternal _RateLimitingSamplingStrategy_default_instance_;
class SamplingStrategyParameters;
class SamplingStrategyParametersDefaultTypeInternal;
extern SamplingStrategyParametersDefaultTypeInternal _SamplingStrategyParameters_default_instance_;
class SamplingStrategyResponse;
class SamplingStrategyResponseDefaultTypeInternal;
extern SamplingStrategyResponseDefaultTypeInternal _SamplingStrategyResponse_default_instance_;
}  // namespace api_v2
}  // namespace jaeger
PROTOBUF_NAMESPACE_OPEN
template<> ::jaeger::api_v2::OperationSamplingStrategy* Arena::CreateMaybeMessage<::jaeger::api_v2::OperationSamplingStrategy>(Arena*);
template<> ::jaeger::api_v2::PerOperationSamplingStrategies* Arena::CreateMaybeMessage<::jaeger::api_v2::PerOperationSamplingStrategies>(Arena*);
template<> ::jaeger::api_v2::ProbabilisticSamplingStrategy* Arena::CreateMaybeMessage<::jaeger::api_v2::ProbabilisticSamplingStrategy>(Arena*);
template<> ::jaeger::api_v2::RateLimitingSamplingStrategy* Arena::CreateMaybeMessage<::jaeger::api_v2::RateLimitingSamplingStrategy>(Arena*);
template<> ::jaeger::api_v2::SamplingStrategyParameters* Arena::CreateMaybeMessage<::jaeger::api_v2::SamplingStrategyParameters>(Arena*);
template<> ::jaeger::api_v2::SamplingStrategyResponse* Arena::CreateMaybeMessage<::jaeger::api_v2::SamplingStrategyResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace jaeger {
namespace api_v2 {

enum SamplingStrategyType : int {
  PROBABILISTIC = 0,
  RATE_LIMITING = 1,
  SamplingStrategyType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SamplingStrategyType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SamplingStrategyType_IsValid(int value);
constexpr SamplingStrategyType SamplingStrategyType_MIN = PROBABILISTIC;
constexpr SamplingStrategyType SamplingStrategyType_MAX = RATE_LIMITING;
constexpr int SamplingStrategyType_ARRAYSIZE = SamplingStrategyType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SamplingStrategyType_descriptor();
template<typename T>
inline const std::string& SamplingStrategyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SamplingStrategyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SamplingStrategyType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SamplingStrategyType_descriptor(), enum_t_value);
}
inline bool SamplingStrategyType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SamplingStrategyType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SamplingStrategyType>(
    SamplingStrategyType_descriptor(), name, value);
}
// ===================================================================

class ProbabilisticSamplingStrategy PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jaeger.api_v2.ProbabilisticSamplingStrategy) */ {
 public:
  inline ProbabilisticSamplingStrategy() : ProbabilisticSamplingStrategy(nullptr) {}
  virtual ~ProbabilisticSamplingStrategy();

  ProbabilisticSamplingStrategy(const ProbabilisticSamplingStrategy& from);
  ProbabilisticSamplingStrategy(ProbabilisticSamplingStrategy&& from) noexcept
    : ProbabilisticSamplingStrategy() {
    *this = ::std::move(from);
  }

  inline ProbabilisticSamplingStrategy& operator=(const ProbabilisticSamplingStrategy& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProbabilisticSamplingStrategy& operator=(ProbabilisticSamplingStrategy&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProbabilisticSamplingStrategy& default_instance();

  static inline const ProbabilisticSamplingStrategy* internal_default_instance() {
    return reinterpret_cast<const ProbabilisticSamplingStrategy*>(
               &_ProbabilisticSamplingStrategy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProbabilisticSamplingStrategy& a, ProbabilisticSamplingStrategy& b) {
    a.Swap(&b);
  }
  inline void Swap(ProbabilisticSamplingStrategy* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProbabilisticSamplingStrategy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProbabilisticSamplingStrategy* New() const final {
    return CreateMaybeMessage<ProbabilisticSamplingStrategy>(nullptr);
  }

  ProbabilisticSamplingStrategy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProbabilisticSamplingStrategy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProbabilisticSamplingStrategy& from);
  void MergeFrom(const ProbabilisticSamplingStrategy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProbabilisticSamplingStrategy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jaeger.api_v2.ProbabilisticSamplingStrategy";
  }
  protected:
  explicit ProbabilisticSamplingStrategy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sampling_2eproto);
    return ::descriptor_table_sampling_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSamplingRateFieldNumber = 1,
  };
  // double samplingRate = 1;
  void clear_samplingrate();
  double samplingrate() const;
  void set_samplingrate(double value);
  private:
  double _internal_samplingrate() const;
  void _internal_set_samplingrate(double value);
  public:

  // @@protoc_insertion_point(class_scope:jaeger.api_v2.ProbabilisticSamplingStrategy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double samplingrate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sampling_2eproto;
};
// -------------------------------------------------------------------

class RateLimitingSamplingStrategy PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jaeger.api_v2.RateLimitingSamplingStrategy) */ {
 public:
  inline RateLimitingSamplingStrategy() : RateLimitingSamplingStrategy(nullptr) {}
  virtual ~RateLimitingSamplingStrategy();

  RateLimitingSamplingStrategy(const RateLimitingSamplingStrategy& from);
  RateLimitingSamplingStrategy(RateLimitingSamplingStrategy&& from) noexcept
    : RateLimitingSamplingStrategy() {
    *this = ::std::move(from);
  }

  inline RateLimitingSamplingStrategy& operator=(const RateLimitingSamplingStrategy& from) {
    CopyFrom(from);
    return *this;
  }
  inline RateLimitingSamplingStrategy& operator=(RateLimitingSamplingStrategy&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RateLimitingSamplingStrategy& default_instance();

  static inline const RateLimitingSamplingStrategy* internal_default_instance() {
    return reinterpret_cast<const RateLimitingSamplingStrategy*>(
               &_RateLimitingSamplingStrategy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RateLimitingSamplingStrategy& a, RateLimitingSamplingStrategy& b) {
    a.Swap(&b);
  }
  inline void Swap(RateLimitingSamplingStrategy* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RateLimitingSamplingStrategy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RateLimitingSamplingStrategy* New() const final {
    return CreateMaybeMessage<RateLimitingSamplingStrategy>(nullptr);
  }

  RateLimitingSamplingStrategy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RateLimitingSamplingStrategy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RateLimitingSamplingStrategy& from);
  void MergeFrom(const RateLimitingSamplingStrategy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RateLimitingSamplingStrategy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jaeger.api_v2.RateLimitingSamplingStrategy";
  }
  protected:
  explicit RateLimitingSamplingStrategy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sampling_2eproto);
    return ::descriptor_table_sampling_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxTracesPerSecondFieldNumber = 1,
  };
  // int32 maxTracesPerSecond = 1;
  void clear_maxtracespersecond();
  ::PROTOBUF_NAMESPACE_ID::int32 maxtracespersecond() const;
  void set_maxtracespersecond(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxtracespersecond() const;
  void _internal_set_maxtracespersecond(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:jaeger.api_v2.RateLimitingSamplingStrategy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxtracespersecond_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sampling_2eproto;
};
// -------------------------------------------------------------------

class OperationSamplingStrategy PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jaeger.api_v2.OperationSamplingStrategy) */ {
 public:
  inline OperationSamplingStrategy() : OperationSamplingStrategy(nullptr) {}
  virtual ~OperationSamplingStrategy();

  OperationSamplingStrategy(const OperationSamplingStrategy& from);
  OperationSamplingStrategy(OperationSamplingStrategy&& from) noexcept
    : OperationSamplingStrategy() {
    *this = ::std::move(from);
  }

  inline OperationSamplingStrategy& operator=(const OperationSamplingStrategy& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationSamplingStrategy& operator=(OperationSamplingStrategy&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OperationSamplingStrategy& default_instance();

  static inline const OperationSamplingStrategy* internal_default_instance() {
    return reinterpret_cast<const OperationSamplingStrategy*>(
               &_OperationSamplingStrategy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OperationSamplingStrategy& a, OperationSamplingStrategy& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationSamplingStrategy* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationSamplingStrategy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperationSamplingStrategy* New() const final {
    return CreateMaybeMessage<OperationSamplingStrategy>(nullptr);
  }

  OperationSamplingStrategy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperationSamplingStrategy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OperationSamplingStrategy& from);
  void MergeFrom(const OperationSamplingStrategy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationSamplingStrategy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jaeger.api_v2.OperationSamplingStrategy";
  }
  protected:
  explicit OperationSamplingStrategy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sampling_2eproto);
    return ::descriptor_table_sampling_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationFieldNumber = 1,
    kProbabilisticSamplingFieldNumber = 2,
  };
  // string operation = 1;
  void clear_operation();
  const std::string& operation() const;
  void set_operation(const std::string& value);
  void set_operation(std::string&& value);
  void set_operation(const char* value);
  void set_operation(const char* value, size_t size);
  std::string* mutable_operation();
  std::string* release_operation();
  void set_allocated_operation(std::string* operation);
  private:
  const std::string& _internal_operation() const;
  void _internal_set_operation(const std::string& value);
  std::string* _internal_mutable_operation();
  public:

  // .jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;
  bool has_probabilisticsampling() const;
  private:
  bool _internal_has_probabilisticsampling() const;
  public:
  void clear_probabilisticsampling();
  const ::jaeger::api_v2::ProbabilisticSamplingStrategy& probabilisticsampling() const;
  ::jaeger::api_v2::ProbabilisticSamplingStrategy* release_probabilisticsampling();
  ::jaeger::api_v2::ProbabilisticSamplingStrategy* mutable_probabilisticsampling();
  void set_allocated_probabilisticsampling(::jaeger::api_v2::ProbabilisticSamplingStrategy* probabilisticsampling);
  private:
  const ::jaeger::api_v2::ProbabilisticSamplingStrategy& _internal_probabilisticsampling() const;
  ::jaeger::api_v2::ProbabilisticSamplingStrategy* _internal_mutable_probabilisticsampling();
  public:
  void unsafe_arena_set_allocated_probabilisticsampling(
      ::jaeger::api_v2::ProbabilisticSamplingStrategy* probabilisticsampling);
  ::jaeger::api_v2::ProbabilisticSamplingStrategy* unsafe_arena_release_probabilisticsampling();

  // @@protoc_insertion_point(class_scope:jaeger.api_v2.OperationSamplingStrategy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operation_;
  ::jaeger::api_v2::ProbabilisticSamplingStrategy* probabilisticsampling_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sampling_2eproto;
};
// -------------------------------------------------------------------

class PerOperationSamplingStrategies PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jaeger.api_v2.PerOperationSamplingStrategies) */ {
 public:
  inline PerOperationSamplingStrategies() : PerOperationSamplingStrategies(nullptr) {}
  virtual ~PerOperationSamplingStrategies();

  PerOperationSamplingStrategies(const PerOperationSamplingStrategies& from);
  PerOperationSamplingStrategies(PerOperationSamplingStrategies&& from) noexcept
    : PerOperationSamplingStrategies() {
    *this = ::std::move(from);
  }

  inline PerOperationSamplingStrategies& operator=(const PerOperationSamplingStrategies& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerOperationSamplingStrategies& operator=(PerOperationSamplingStrategies&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PerOperationSamplingStrategies& default_instance();

  static inline const PerOperationSamplingStrategies* internal_default_instance() {
    return reinterpret_cast<const PerOperationSamplingStrategies*>(
               &_PerOperationSamplingStrategies_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PerOperationSamplingStrategies& a, PerOperationSamplingStrategies& b) {
    a.Swap(&b);
  }
  inline void Swap(PerOperationSamplingStrategies* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerOperationSamplingStrategies* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerOperationSamplingStrategies* New() const final {
    return CreateMaybeMessage<PerOperationSamplingStrategies>(nullptr);
  }

  PerOperationSamplingStrategies* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerOperationSamplingStrategies>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PerOperationSamplingStrategies& from);
  void MergeFrom(const PerOperationSamplingStrategies& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerOperationSamplingStrategies* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jaeger.api_v2.PerOperationSamplingStrategies";
  }
  protected:
  explicit PerOperationSamplingStrategies(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sampling_2eproto);
    return ::descriptor_table_sampling_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPerOperationStrategiesFieldNumber = 3,
    kDefaultSamplingProbabilityFieldNumber = 1,
    kDefaultLowerBoundTracesPerSecondFieldNumber = 2,
    kDefaultUpperBoundTracesPerSecondFieldNumber = 4,
  };
  // repeated .jaeger.api_v2.OperationSamplingStrategy perOperationStrategies = 3;
  int peroperationstrategies_size() const;
  private:
  int _internal_peroperationstrategies_size() const;
  public:
  void clear_peroperationstrategies();
  ::jaeger::api_v2::OperationSamplingStrategy* mutable_peroperationstrategies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jaeger::api_v2::OperationSamplingStrategy >*
      mutable_peroperationstrategies();
  private:
  const ::jaeger::api_v2::OperationSamplingStrategy& _internal_peroperationstrategies(int index) const;
  ::jaeger::api_v2::OperationSamplingStrategy* _internal_add_peroperationstrategies();
  public:
  const ::jaeger::api_v2::OperationSamplingStrategy& peroperationstrategies(int index) const;
  ::jaeger::api_v2::OperationSamplingStrategy* add_peroperationstrategies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jaeger::api_v2::OperationSamplingStrategy >&
      peroperationstrategies() const;

  // double defaultSamplingProbability = 1;
  void clear_defaultsamplingprobability();
  double defaultsamplingprobability() const;
  void set_defaultsamplingprobability(double value);
  private:
  double _internal_defaultsamplingprobability() const;
  void _internal_set_defaultsamplingprobability(double value);
  public:

  // double defaultLowerBoundTracesPerSecond = 2;
  void clear_defaultlowerboundtracespersecond();
  double defaultlowerboundtracespersecond() const;
  void set_defaultlowerboundtracespersecond(double value);
  private:
  double _internal_defaultlowerboundtracespersecond() const;
  void _internal_set_defaultlowerboundtracespersecond(double value);
  public:

  // double defaultUpperBoundTracesPerSecond = 4;
  void clear_defaultupperboundtracespersecond();
  double defaultupperboundtracespersecond() const;
  void set_defaultupperboundtracespersecond(double value);
  private:
  double _internal_defaultupperboundtracespersecond() const;
  void _internal_set_defaultupperboundtracespersecond(double value);
  public:

  // @@protoc_insertion_point(class_scope:jaeger.api_v2.PerOperationSamplingStrategies)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jaeger::api_v2::OperationSamplingStrategy > peroperationstrategies_;
  double defaultsamplingprobability_;
  double defaultlowerboundtracespersecond_;
  double defaultupperboundtracespersecond_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sampling_2eproto;
};
// -------------------------------------------------------------------

class SamplingStrategyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jaeger.api_v2.SamplingStrategyResponse) */ {
 public:
  inline SamplingStrategyResponse() : SamplingStrategyResponse(nullptr) {}
  virtual ~SamplingStrategyResponse();

  SamplingStrategyResponse(const SamplingStrategyResponse& from);
  SamplingStrategyResponse(SamplingStrategyResponse&& from) noexcept
    : SamplingStrategyResponse() {
    *this = ::std::move(from);
  }

  inline SamplingStrategyResponse& operator=(const SamplingStrategyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SamplingStrategyResponse& operator=(SamplingStrategyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SamplingStrategyResponse& default_instance();

  static inline const SamplingStrategyResponse* internal_default_instance() {
    return reinterpret_cast<const SamplingStrategyResponse*>(
               &_SamplingStrategyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SamplingStrategyResponse& a, SamplingStrategyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SamplingStrategyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SamplingStrategyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SamplingStrategyResponse* New() const final {
    return CreateMaybeMessage<SamplingStrategyResponse>(nullptr);
  }

  SamplingStrategyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SamplingStrategyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SamplingStrategyResponse& from);
  void MergeFrom(const SamplingStrategyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SamplingStrategyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jaeger.api_v2.SamplingStrategyResponse";
  }
  protected:
  explicit SamplingStrategyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sampling_2eproto);
    return ::descriptor_table_sampling_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProbabilisticSamplingFieldNumber = 2,
    kRateLimitingSamplingFieldNumber = 3,
    kOperationSamplingFieldNumber = 4,
    kStrategyTypeFieldNumber = 1,
  };
  // .jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;
  bool has_probabilisticsampling() const;
  private:
  bool _internal_has_probabilisticsampling() const;
  public:
  void clear_probabilisticsampling();
  const ::jaeger::api_v2::ProbabilisticSamplingStrategy& probabilisticsampling() const;
  ::jaeger::api_v2::ProbabilisticSamplingStrategy* release_probabilisticsampling();
  ::jaeger::api_v2::ProbabilisticSamplingStrategy* mutable_probabilisticsampling();
  void set_allocated_probabilisticsampling(::jaeger::api_v2::ProbabilisticSamplingStrategy* probabilisticsampling);
  private:
  const ::jaeger::api_v2::ProbabilisticSamplingStrategy& _internal_probabilisticsampling() const;
  ::jaeger::api_v2::ProbabilisticSamplingStrategy* _internal_mutable_probabilisticsampling();
  public:
  void unsafe_arena_set_allocated_probabilisticsampling(
      ::jaeger::api_v2::ProbabilisticSamplingStrategy* probabilisticsampling);
  ::jaeger::api_v2::ProbabilisticSamplingStrategy* unsafe_arena_release_probabilisticsampling();

  // .jaeger.api_v2.RateLimitingSamplingStrategy rateLimitingSampling = 3;
  bool has_ratelimitingsampling() const;
  private:
  bool _internal_has_ratelimitingsampling() const;
  public:
  void clear_ratelimitingsampling();
  const ::jaeger::api_v2::RateLimitingSamplingStrategy& ratelimitingsampling() const;
  ::jaeger::api_v2::RateLimitingSamplingStrategy* release_ratelimitingsampling();
  ::jaeger::api_v2::RateLimitingSamplingStrategy* mutable_ratelimitingsampling();
  void set_allocated_ratelimitingsampling(::jaeger::api_v2::RateLimitingSamplingStrategy* ratelimitingsampling);
  private:
  const ::jaeger::api_v2::RateLimitingSamplingStrategy& _internal_ratelimitingsampling() const;
  ::jaeger::api_v2::RateLimitingSamplingStrategy* _internal_mutable_ratelimitingsampling();
  public:
  void unsafe_arena_set_allocated_ratelimitingsampling(
      ::jaeger::api_v2::RateLimitingSamplingStrategy* ratelimitingsampling);
  ::jaeger::api_v2::RateLimitingSamplingStrategy* unsafe_arena_release_ratelimitingsampling();

  // .jaeger.api_v2.PerOperationSamplingStrategies operationSampling = 4;
  bool has_operationsampling() const;
  private:
  bool _internal_has_operationsampling() const;
  public:
  void clear_operationsampling();
  const ::jaeger::api_v2::PerOperationSamplingStrategies& operationsampling() const;
  ::jaeger::api_v2::PerOperationSamplingStrategies* release_operationsampling();
  ::jaeger::api_v2::PerOperationSamplingStrategies* mutable_operationsampling();
  void set_allocated_operationsampling(::jaeger::api_v2::PerOperationSamplingStrategies* operationsampling);
  private:
  const ::jaeger::api_v2::PerOperationSamplingStrategies& _internal_operationsampling() const;
  ::jaeger::api_v2::PerOperationSamplingStrategies* _internal_mutable_operationsampling();
  public:
  void unsafe_arena_set_allocated_operationsampling(
      ::jaeger::api_v2::PerOperationSamplingStrategies* operationsampling);
  ::jaeger::api_v2::PerOperationSamplingStrategies* unsafe_arena_release_operationsampling();

  // .jaeger.api_v2.SamplingStrategyType strategyType = 1;
  void clear_strategytype();
  ::jaeger::api_v2::SamplingStrategyType strategytype() const;
  void set_strategytype(::jaeger::api_v2::SamplingStrategyType value);
  private:
  ::jaeger::api_v2::SamplingStrategyType _internal_strategytype() const;
  void _internal_set_strategytype(::jaeger::api_v2::SamplingStrategyType value);
  public:

  // @@protoc_insertion_point(class_scope:jaeger.api_v2.SamplingStrategyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::jaeger::api_v2::ProbabilisticSamplingStrategy* probabilisticsampling_;
  ::jaeger::api_v2::RateLimitingSamplingStrategy* ratelimitingsampling_;
  ::jaeger::api_v2::PerOperationSamplingStrategies* operationsampling_;
  int strategytype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sampling_2eproto;
};
// -------------------------------------------------------------------

class SamplingStrategyParameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jaeger.api_v2.SamplingStrategyParameters) */ {
 public:
  inline SamplingStrategyParameters() : SamplingStrategyParameters(nullptr) {}
  virtual ~SamplingStrategyParameters();

  SamplingStrategyParameters(const SamplingStrategyParameters& from);
  SamplingStrategyParameters(SamplingStrategyParameters&& from) noexcept
    : SamplingStrategyParameters() {
    *this = ::std::move(from);
  }

  inline SamplingStrategyParameters& operator=(const SamplingStrategyParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline SamplingStrategyParameters& operator=(SamplingStrategyParameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SamplingStrategyParameters& default_instance();

  static inline const SamplingStrategyParameters* internal_default_instance() {
    return reinterpret_cast<const SamplingStrategyParameters*>(
               &_SamplingStrategyParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SamplingStrategyParameters& a, SamplingStrategyParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(SamplingStrategyParameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SamplingStrategyParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SamplingStrategyParameters* New() const final {
    return CreateMaybeMessage<SamplingStrategyParameters>(nullptr);
  }

  SamplingStrategyParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SamplingStrategyParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SamplingStrategyParameters& from);
  void MergeFrom(const SamplingStrategyParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SamplingStrategyParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jaeger.api_v2.SamplingStrategyParameters";
  }
  protected:
  explicit SamplingStrategyParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sampling_2eproto);
    return ::descriptor_table_sampling_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
  };
  // string serviceName = 1;
  void clear_servicename();
  const std::string& servicename() const;
  void set_servicename(const std::string& value);
  void set_servicename(std::string&& value);
  void set_servicename(const char* value);
  void set_servicename(const char* value, size_t size);
  std::string* mutable_servicename();
  std::string* release_servicename();
  void set_allocated_servicename(std::string* servicename);
  private:
  const std::string& _internal_servicename() const;
  void _internal_set_servicename(const std::string& value);
  std::string* _internal_mutable_servicename();
  public:

  // @@protoc_insertion_point(class_scope:jaeger.api_v2.SamplingStrategyParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servicename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sampling_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProbabilisticSamplingStrategy

// double samplingRate = 1;
inline void ProbabilisticSamplingStrategy::clear_samplingrate() {
  samplingrate_ = 0;
}
inline double ProbabilisticSamplingStrategy::_internal_samplingrate() const {
  return samplingrate_;
}
inline double ProbabilisticSamplingStrategy::samplingrate() const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.ProbabilisticSamplingStrategy.samplingRate)
  return _internal_samplingrate();
}
inline void ProbabilisticSamplingStrategy::_internal_set_samplingrate(double value) {
  
  samplingrate_ = value;
}
inline void ProbabilisticSamplingStrategy::set_samplingrate(double value) {
  _internal_set_samplingrate(value);
  // @@protoc_insertion_point(field_set:jaeger.api_v2.ProbabilisticSamplingStrategy.samplingRate)
}

// -------------------------------------------------------------------

// RateLimitingSamplingStrategy

// int32 maxTracesPerSecond = 1;
inline void RateLimitingSamplingStrategy::clear_maxtracespersecond() {
  maxtracespersecond_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RateLimitingSamplingStrategy::_internal_maxtracespersecond() const {
  return maxtracespersecond_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RateLimitingSamplingStrategy::maxtracespersecond() const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.RateLimitingSamplingStrategy.maxTracesPerSecond)
  return _internal_maxtracespersecond();
}
inline void RateLimitingSamplingStrategy::_internal_set_maxtracespersecond(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxtracespersecond_ = value;
}
inline void RateLimitingSamplingStrategy::set_maxtracespersecond(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxtracespersecond(value);
  // @@protoc_insertion_point(field_set:jaeger.api_v2.RateLimitingSamplingStrategy.maxTracesPerSecond)
}

// -------------------------------------------------------------------

// OperationSamplingStrategy

// string operation = 1;
inline void OperationSamplingStrategy::clear_operation() {
  operation_.ClearToEmpty();
}
inline const std::string& OperationSamplingStrategy::operation() const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.OperationSamplingStrategy.operation)
  return _internal_operation();
}
inline void OperationSamplingStrategy::set_operation(const std::string& value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:jaeger.api_v2.OperationSamplingStrategy.operation)
}
inline std::string* OperationSamplingStrategy::mutable_operation() {
  // @@protoc_insertion_point(field_mutable:jaeger.api_v2.OperationSamplingStrategy.operation)
  return _internal_mutable_operation();
}
inline const std::string& OperationSamplingStrategy::_internal_operation() const {
  return operation_.Get();
}
inline void OperationSamplingStrategy::_internal_set_operation(const std::string& value) {
  
  operation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OperationSamplingStrategy::set_operation(std::string&& value) {
  
  operation_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jaeger.api_v2.OperationSamplingStrategy.operation)
}
inline void OperationSamplingStrategy::set_operation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  operation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:jaeger.api_v2.OperationSamplingStrategy.operation)
}
inline void OperationSamplingStrategy::set_operation(const char* value,
    size_t size) {
  
  operation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jaeger.api_v2.OperationSamplingStrategy.operation)
}
inline std::string* OperationSamplingStrategy::_internal_mutable_operation() {
  
  return operation_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OperationSamplingStrategy::release_operation() {
  // @@protoc_insertion_point(field_release:jaeger.api_v2.OperationSamplingStrategy.operation)
  return operation_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OperationSamplingStrategy::set_allocated_operation(std::string* operation) {
  if (operation != nullptr) {
    
  } else {
    
  }
  operation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operation,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jaeger.api_v2.OperationSamplingStrategy.operation)
}

// .jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;
inline bool OperationSamplingStrategy::_internal_has_probabilisticsampling() const {
  return this != internal_default_instance() && probabilisticsampling_ != nullptr;
}
inline bool OperationSamplingStrategy::has_probabilisticsampling() const {
  return _internal_has_probabilisticsampling();
}
inline void OperationSamplingStrategy::clear_probabilisticsampling() {
  if (GetArena() == nullptr && probabilisticsampling_ != nullptr) {
    delete probabilisticsampling_;
  }
  probabilisticsampling_ = nullptr;
}
inline const ::jaeger::api_v2::ProbabilisticSamplingStrategy& OperationSamplingStrategy::_internal_probabilisticsampling() const {
  const ::jaeger::api_v2::ProbabilisticSamplingStrategy* p = probabilisticsampling_;
  return p != nullptr ? *p : reinterpret_cast<const ::jaeger::api_v2::ProbabilisticSamplingStrategy&>(
      ::jaeger::api_v2::_ProbabilisticSamplingStrategy_default_instance_);
}
inline const ::jaeger::api_v2::ProbabilisticSamplingStrategy& OperationSamplingStrategy::probabilisticsampling() const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.OperationSamplingStrategy.probabilisticSampling)
  return _internal_probabilisticsampling();
}
inline void OperationSamplingStrategy::unsafe_arena_set_allocated_probabilisticsampling(
    ::jaeger::api_v2::ProbabilisticSamplingStrategy* probabilisticsampling) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(probabilisticsampling_);
  }
  probabilisticsampling_ = probabilisticsampling;
  if (probabilisticsampling) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jaeger.api_v2.OperationSamplingStrategy.probabilisticSampling)
}
inline ::jaeger::api_v2::ProbabilisticSamplingStrategy* OperationSamplingStrategy::release_probabilisticsampling() {
  
  ::jaeger::api_v2::ProbabilisticSamplingStrategy* temp = probabilisticsampling_;
  probabilisticsampling_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::jaeger::api_v2::ProbabilisticSamplingStrategy* OperationSamplingStrategy::unsafe_arena_release_probabilisticsampling() {
  // @@protoc_insertion_point(field_release:jaeger.api_v2.OperationSamplingStrategy.probabilisticSampling)
  
  ::jaeger::api_v2::ProbabilisticSamplingStrategy* temp = probabilisticsampling_;
  probabilisticsampling_ = nullptr;
  return temp;
}
inline ::jaeger::api_v2::ProbabilisticSamplingStrategy* OperationSamplingStrategy::_internal_mutable_probabilisticsampling() {
  
  if (probabilisticsampling_ == nullptr) {
    auto* p = CreateMaybeMessage<::jaeger::api_v2::ProbabilisticSamplingStrategy>(GetArena());
    probabilisticsampling_ = p;
  }
  return probabilisticsampling_;
}
inline ::jaeger::api_v2::ProbabilisticSamplingStrategy* OperationSamplingStrategy::mutable_probabilisticsampling() {
  // @@protoc_insertion_point(field_mutable:jaeger.api_v2.OperationSamplingStrategy.probabilisticSampling)
  return _internal_mutable_probabilisticsampling();
}
inline void OperationSamplingStrategy::set_allocated_probabilisticsampling(::jaeger::api_v2::ProbabilisticSamplingStrategy* probabilisticsampling) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete probabilisticsampling_;
  }
  if (probabilisticsampling) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(probabilisticsampling);
    if (message_arena != submessage_arena) {
      probabilisticsampling = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, probabilisticsampling, submessage_arena);
    }
    
  } else {
    
  }
  probabilisticsampling_ = probabilisticsampling;
  // @@protoc_insertion_point(field_set_allocated:jaeger.api_v2.OperationSamplingStrategy.probabilisticSampling)
}

// -------------------------------------------------------------------

// PerOperationSamplingStrategies

// double defaultSamplingProbability = 1;
inline void PerOperationSamplingStrategies::clear_defaultsamplingprobability() {
  defaultsamplingprobability_ = 0;
}
inline double PerOperationSamplingStrategies::_internal_defaultsamplingprobability() const {
  return defaultsamplingprobability_;
}
inline double PerOperationSamplingStrategies::defaultsamplingprobability() const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.PerOperationSamplingStrategies.defaultSamplingProbability)
  return _internal_defaultsamplingprobability();
}
inline void PerOperationSamplingStrategies::_internal_set_defaultsamplingprobability(double value) {
  
  defaultsamplingprobability_ = value;
}
inline void PerOperationSamplingStrategies::set_defaultsamplingprobability(double value) {
  _internal_set_defaultsamplingprobability(value);
  // @@protoc_insertion_point(field_set:jaeger.api_v2.PerOperationSamplingStrategies.defaultSamplingProbability)
}

// double defaultLowerBoundTracesPerSecond = 2;
inline void PerOperationSamplingStrategies::clear_defaultlowerboundtracespersecond() {
  defaultlowerboundtracespersecond_ = 0;
}
inline double PerOperationSamplingStrategies::_internal_defaultlowerboundtracespersecond() const {
  return defaultlowerboundtracespersecond_;
}
inline double PerOperationSamplingStrategies::defaultlowerboundtracespersecond() const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.PerOperationSamplingStrategies.defaultLowerBoundTracesPerSecond)
  return _internal_defaultlowerboundtracespersecond();
}
inline void PerOperationSamplingStrategies::_internal_set_defaultlowerboundtracespersecond(double value) {
  
  defaultlowerboundtracespersecond_ = value;
}
inline void PerOperationSamplingStrategies::set_defaultlowerboundtracespersecond(double value) {
  _internal_set_defaultlowerboundtracespersecond(value);
  // @@protoc_insertion_point(field_set:jaeger.api_v2.PerOperationSamplingStrategies.defaultLowerBoundTracesPerSecond)
}

// repeated .jaeger.api_v2.OperationSamplingStrategy perOperationStrategies = 3;
inline int PerOperationSamplingStrategies::_internal_peroperationstrategies_size() const {
  return peroperationstrategies_.size();
}
inline int PerOperationSamplingStrategies::peroperationstrategies_size() const {
  return _internal_peroperationstrategies_size();
}
inline void PerOperationSamplingStrategies::clear_peroperationstrategies() {
  peroperationstrategies_.Clear();
}
inline ::jaeger::api_v2::OperationSamplingStrategy* PerOperationSamplingStrategies::mutable_peroperationstrategies(int index) {
  // @@protoc_insertion_point(field_mutable:jaeger.api_v2.PerOperationSamplingStrategies.perOperationStrategies)
  return peroperationstrategies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jaeger::api_v2::OperationSamplingStrategy >*
PerOperationSamplingStrategies::mutable_peroperationstrategies() {
  // @@protoc_insertion_point(field_mutable_list:jaeger.api_v2.PerOperationSamplingStrategies.perOperationStrategies)
  return &peroperationstrategies_;
}
inline const ::jaeger::api_v2::OperationSamplingStrategy& PerOperationSamplingStrategies::_internal_peroperationstrategies(int index) const {
  return peroperationstrategies_.Get(index);
}
inline const ::jaeger::api_v2::OperationSamplingStrategy& PerOperationSamplingStrategies::peroperationstrategies(int index) const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.PerOperationSamplingStrategies.perOperationStrategies)
  return _internal_peroperationstrategies(index);
}
inline ::jaeger::api_v2::OperationSamplingStrategy* PerOperationSamplingStrategies::_internal_add_peroperationstrategies() {
  return peroperationstrategies_.Add();
}
inline ::jaeger::api_v2::OperationSamplingStrategy* PerOperationSamplingStrategies::add_peroperationstrategies() {
  // @@protoc_insertion_point(field_add:jaeger.api_v2.PerOperationSamplingStrategies.perOperationStrategies)
  return _internal_add_peroperationstrategies();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jaeger::api_v2::OperationSamplingStrategy >&
PerOperationSamplingStrategies::peroperationstrategies() const {
  // @@protoc_insertion_point(field_list:jaeger.api_v2.PerOperationSamplingStrategies.perOperationStrategies)
  return peroperationstrategies_;
}

// double defaultUpperBoundTracesPerSecond = 4;
inline void PerOperationSamplingStrategies::clear_defaultupperboundtracespersecond() {
  defaultupperboundtracespersecond_ = 0;
}
inline double PerOperationSamplingStrategies::_internal_defaultupperboundtracespersecond() const {
  return defaultupperboundtracespersecond_;
}
inline double PerOperationSamplingStrategies::defaultupperboundtracespersecond() const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.PerOperationSamplingStrategies.defaultUpperBoundTracesPerSecond)
  return _internal_defaultupperboundtracespersecond();
}
inline void PerOperationSamplingStrategies::_internal_set_defaultupperboundtracespersecond(double value) {
  
  defaultupperboundtracespersecond_ = value;
}
inline void PerOperationSamplingStrategies::set_defaultupperboundtracespersecond(double value) {
  _internal_set_defaultupperboundtracespersecond(value);
  // @@protoc_insertion_point(field_set:jaeger.api_v2.PerOperationSamplingStrategies.defaultUpperBoundTracesPerSecond)
}

// -------------------------------------------------------------------

// SamplingStrategyResponse

// .jaeger.api_v2.SamplingStrategyType strategyType = 1;
inline void SamplingStrategyResponse::clear_strategytype() {
  strategytype_ = 0;
}
inline ::jaeger::api_v2::SamplingStrategyType SamplingStrategyResponse::_internal_strategytype() const {
  return static_cast< ::jaeger::api_v2::SamplingStrategyType >(strategytype_);
}
inline ::jaeger::api_v2::SamplingStrategyType SamplingStrategyResponse::strategytype() const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.SamplingStrategyResponse.strategyType)
  return _internal_strategytype();
}
inline void SamplingStrategyResponse::_internal_set_strategytype(::jaeger::api_v2::SamplingStrategyType value) {
  
  strategytype_ = value;
}
inline void SamplingStrategyResponse::set_strategytype(::jaeger::api_v2::SamplingStrategyType value) {
  _internal_set_strategytype(value);
  // @@protoc_insertion_point(field_set:jaeger.api_v2.SamplingStrategyResponse.strategyType)
}

// .jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;
inline bool SamplingStrategyResponse::_internal_has_probabilisticsampling() const {
  return this != internal_default_instance() && probabilisticsampling_ != nullptr;
}
inline bool SamplingStrategyResponse::has_probabilisticsampling() const {
  return _internal_has_probabilisticsampling();
}
inline void SamplingStrategyResponse::clear_probabilisticsampling() {
  if (GetArena() == nullptr && probabilisticsampling_ != nullptr) {
    delete probabilisticsampling_;
  }
  probabilisticsampling_ = nullptr;
}
inline const ::jaeger::api_v2::ProbabilisticSamplingStrategy& SamplingStrategyResponse::_internal_probabilisticsampling() const {
  const ::jaeger::api_v2::ProbabilisticSamplingStrategy* p = probabilisticsampling_;
  return p != nullptr ? *p : reinterpret_cast<const ::jaeger::api_v2::ProbabilisticSamplingStrategy&>(
      ::jaeger::api_v2::_ProbabilisticSamplingStrategy_default_instance_);
}
inline const ::jaeger::api_v2::ProbabilisticSamplingStrategy& SamplingStrategyResponse::probabilisticsampling() const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.SamplingStrategyResponse.probabilisticSampling)
  return _internal_probabilisticsampling();
}
inline void SamplingStrategyResponse::unsafe_arena_set_allocated_probabilisticsampling(
    ::jaeger::api_v2::ProbabilisticSamplingStrategy* probabilisticsampling) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(probabilisticsampling_);
  }
  probabilisticsampling_ = probabilisticsampling;
  if (probabilisticsampling) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jaeger.api_v2.SamplingStrategyResponse.probabilisticSampling)
}
inline ::jaeger::api_v2::ProbabilisticSamplingStrategy* SamplingStrategyResponse::release_probabilisticsampling() {
  
  ::jaeger::api_v2::ProbabilisticSamplingStrategy* temp = probabilisticsampling_;
  probabilisticsampling_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::jaeger::api_v2::ProbabilisticSamplingStrategy* SamplingStrategyResponse::unsafe_arena_release_probabilisticsampling() {
  // @@protoc_insertion_point(field_release:jaeger.api_v2.SamplingStrategyResponse.probabilisticSampling)
  
  ::jaeger::api_v2::ProbabilisticSamplingStrategy* temp = probabilisticsampling_;
  probabilisticsampling_ = nullptr;
  return temp;
}
inline ::jaeger::api_v2::ProbabilisticSamplingStrategy* SamplingStrategyResponse::_internal_mutable_probabilisticsampling() {
  
  if (probabilisticsampling_ == nullptr) {
    auto* p = CreateMaybeMessage<::jaeger::api_v2::ProbabilisticSamplingStrategy>(GetArena());
    probabilisticsampling_ = p;
  }
  return probabilisticsampling_;
}
inline ::jaeger::api_v2::ProbabilisticSamplingStrategy* SamplingStrategyResponse::mutable_probabilisticsampling() {
  // @@protoc_insertion_point(field_mutable:jaeger.api_v2.SamplingStrategyResponse.probabilisticSampling)
  return _internal_mutable_probabilisticsampling();
}
inline void SamplingStrategyResponse::set_allocated_probabilisticsampling(::jaeger::api_v2::ProbabilisticSamplingStrategy* probabilisticsampling) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete probabilisticsampling_;
  }
  if (probabilisticsampling) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(probabilisticsampling);
    if (message_arena != submessage_arena) {
      probabilisticsampling = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, probabilisticsampling, submessage_arena);
    }
    
  } else {
    
  }
  probabilisticsampling_ = probabilisticsampling;
  // @@protoc_insertion_point(field_set_allocated:jaeger.api_v2.SamplingStrategyResponse.probabilisticSampling)
}

// .jaeger.api_v2.RateLimitingSamplingStrategy rateLimitingSampling = 3;
inline bool SamplingStrategyResponse::_internal_has_ratelimitingsampling() const {
  return this != internal_default_instance() && ratelimitingsampling_ != nullptr;
}
inline bool SamplingStrategyResponse::has_ratelimitingsampling() const {
  return _internal_has_ratelimitingsampling();
}
inline void SamplingStrategyResponse::clear_ratelimitingsampling() {
  if (GetArena() == nullptr && ratelimitingsampling_ != nullptr) {
    delete ratelimitingsampling_;
  }
  ratelimitingsampling_ = nullptr;
}
inline const ::jaeger::api_v2::RateLimitingSamplingStrategy& SamplingStrategyResponse::_internal_ratelimitingsampling() const {
  const ::jaeger::api_v2::RateLimitingSamplingStrategy* p = ratelimitingsampling_;
  return p != nullptr ? *p : reinterpret_cast<const ::jaeger::api_v2::RateLimitingSamplingStrategy&>(
      ::jaeger::api_v2::_RateLimitingSamplingStrategy_default_instance_);
}
inline const ::jaeger::api_v2::RateLimitingSamplingStrategy& SamplingStrategyResponse::ratelimitingsampling() const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.SamplingStrategyResponse.rateLimitingSampling)
  return _internal_ratelimitingsampling();
}
inline void SamplingStrategyResponse::unsafe_arena_set_allocated_ratelimitingsampling(
    ::jaeger::api_v2::RateLimitingSamplingStrategy* ratelimitingsampling) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ratelimitingsampling_);
  }
  ratelimitingsampling_ = ratelimitingsampling;
  if (ratelimitingsampling) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jaeger.api_v2.SamplingStrategyResponse.rateLimitingSampling)
}
inline ::jaeger::api_v2::RateLimitingSamplingStrategy* SamplingStrategyResponse::release_ratelimitingsampling() {
  
  ::jaeger::api_v2::RateLimitingSamplingStrategy* temp = ratelimitingsampling_;
  ratelimitingsampling_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::jaeger::api_v2::RateLimitingSamplingStrategy* SamplingStrategyResponse::unsafe_arena_release_ratelimitingsampling() {
  // @@protoc_insertion_point(field_release:jaeger.api_v2.SamplingStrategyResponse.rateLimitingSampling)
  
  ::jaeger::api_v2::RateLimitingSamplingStrategy* temp = ratelimitingsampling_;
  ratelimitingsampling_ = nullptr;
  return temp;
}
inline ::jaeger::api_v2::RateLimitingSamplingStrategy* SamplingStrategyResponse::_internal_mutable_ratelimitingsampling() {
  
  if (ratelimitingsampling_ == nullptr) {
    auto* p = CreateMaybeMessage<::jaeger::api_v2::RateLimitingSamplingStrategy>(GetArena());
    ratelimitingsampling_ = p;
  }
  return ratelimitingsampling_;
}
inline ::jaeger::api_v2::RateLimitingSamplingStrategy* SamplingStrategyResponse::mutable_ratelimitingsampling() {
  // @@protoc_insertion_point(field_mutable:jaeger.api_v2.SamplingStrategyResponse.rateLimitingSampling)
  return _internal_mutable_ratelimitingsampling();
}
inline void SamplingStrategyResponse::set_allocated_ratelimitingsampling(::jaeger::api_v2::RateLimitingSamplingStrategy* ratelimitingsampling) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ratelimitingsampling_;
  }
  if (ratelimitingsampling) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ratelimitingsampling);
    if (message_arena != submessage_arena) {
      ratelimitingsampling = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ratelimitingsampling, submessage_arena);
    }
    
  } else {
    
  }
  ratelimitingsampling_ = ratelimitingsampling;
  // @@protoc_insertion_point(field_set_allocated:jaeger.api_v2.SamplingStrategyResponse.rateLimitingSampling)
}

// .jaeger.api_v2.PerOperationSamplingStrategies operationSampling = 4;
inline bool SamplingStrategyResponse::_internal_has_operationsampling() const {
  return this != internal_default_instance() && operationsampling_ != nullptr;
}
inline bool SamplingStrategyResponse::has_operationsampling() const {
  return _internal_has_operationsampling();
}
inline void SamplingStrategyResponse::clear_operationsampling() {
  if (GetArena() == nullptr && operationsampling_ != nullptr) {
    delete operationsampling_;
  }
  operationsampling_ = nullptr;
}
inline const ::jaeger::api_v2::PerOperationSamplingStrategies& SamplingStrategyResponse::_internal_operationsampling() const {
  const ::jaeger::api_v2::PerOperationSamplingStrategies* p = operationsampling_;
  return p != nullptr ? *p : reinterpret_cast<const ::jaeger::api_v2::PerOperationSamplingStrategies&>(
      ::jaeger::api_v2::_PerOperationSamplingStrategies_default_instance_);
}
inline const ::jaeger::api_v2::PerOperationSamplingStrategies& SamplingStrategyResponse::operationsampling() const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.SamplingStrategyResponse.operationSampling)
  return _internal_operationsampling();
}
inline void SamplingStrategyResponse::unsafe_arena_set_allocated_operationsampling(
    ::jaeger::api_v2::PerOperationSamplingStrategies* operationsampling) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(operationsampling_);
  }
  operationsampling_ = operationsampling;
  if (operationsampling) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jaeger.api_v2.SamplingStrategyResponse.operationSampling)
}
inline ::jaeger::api_v2::PerOperationSamplingStrategies* SamplingStrategyResponse::release_operationsampling() {
  
  ::jaeger::api_v2::PerOperationSamplingStrategies* temp = operationsampling_;
  operationsampling_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::jaeger::api_v2::PerOperationSamplingStrategies* SamplingStrategyResponse::unsafe_arena_release_operationsampling() {
  // @@protoc_insertion_point(field_release:jaeger.api_v2.SamplingStrategyResponse.operationSampling)
  
  ::jaeger::api_v2::PerOperationSamplingStrategies* temp = operationsampling_;
  operationsampling_ = nullptr;
  return temp;
}
inline ::jaeger::api_v2::PerOperationSamplingStrategies* SamplingStrategyResponse::_internal_mutable_operationsampling() {
  
  if (operationsampling_ == nullptr) {
    auto* p = CreateMaybeMessage<::jaeger::api_v2::PerOperationSamplingStrategies>(GetArena());
    operationsampling_ = p;
  }
  return operationsampling_;
}
inline ::jaeger::api_v2::PerOperationSamplingStrategies* SamplingStrategyResponse::mutable_operationsampling() {
  // @@protoc_insertion_point(field_mutable:jaeger.api_v2.SamplingStrategyResponse.operationSampling)
  return _internal_mutable_operationsampling();
}
inline void SamplingStrategyResponse::set_allocated_operationsampling(::jaeger::api_v2::PerOperationSamplingStrategies* operationsampling) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete operationsampling_;
  }
  if (operationsampling) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(operationsampling);
    if (message_arena != submessage_arena) {
      operationsampling = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, operationsampling, submessage_arena);
    }
    
  } else {
    
  }
  operationsampling_ = operationsampling;
  // @@protoc_insertion_point(field_set_allocated:jaeger.api_v2.SamplingStrategyResponse.operationSampling)
}

// -------------------------------------------------------------------

// SamplingStrategyParameters

// string serviceName = 1;
inline void SamplingStrategyParameters::clear_servicename() {
  servicename_.ClearToEmpty();
}
inline const std::string& SamplingStrategyParameters::servicename() const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.SamplingStrategyParameters.serviceName)
  return _internal_servicename();
}
inline void SamplingStrategyParameters::set_servicename(const std::string& value) {
  _internal_set_servicename(value);
  // @@protoc_insertion_point(field_set:jaeger.api_v2.SamplingStrategyParameters.serviceName)
}
inline std::string* SamplingStrategyParameters::mutable_servicename() {
  // @@protoc_insertion_point(field_mutable:jaeger.api_v2.SamplingStrategyParameters.serviceName)
  return _internal_mutable_servicename();
}
inline const std::string& SamplingStrategyParameters::_internal_servicename() const {
  return servicename_.Get();
}
inline void SamplingStrategyParameters::_internal_set_servicename(const std::string& value) {
  
  servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SamplingStrategyParameters::set_servicename(std::string&& value) {
  
  servicename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jaeger.api_v2.SamplingStrategyParameters.serviceName)
}
inline void SamplingStrategyParameters::set_servicename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:jaeger.api_v2.SamplingStrategyParameters.serviceName)
}
inline void SamplingStrategyParameters::set_servicename(const char* value,
    size_t size) {
  
  servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jaeger.api_v2.SamplingStrategyParameters.serviceName)
}
inline std::string* SamplingStrategyParameters::_internal_mutable_servicename() {
  
  return servicename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SamplingStrategyParameters::release_servicename() {
  // @@protoc_insertion_point(field_release:jaeger.api_v2.SamplingStrategyParameters.serviceName)
  return servicename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SamplingStrategyParameters::set_allocated_servicename(std::string* servicename) {
  if (servicename != nullptr) {
    
  } else {
    
  }
  servicename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servicename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jaeger.api_v2.SamplingStrategyParameters.serviceName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api_v2
}  // namespace jaeger

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::jaeger::api_v2::SamplingStrategyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jaeger::api_v2::SamplingStrategyType>() {
  return ::jaeger::api_v2::SamplingStrategyType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sampling_2eproto
