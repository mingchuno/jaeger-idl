// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto

#include "model.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyValue_model_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Log_model_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Process_model_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Span_model_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpanRef_model_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trace_ProcessMapping_model_2eproto;
namespace jaeger {
namespace api_v2 {
class KeyValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyValue> _instance;
} _KeyValue_default_instance_;
class LogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Log> _instance;
} _Log_default_instance_;
class SpanRefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpanRef> _instance;
} _SpanRef_default_instance_;
class ProcessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Process> _instance;
} _Process_default_instance_;
class SpanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Span> _instance;
} _Span_default_instance_;
class Trace_ProcessMappingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trace_ProcessMapping> _instance;
} _Trace_ProcessMapping_default_instance_;
class TraceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trace> _instance;
} _Trace_default_instance_;
class BatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Batch> _instance;
} _Batch_default_instance_;
class DependencyLinkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DependencyLink> _instance;
} _DependencyLink_default_instance_;
}  // namespace api_v2
}  // namespace jaeger
static void InitDefaultsscc_info_Batch_model_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jaeger::api_v2::_Batch_default_instance_;
    new (ptr) ::jaeger::api_v2::Batch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Batch_model_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Batch_model_2eproto}, {
      &scc_info_Span_model_2eproto.base,
      &scc_info_Process_model_2eproto.base,}};

static void InitDefaultsscc_info_DependencyLink_model_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jaeger::api_v2::_DependencyLink_default_instance_;
    new (ptr) ::jaeger::api_v2::DependencyLink();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DependencyLink_model_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DependencyLink_model_2eproto}, {}};

static void InitDefaultsscc_info_KeyValue_model_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jaeger::api_v2::_KeyValue_default_instance_;
    new (ptr) ::jaeger::api_v2::KeyValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyValue_model_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KeyValue_model_2eproto}, {}};

static void InitDefaultsscc_info_Log_model_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jaeger::api_v2::_Log_default_instance_;
    new (ptr) ::jaeger::api_v2::Log();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Log_model_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Log_model_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_KeyValue_model_2eproto.base,}};

static void InitDefaultsscc_info_Process_model_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jaeger::api_v2::_Process_default_instance_;
    new (ptr) ::jaeger::api_v2::Process();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Process_model_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Process_model_2eproto}, {
      &scc_info_KeyValue_model_2eproto.base,}};

static void InitDefaultsscc_info_Span_model_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jaeger::api_v2::_Span_default_instance_;
    new (ptr) ::jaeger::api_v2::Span();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Span_model_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_Span_model_2eproto}, {
      &scc_info_SpanRef_model_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,
      &scc_info_KeyValue_model_2eproto.base,
      &scc_info_Log_model_2eproto.base,
      &scc_info_Process_model_2eproto.base,}};

static void InitDefaultsscc_info_SpanRef_model_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jaeger::api_v2::_SpanRef_default_instance_;
    new (ptr) ::jaeger::api_v2::SpanRef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpanRef_model_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpanRef_model_2eproto}, {}};

static void InitDefaultsscc_info_Trace_model_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jaeger::api_v2::_Trace_default_instance_;
    new (ptr) ::jaeger::api_v2::Trace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Trace_model_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Trace_model_2eproto}, {
      &scc_info_Span_model_2eproto.base,
      &scc_info_Trace_ProcessMapping_model_2eproto.base,}};

static void InitDefaultsscc_info_Trace_ProcessMapping_model_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jaeger::api_v2::_Trace_ProcessMapping_default_instance_;
    new (ptr) ::jaeger::api_v2::Trace_ProcessMapping();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trace_ProcessMapping_model_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Trace_ProcessMapping_model_2eproto}, {
      &scc_info_Process_model_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_model_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_model_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_model_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_model_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::KeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::KeyValue, key_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::KeyValue, v_type_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::KeyValue, v_str_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::KeyValue, v_bool_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::KeyValue, v_int64_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::KeyValue, v_float64_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::KeyValue, v_binary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::Log, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::Log, timestamp_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::Log, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::SpanRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::SpanRef, trace_id_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::SpanRef, span_id_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::SpanRef, ref_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::Process, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::Process, service_name_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::Process, tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::Span, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::Span, trace_id_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::Span, span_id_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::Span, operation_name_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::Span, references_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::Span, flags_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::Span, start_time_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::Span, duration_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::Span, tags_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::Span, logs_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::Span, process_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::Span, process_id_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::Span, warnings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::Trace_ProcessMapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::Trace_ProcessMapping, process_id_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::Trace_ProcessMapping, process_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::Trace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::Trace, spans_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::Trace, process_map_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::Trace, warnings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::Batch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::Batch, spans_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::Batch, process_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::DependencyLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::DependencyLink, parent_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::DependencyLink, child_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::DependencyLink, call_count_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::DependencyLink, source_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::jaeger::api_v2::KeyValue)},
  { 12, -1, sizeof(::jaeger::api_v2::Log)},
  { 19, -1, sizeof(::jaeger::api_v2::SpanRef)},
  { 27, -1, sizeof(::jaeger::api_v2::Process)},
  { 34, -1, sizeof(::jaeger::api_v2::Span)},
  { 51, -1, sizeof(::jaeger::api_v2::Trace_ProcessMapping)},
  { 58, -1, sizeof(::jaeger::api_v2::Trace)},
  { 66, -1, sizeof(::jaeger::api_v2::Batch)},
  { 73, -1, sizeof(::jaeger::api_v2::DependencyLink)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jaeger::api_v2::_KeyValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jaeger::api_v2::_Log_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jaeger::api_v2::_SpanRef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jaeger::api_v2::_Process_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jaeger::api_v2::_Span_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jaeger::api_v2::_Trace_ProcessMapping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jaeger::api_v2::_Trace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jaeger::api_v2::_Batch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jaeger::api_v2::_DependencyLink_default_instance_),
};

const char descriptor_table_protodef_model_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013model.proto\022\rjaeger.api_v2\032\024gogoproto/"
  "gogo.proto\032\037google/protobuf/timestamp.pr"
  "oto\032\036google/protobuf/duration.proto\"\240\001\n\010"
  "KeyValue\022\013\n\003key\030\001 \001(\t\022(\n\006v_type\030\002 \001(\0162\030."
  "jaeger.api_v2.ValueType\022\r\n\005v_str\030\003 \001(\t\022\016"
  "\n\006v_bool\030\004 \001(\010\022\017\n\007v_int64\030\005 \001(\003\022\021\n\tv_flo"
  "at64\030\006 \001(\001\022\020\n\010v_binary\030\007 \001(\014:\010\350\240\037\001\350\241\037\001\"m"
  "\n\003Log\0227\n\ttimestamp\030\001 \001(\0132\032.google.protob"
  "uf.TimestampB\010\220\337\037\001\310\336\037\000\022-\n\006fields\030\002 \003(\0132\027"
  ".jaeger.api_v2.KeyValueB\004\310\336\037\000\"\220\001\n\007SpanRe"
  "f\022,\n\010trace_id\030\001 \001(\014B\032\310\336\037\000\332\336\037\007TraceID\342\336\037\007"
  "TraceID\022)\n\007span_id\030\002 \001(\014B\030\310\336\037\000\332\336\037\006SpanID"
  "\342\336\037\006SpanID\022,\n\010ref_type\030\003 \001(\0162\032.jaeger.ap"
  "i_v2.SpanRefType\"L\n\007Process\022\024\n\014service_n"
  "ame\030\001 \001(\t\022+\n\004tags\030\002 \003(\0132\027.jaeger.api_v2."
  "KeyValueB\004\310\336\037\000\"\353\003\n\004Span\022,\n\010trace_id\030\001 \001("
  "\014B\032\310\336\037\000\332\336\037\007TraceID\342\336\037\007TraceID\022)\n\007span_id"
  "\030\002 \001(\014B\030\310\336\037\000\332\336\037\006SpanID\342\336\037\006SpanID\022\026\n\016oper"
  "ation_name\030\003 \001(\t\0220\n\nreferences\030\004 \003(\0132\026.j"
  "aeger.api_v2.SpanRefB\004\310\336\037\000\022\034\n\005flags\030\005 \001("
  "\rB\r\310\336\037\000\332\336\037\005Flags\0228\n\nstart_time\030\006 \001(\0132\032.g"
  "oogle.protobuf.TimestampB\010\220\337\037\001\310\336\037\000\0225\n\010du"
  "ration\030\007 \001(\0132\031.google.protobuf.DurationB"
  "\010\230\337\037\001\310\336\037\000\022+\n\004tags\030\010 \003(\0132\027.jaeger.api_v2."
  "KeyValueB\004\310\336\037\000\022&\n\004logs\030\t \003(\0132\022.jaeger.ap"
  "i_v2.LogB\004\310\336\037\000\022\'\n\007process\030\n \001(\0132\026.jaeger"
  ".api_v2.Process\022!\n\nprocess_id\030\013 \001(\tB\r\342\336\037"
  "\tProcessID\022\020\n\010warnings\030\014 \003(\t\"\341\001\n\005Trace\022\""
  "\n\005spans\030\001 \003(\0132\023.jaeger.api_v2.Span\022>\n\013pr"
  "ocess_map\030\002 \003(\0132#.jaeger.api_v2.Trace.Pr"
  "ocessMappingB\004\310\336\037\000\022\020\n\010warnings\030\003 \003(\t\032b\n\016"
  "ProcessMapping\022!\n\nprocess_id\030\001 \001(\tB\r\342\336\037\t"
  "ProcessID\022-\n\007process\030\002 \001(\0132\026.jaeger.api_"
  "v2.ProcessB\004\310\336\037\000\"Z\n\005Batch\022\"\n\005spans\030\001 \003(\013"
  "2\023.jaeger.api_v2.Span\022-\n\007process\030\002 \001(\0132\026"
  ".jaeger.api_v2.ProcessB\004\310\336\037\001\"S\n\016Dependen"
  "cyLink\022\016\n\006parent\030\001 \001(\t\022\r\n\005child\030\002 \001(\t\022\022\n"
  "\ncall_count\030\003 \001(\004\022\016\n\006source\030\004 \001(\t*E\n\tVal"
  "ueType\022\n\n\006STRING\020\000\022\010\n\004BOOL\020\001\022\t\n\005INT64\020\002\022"
  "\013\n\007FLOAT64\020\003\022\n\n\006BINARY\020\004*-\n\013SpanRefType\022"
  "\014\n\010CHILD_OF\020\000\022\020\n\014FOLLOWS_FROM\020\001B,\n\027io.ja"
  "egertracing.api_v2Z\005model\310\342\036\001\320\342\036\001\340\342\036\001b\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_model_2eproto_deps[3] = {
  &::descriptor_table_gogoproto_2fgogo_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_model_2eproto_sccs[9] = {
  &scc_info_Batch_model_2eproto.base,
  &scc_info_DependencyLink_model_2eproto.base,
  &scc_info_KeyValue_model_2eproto.base,
  &scc_info_Log_model_2eproto.base,
  &scc_info_Process_model_2eproto.base,
  &scc_info_Span_model_2eproto.base,
  &scc_info_SpanRef_model_2eproto.base,
  &scc_info_Trace_model_2eproto.base,
  &scc_info_Trace_ProcessMapping_model_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_model_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_model_2eproto = {
  false, false, descriptor_table_protodef_model_2eproto, "model.proto", 1685,
  &descriptor_table_model_2eproto_once, descriptor_table_model_2eproto_sccs, descriptor_table_model_2eproto_deps, 9, 3,
  schemas, file_default_instances, TableStruct_model_2eproto::offsets,
  file_level_metadata_model_2eproto, 9, file_level_enum_descriptors_model_2eproto, file_level_service_descriptors_model_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_model_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_model_2eproto)), true);
namespace jaeger {
namespace api_v2 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ValueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_model_2eproto);
  return file_level_enum_descriptors_model_2eproto[0];
}
bool ValueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpanRefType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_model_2eproto);
  return file_level_enum_descriptors_model_2eproto[1];
}
bool SpanRefType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class KeyValue::_Internal {
 public:
};

KeyValue::KeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jaeger.api_v2.KeyValue)
}
KeyValue::KeyValue(const KeyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  v_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_v_str().empty()) {
    v_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_v_str(), 
      GetArena());
  }
  v_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_v_binary().empty()) {
    v_binary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_v_binary(), 
      GetArena());
  }
  ::memcpy(&v_type_, &from.v_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&v_float64_) -
    reinterpret_cast<char*>(&v_type_)) + sizeof(v_float64_));
  // @@protoc_insertion_point(copy_constructor:jaeger.api_v2.KeyValue)
}

void KeyValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyValue_model_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  v_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  v_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&v_type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&v_float64_) -
      reinterpret_cast<char*>(&v_type_)) + sizeof(v_float64_));
}

KeyValue::~KeyValue() {
  // @@protoc_insertion_point(destructor:jaeger.api_v2.KeyValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  v_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  v_binary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KeyValue::ArenaDtor(void* object) {
  KeyValue* _this = reinterpret_cast< KeyValue* >(object);
  (void)_this;
}
void KeyValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyValue& KeyValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyValue_model_2eproto.base);
  return *internal_default_instance();
}


void KeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:jaeger.api_v2.KeyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  v_str_.ClearToEmpty();
  v_binary_.ClearToEmpty();
  ::memset(&v_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v_float64_) -
      reinterpret_cast<char*>(&v_type_)) + sizeof(v_float64_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jaeger.api_v2.KeyValue.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .jaeger.api_v2.ValueType v_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_v_type(static_cast<::jaeger::api_v2::ValueType>(val));
        } else goto handle_unusual;
        continue;
      // string v_str = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_v_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jaeger.api_v2.KeyValue.v_str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool v_bool = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          v_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 v_int64 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          v_int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double v_float64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          v_float64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bytes v_binary = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_v_binary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jaeger.api_v2.KeyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jaeger.api_v2.KeyValue.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // .jaeger.api_v2.ValueType v_type = 2;
  if (this->v_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_v_type(), target);
  }

  // string v_str = 3;
  if (this->v_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_v_str().data(), static_cast<int>(this->_internal_v_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jaeger.api_v2.KeyValue.v_str");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_v_str(), target);
  }

  // bool v_bool = 4;
  if (this->v_bool() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_v_bool(), target);
  }

  // int64 v_int64 = 5;
  if (this->v_int64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_v_int64(), target);
  }

  // double v_float64 = 6;
  if (!(this->v_float64() <= 0 && this->v_float64() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_v_float64(), target);
  }

  // bytes v_binary = 7;
  if (this->v_binary().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_v_binary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jaeger.api_v2.KeyValue)
  return target;
}

size_t KeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jaeger.api_v2.KeyValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string v_str = 3;
  if (this->v_str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_v_str());
  }

  // bytes v_binary = 7;
  if (this->v_binary().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_v_binary());
  }

  // .jaeger.api_v2.ValueType v_type = 2;
  if (this->v_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_v_type());
  }

  // bool v_bool = 4;
  if (this->v_bool() != 0) {
    total_size += 1 + 1;
  }

  // int64 v_int64 = 5;
  if (this->v_int64() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_v_int64());
  }

  // double v_float64 = 6;
  if (!(this->v_float64() <= 0 && this->v_float64() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jaeger.api_v2.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jaeger.api_v2.KeyValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jaeger.api_v2.KeyValue)
    MergeFrom(*source);
  }
}

void KeyValue::MergeFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jaeger.api_v2.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.v_str().size() > 0) {
    _internal_set_v_str(from._internal_v_str());
  }
  if (from.v_binary().size() > 0) {
    _internal_set_v_binary(from._internal_v_binary());
  }
  if (from.v_type() != 0) {
    _internal_set_v_type(from._internal_v_type());
  }
  if (from.v_bool() != 0) {
    _internal_set_v_bool(from._internal_v_bool());
  }
  if (from.v_int64() != 0) {
    _internal_set_v_int64(from._internal_v_int64());
  }
  if (!(from.v_float64() <= 0 && from.v_float64() >= 0)) {
    _internal_set_v_float64(from._internal_v_float64());
  }
}

void KeyValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jaeger.api_v2.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValue::CopyFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jaeger.api_v2.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValue::IsInitialized() const {
  return true;
}

void KeyValue::InternalSwap(KeyValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  v_str_.Swap(&other->v_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  v_binary_.Swap(&other->v_binary_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeyValue, v_float64_)
      + sizeof(KeyValue::v_float64_)
      - PROTOBUF_FIELD_OFFSET(KeyValue, v_type_)>(
          reinterpret_cast<char*>(&v_type_),
          reinterpret_cast<char*>(&other->v_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Log::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Log* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Log::_Internal::timestamp(const Log* msg) {
  return *msg->timestamp_;
}
void Log::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
Log::Log(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fields_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jaeger.api_v2.Log)
}
Log::Log(const Log& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:jaeger.api_v2.Log)
}

void Log::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Log_model_2eproto.base);
  timestamp_ = nullptr;
}

Log::~Log() {
  // @@protoc_insertion_point(destructor:jaeger.api_v2.Log)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Log::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
}

void Log::ArenaDtor(void* object) {
  Log* _this = reinterpret_cast< Log* >(object);
  (void)_this;
}
void Log::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Log::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Log& Log::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Log_model_2eproto.base);
  return *internal_default_instance();
}


void Log::Clear() {
// @@protoc_insertion_point(message_clear_start:jaeger.api_v2.Log)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Log::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .jaeger.api_v2.KeyValue fields = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Log::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jaeger.api_v2.Log)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::timestamp(this), target, stream);
  }

  // repeated .jaeger.api_v2.KeyValue fields = 2 [(.gogoproto.nullable) = false];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_fields(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jaeger.api_v2.Log)
  return target;
}

size_t Log::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jaeger.api_v2.Log)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .jaeger.api_v2.KeyValue fields = 2 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp timestamp = 1 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Log::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jaeger.api_v2.Log)
  GOOGLE_DCHECK_NE(&from, this);
  const Log* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Log>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jaeger.api_v2.Log)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jaeger.api_v2.Log)
    MergeFrom(*source);
  }
}

void Log::MergeFrom(const Log& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jaeger.api_v2.Log)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
}

void Log::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jaeger.api_v2.Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Log::CopyFrom(const Log& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jaeger.api_v2.Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Log::IsInitialized() const {
  return true;
}

void Log::InternalSwap(Log* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Log::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SpanRef::_Internal {
 public:
};

SpanRef::SpanRef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jaeger.api_v2.SpanRef)
}
SpanRef::SpanRef(const SpanRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trace_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trace_id().empty()) {
    trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_trace_id(), 
      GetArena());
  }
  span_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_span_id().empty()) {
    span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_span_id(), 
      GetArena());
  }
  ref_type_ = from.ref_type_;
  // @@protoc_insertion_point(copy_constructor:jaeger.api_v2.SpanRef)
}

void SpanRef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpanRef_model_2eproto.base);
  trace_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  span_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ref_type_ = 0;
}

SpanRef::~SpanRef() {
  // @@protoc_insertion_point(destructor:jaeger.api_v2.SpanRef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpanRef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  trace_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  span_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SpanRef::ArenaDtor(void* object) {
  SpanRef* _this = reinterpret_cast< SpanRef* >(object);
  (void)_this;
}
void SpanRef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpanRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpanRef& SpanRef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpanRef_model_2eproto.base);
  return *internal_default_instance();
}


void SpanRef::Clear() {
// @@protoc_insertion_point(message_clear_start:jaeger.api_v2.SpanRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trace_id_.ClearToEmpty();
  span_id_.ClearToEmpty();
  ref_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpanRef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes trace_id = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "TraceID", (.gogoproto.customname) = "TraceID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_trace_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes span_id = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "SpanID", (.gogoproto.customname) = "SpanID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_span_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .jaeger.api_v2.SpanRefType ref_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ref_type(static_cast<::jaeger::api_v2::SpanRefType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpanRef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jaeger.api_v2.SpanRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes trace_id = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "TraceID", (.gogoproto.customname) = "TraceID"];
  if (this->trace_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_trace_id(), target);
  }

  // bytes span_id = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "SpanID", (.gogoproto.customname) = "SpanID"];
  if (this->span_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_span_id(), target);
  }

  // .jaeger.api_v2.SpanRefType ref_type = 3;
  if (this->ref_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_ref_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jaeger.api_v2.SpanRef)
  return target;
}

size_t SpanRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jaeger.api_v2.SpanRef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes trace_id = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "TraceID", (.gogoproto.customname) = "TraceID"];
  if (this->trace_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_trace_id());
  }

  // bytes span_id = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "SpanID", (.gogoproto.customname) = "SpanID"];
  if (this->span_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_span_id());
  }

  // .jaeger.api_v2.SpanRefType ref_type = 3;
  if (this->ref_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ref_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpanRef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jaeger.api_v2.SpanRef)
  GOOGLE_DCHECK_NE(&from, this);
  const SpanRef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpanRef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jaeger.api_v2.SpanRef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jaeger.api_v2.SpanRef)
    MergeFrom(*source);
  }
}

void SpanRef::MergeFrom(const SpanRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jaeger.api_v2.SpanRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trace_id().size() > 0) {
    _internal_set_trace_id(from._internal_trace_id());
  }
  if (from.span_id().size() > 0) {
    _internal_set_span_id(from._internal_span_id());
  }
  if (from.ref_type() != 0) {
    _internal_set_ref_type(from._internal_ref_type());
  }
}

void SpanRef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jaeger.api_v2.SpanRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpanRef::CopyFrom(const SpanRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jaeger.api_v2.SpanRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpanRef::IsInitialized() const {
  return true;
}

void SpanRef::InternalSwap(SpanRef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trace_id_.Swap(&other->trace_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  span_id_.Swap(&other->span_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ref_type_, other->ref_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpanRef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Process::_Internal {
 public:
};

Process::Process(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jaeger.api_v2.Process)
}
Process::Process(const Process& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_name().empty()) {
    service_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_service_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:jaeger.api_v2.Process)
}

void Process::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Process_model_2eproto.base);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Process::~Process() {
  // @@protoc_insertion_point(destructor:jaeger.api_v2.Process)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Process::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Process::ArenaDtor(void* object) {
  Process* _this = reinterpret_cast< Process* >(object);
  (void)_this;
}
void Process::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Process::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Process& Process::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Process_model_2eproto.base);
  return *internal_default_instance();
}


void Process::Clear() {
// @@protoc_insertion_point(message_clear_start:jaeger.api_v2.Process)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  service_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Process::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jaeger.api_v2.Process.service_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .jaeger.api_v2.KeyValue tags = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Process::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jaeger.api_v2.Process)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jaeger.api_v2.Process.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // repeated .jaeger.api_v2.KeyValue tags = 2 [(.gogoproto.nullable) = false];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tags(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jaeger.api_v2.Process)
  return target;
}

size_t Process::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jaeger.api_v2.Process)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .jaeger.api_v2.KeyValue tags = 2 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_tags_size();
  for (const auto& msg : this->tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Process::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jaeger.api_v2.Process)
  GOOGLE_DCHECK_NE(&from, this);
  const Process* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Process>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jaeger.api_v2.Process)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jaeger.api_v2.Process)
    MergeFrom(*source);
  }
}

void Process::MergeFrom(const Process& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jaeger.api_v2.Process)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from.service_name().size() > 0) {
    _internal_set_service_name(from._internal_service_name());
  }
}

void Process::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jaeger.api_v2.Process)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Process::CopyFrom(const Process& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jaeger.api_v2.Process)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Process::IsInitialized() const {
  return true;
}

void Process::InternalSwap(Process* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Process::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Span::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const Span* msg);
  static const PROTOBUF_NAMESPACE_ID::Duration& duration(const Span* msg);
  static const ::jaeger::api_v2::Process& process(const Span* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Span::_Internal::start_time(const Span* msg) {
  return *msg->start_time_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
Span::_Internal::duration(const Span* msg) {
  return *msg->duration_;
}
const ::jaeger::api_v2::Process&
Span::_Internal::process(const Span* msg) {
  return *msg->process_;
}
void Span::clear_start_time() {
  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
void Span::clear_duration() {
  if (GetArena() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
}
Span::Span(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  references_(arena),
  tags_(arena),
  logs_(arena),
  warnings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jaeger.api_v2.Span)
}
Span::Span(const Span& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      references_(from.references_),
      tags_(from.tags_),
      logs_(from.logs_),
      warnings_(from.warnings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trace_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trace_id().empty()) {
    trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_trace_id(), 
      GetArena());
  }
  span_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_span_id().empty()) {
    span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_span_id(), 
      GetArena());
  }
  operation_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operation_name().empty()) {
    operation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_operation_name(), 
      GetArena());
  }
  process_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_process_id().empty()) {
    process_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_process_id(), 
      GetArena());
  }
  if (from._internal_has_start_time()) {
    start_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from._internal_has_duration()) {
    duration_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.duration_);
  } else {
    duration_ = nullptr;
  }
  if (from._internal_has_process()) {
    process_ = new ::jaeger::api_v2::Process(*from.process_);
  } else {
    process_ = nullptr;
  }
  flags_ = from.flags_;
  // @@protoc_insertion_point(copy_constructor:jaeger.api_v2.Span)
}

void Span::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Span_model_2eproto.base);
  trace_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  span_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operation_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  process_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&start_time_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(flags_));
}

Span::~Span() {
  // @@protoc_insertion_point(destructor:jaeger.api_v2.Span)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Span::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  trace_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  span_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operation_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  process_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete duration_;
  if (this != internal_default_instance()) delete process_;
}

void Span::ArenaDtor(void* object) {
  Span* _this = reinterpret_cast< Span* >(object);
  (void)_this;
}
void Span::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Span::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Span& Span::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Span_model_2eproto.base);
  return *internal_default_instance();
}


void Span::Clear() {
// @@protoc_insertion_point(message_clear_start:jaeger.api_v2.Span)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  references_.Clear();
  tags_.Clear();
  logs_.Clear();
  warnings_.Clear();
  trace_id_.ClearToEmpty();
  span_id_.ClearToEmpty();
  operation_name_.ClearToEmpty();
  process_id_.ClearToEmpty();
  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArena() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
  if (GetArena() == nullptr && process_ != nullptr) {
    delete process_;
  }
  process_ = nullptr;
  flags_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Span::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes trace_id = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "TraceID", (.gogoproto.customname) = "TraceID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_trace_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes span_id = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "SpanID", (.gogoproto.customname) = "SpanID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_span_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string operation_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_operation_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jaeger.api_v2.Span.operation_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .jaeger.api_v2.SpanRef references = 4 [(.gogoproto.nullable) = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_references(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 flags = 5 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "Flags"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_time = 6 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration duration = 7 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .jaeger.api_v2.KeyValue tags = 8 [(.gogoproto.nullable) = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .jaeger.api_v2.Log logs = 9 [(.gogoproto.nullable) = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // .jaeger.api_v2.Process process = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_process(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string process_id = 11 [(.gogoproto.customname) = "ProcessID"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_process_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jaeger.api_v2.Span.process_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string warnings = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_warnings();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jaeger.api_v2.Span.warnings"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Span::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jaeger.api_v2.Span)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes trace_id = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "TraceID", (.gogoproto.customname) = "TraceID"];
  if (this->trace_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_trace_id(), target);
  }

  // bytes span_id = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "SpanID", (.gogoproto.customname) = "SpanID"];
  if (this->span_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_span_id(), target);
  }

  // string operation_name = 3;
  if (this->operation_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operation_name().data(), static_cast<int>(this->_internal_operation_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jaeger.api_v2.Span.operation_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_operation_name(), target);
  }

  // repeated .jaeger.api_v2.SpanRef references = 4 [(.gogoproto.nullable) = false];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_references_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_references(i), target, stream);
  }

  // uint32 flags = 5 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "Flags"];
  if (this->flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_flags(), target);
  }

  // .google.protobuf.Timestamp start_time = 6 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->has_start_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::start_time(this), target, stream);
  }

  // .google.protobuf.Duration duration = 7 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  if (this->has_duration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::duration(this), target, stream);
  }

  // repeated .jaeger.api_v2.KeyValue tags = 8 [(.gogoproto.nullable) = false];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_tags(i), target, stream);
  }

  // repeated .jaeger.api_v2.Log logs = 9 [(.gogoproto.nullable) = false];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_logs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_logs(i), target, stream);
  }

  // .jaeger.api_v2.Process process = 10;
  if (this->has_process()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::process(this), target, stream);
  }

  // string process_id = 11 [(.gogoproto.customname) = "ProcessID"];
  if (this->process_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_process_id().data(), static_cast<int>(this->_internal_process_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jaeger.api_v2.Span.process_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_process_id(), target);
  }

  // repeated string warnings = 12;
  for (int i = 0, n = this->_internal_warnings_size(); i < n; i++) {
    const auto& s = this->_internal_warnings(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jaeger.api_v2.Span.warnings");
    target = stream->WriteString(12, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jaeger.api_v2.Span)
  return target;
}

size_t Span::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jaeger.api_v2.Span)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .jaeger.api_v2.SpanRef references = 4 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_references_size();
  for (const auto& msg : this->references_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .jaeger.api_v2.KeyValue tags = 8 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_tags_size();
  for (const auto& msg : this->tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .jaeger.api_v2.Log logs = 9 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_logs_size();
  for (const auto& msg : this->logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string warnings = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(warnings_.size());
  for (int i = 0, n = warnings_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      warnings_.Get(i));
  }

  // bytes trace_id = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "TraceID", (.gogoproto.customname) = "TraceID"];
  if (this->trace_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_trace_id());
  }

  // bytes span_id = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "SpanID", (.gogoproto.customname) = "SpanID"];
  if (this->span_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_span_id());
  }

  // string operation_name = 3;
  if (this->operation_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operation_name());
  }

  // string process_id = 11 [(.gogoproto.customname) = "ProcessID"];
  if (this->process_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_process_id());
  }

  // .google.protobuf.Timestamp start_time = 6 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Duration duration = 7 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  if (this->has_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *duration_);
  }

  // .jaeger.api_v2.Process process = 10;
  if (this->has_process()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *process_);
  }

  // uint32 flags = 5 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "Flags"];
  if (this->flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flags());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Span::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jaeger.api_v2.Span)
  GOOGLE_DCHECK_NE(&from, this);
  const Span* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Span>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jaeger.api_v2.Span)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jaeger.api_v2.Span)
    MergeFrom(*source);
  }
}

void Span::MergeFrom(const Span& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jaeger.api_v2.Span)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  references_.MergeFrom(from.references_);
  tags_.MergeFrom(from.tags_);
  logs_.MergeFrom(from.logs_);
  warnings_.MergeFrom(from.warnings_);
  if (from.trace_id().size() > 0) {
    _internal_set_trace_id(from._internal_trace_id());
  }
  if (from.span_id().size() > 0) {
    _internal_set_span_id(from._internal_span_id());
  }
  if (from.operation_name().size() > 0) {
    _internal_set_operation_name(from._internal_operation_name());
  }
  if (from.process_id().size() > 0) {
    _internal_set_process_id(from._internal_process_id());
  }
  if (from.has_start_time()) {
    _internal_mutable_start_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_time());
  }
  if (from.has_duration()) {
    _internal_mutable_duration()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_duration());
  }
  if (from.has_process()) {
    _internal_mutable_process()->::jaeger::api_v2::Process::MergeFrom(from._internal_process());
  }
  if (from.flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
}

void Span::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jaeger.api_v2.Span)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span::CopyFrom(const Span& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jaeger.api_v2.Span)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span::IsInitialized() const {
  return true;
}

void Span::InternalSwap(Span* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  references_.InternalSwap(&other->references_);
  tags_.InternalSwap(&other->tags_);
  logs_.InternalSwap(&other->logs_);
  warnings_.InternalSwap(&other->warnings_);
  trace_id_.Swap(&other->trace_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  span_id_.Swap(&other->span_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  operation_name_.Swap(&other->operation_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  process_id_.Swap(&other->process_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Span, flags_)
      + sizeof(Span::flags_)
      - PROTOBUF_FIELD_OFFSET(Span, start_time_)>(
          reinterpret_cast<char*>(&start_time_),
          reinterpret_cast<char*>(&other->start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Span::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Trace_ProcessMapping::_Internal {
 public:
  static const ::jaeger::api_v2::Process& process(const Trace_ProcessMapping* msg);
};

const ::jaeger::api_v2::Process&
Trace_ProcessMapping::_Internal::process(const Trace_ProcessMapping* msg) {
  return *msg->process_;
}
Trace_ProcessMapping::Trace_ProcessMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jaeger.api_v2.Trace.ProcessMapping)
}
Trace_ProcessMapping::Trace_ProcessMapping(const Trace_ProcessMapping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  process_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_process_id().empty()) {
    process_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_process_id(), 
      GetArena());
  }
  if (from._internal_has_process()) {
    process_ = new ::jaeger::api_v2::Process(*from.process_);
  } else {
    process_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:jaeger.api_v2.Trace.ProcessMapping)
}

void Trace_ProcessMapping::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Trace_ProcessMapping_model_2eproto.base);
  process_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  process_ = nullptr;
}

Trace_ProcessMapping::~Trace_ProcessMapping() {
  // @@protoc_insertion_point(destructor:jaeger.api_v2.Trace.ProcessMapping)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Trace_ProcessMapping::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  process_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete process_;
}

void Trace_ProcessMapping::ArenaDtor(void* object) {
  Trace_ProcessMapping* _this = reinterpret_cast< Trace_ProcessMapping* >(object);
  (void)_this;
}
void Trace_ProcessMapping::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Trace_ProcessMapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trace_ProcessMapping& Trace_ProcessMapping::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trace_ProcessMapping_model_2eproto.base);
  return *internal_default_instance();
}


void Trace_ProcessMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:jaeger.api_v2.Trace.ProcessMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  process_id_.ClearToEmpty();
  if (GetArena() == nullptr && process_ != nullptr) {
    delete process_;
  }
  process_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trace_ProcessMapping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string process_id = 1 [(.gogoproto.customname) = "ProcessID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_process_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jaeger.api_v2.Trace.ProcessMapping.process_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .jaeger.api_v2.Process process = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_process(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trace_ProcessMapping::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jaeger.api_v2.Trace.ProcessMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string process_id = 1 [(.gogoproto.customname) = "ProcessID"];
  if (this->process_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_process_id().data(), static_cast<int>(this->_internal_process_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jaeger.api_v2.Trace.ProcessMapping.process_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_process_id(), target);
  }

  // .jaeger.api_v2.Process process = 2 [(.gogoproto.nullable) = false];
  if (this->has_process()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::process(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jaeger.api_v2.Trace.ProcessMapping)
  return target;
}

size_t Trace_ProcessMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jaeger.api_v2.Trace.ProcessMapping)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string process_id = 1 [(.gogoproto.customname) = "ProcessID"];
  if (this->process_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_process_id());
  }

  // .jaeger.api_v2.Process process = 2 [(.gogoproto.nullable) = false];
  if (this->has_process()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *process_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trace_ProcessMapping::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jaeger.api_v2.Trace.ProcessMapping)
  GOOGLE_DCHECK_NE(&from, this);
  const Trace_ProcessMapping* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trace_ProcessMapping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jaeger.api_v2.Trace.ProcessMapping)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jaeger.api_v2.Trace.ProcessMapping)
    MergeFrom(*source);
  }
}

void Trace_ProcessMapping::MergeFrom(const Trace_ProcessMapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jaeger.api_v2.Trace.ProcessMapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.process_id().size() > 0) {
    _internal_set_process_id(from._internal_process_id());
  }
  if (from.has_process()) {
    _internal_mutable_process()->::jaeger::api_v2::Process::MergeFrom(from._internal_process());
  }
}

void Trace_ProcessMapping::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jaeger.api_v2.Trace.ProcessMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trace_ProcessMapping::CopyFrom(const Trace_ProcessMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jaeger.api_v2.Trace.ProcessMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trace_ProcessMapping::IsInitialized() const {
  return true;
}

void Trace_ProcessMapping::InternalSwap(Trace_ProcessMapping* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  process_id_.Swap(&other->process_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(process_, other->process_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Trace_ProcessMapping::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Trace::_Internal {
 public:
};

Trace::Trace(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  spans_(arena),
  process_map_(arena),
  warnings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jaeger.api_v2.Trace)
}
Trace::Trace(const Trace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      spans_(from.spans_),
      process_map_(from.process_map_),
      warnings_(from.warnings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jaeger.api_v2.Trace)
}

void Trace::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Trace_model_2eproto.base);
}

Trace::~Trace() {
  // @@protoc_insertion_point(destructor:jaeger.api_v2.Trace)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Trace::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Trace::ArenaDtor(void* object) {
  Trace* _this = reinterpret_cast< Trace* >(object);
  (void)_this;
}
void Trace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Trace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trace& Trace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trace_model_2eproto.base);
  return *internal_default_instance();
}


void Trace::Clear() {
// @@protoc_insertion_point(message_clear_start:jaeger.api_v2.Trace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spans_.Clear();
  process_map_.Clear();
  warnings_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .jaeger.api_v2.Span spans = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_spans(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .jaeger.api_v2.Trace.ProcessMapping process_map = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_process_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string warnings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_warnings();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jaeger.api_v2.Trace.warnings"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jaeger.api_v2.Trace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jaeger.api_v2.Span spans = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_spans_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_spans(i), target, stream);
  }

  // repeated .jaeger.api_v2.Trace.ProcessMapping process_map = 2 [(.gogoproto.nullable) = false];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_process_map_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_process_map(i), target, stream);
  }

  // repeated string warnings = 3;
  for (int i = 0, n = this->_internal_warnings_size(); i < n; i++) {
    const auto& s = this->_internal_warnings(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jaeger.api_v2.Trace.warnings");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jaeger.api_v2.Trace)
  return target;
}

size_t Trace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jaeger.api_v2.Trace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .jaeger.api_v2.Span spans = 1;
  total_size += 1UL * this->_internal_spans_size();
  for (const auto& msg : this->spans_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .jaeger.api_v2.Trace.ProcessMapping process_map = 2 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_process_map_size();
  for (const auto& msg : this->process_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string warnings = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(warnings_.size());
  for (int i = 0, n = warnings_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      warnings_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jaeger.api_v2.Trace)
  GOOGLE_DCHECK_NE(&from, this);
  const Trace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jaeger.api_v2.Trace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jaeger.api_v2.Trace)
    MergeFrom(*source);
  }
}

void Trace::MergeFrom(const Trace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jaeger.api_v2.Trace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spans_.MergeFrom(from.spans_);
  process_map_.MergeFrom(from.process_map_);
  warnings_.MergeFrom(from.warnings_);
}

void Trace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jaeger.api_v2.Trace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trace::CopyFrom(const Trace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jaeger.api_v2.Trace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trace::IsInitialized() const {
  return true;
}

void Trace::InternalSwap(Trace* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  spans_.InternalSwap(&other->spans_);
  process_map_.InternalSwap(&other->process_map_);
  warnings_.InternalSwap(&other->warnings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Trace::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Batch::_Internal {
 public:
  static const ::jaeger::api_v2::Process& process(const Batch* msg);
};

const ::jaeger::api_v2::Process&
Batch::_Internal::process(const Batch* msg) {
  return *msg->process_;
}
Batch::Batch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  spans_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jaeger.api_v2.Batch)
}
Batch::Batch(const Batch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      spans_(from.spans_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_process()) {
    process_ = new ::jaeger::api_v2::Process(*from.process_);
  } else {
    process_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:jaeger.api_v2.Batch)
}

void Batch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Batch_model_2eproto.base);
  process_ = nullptr;
}

Batch::~Batch() {
  // @@protoc_insertion_point(destructor:jaeger.api_v2.Batch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Batch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete process_;
}

void Batch::ArenaDtor(void* object) {
  Batch* _this = reinterpret_cast< Batch* >(object);
  (void)_this;
}
void Batch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Batch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Batch& Batch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Batch_model_2eproto.base);
  return *internal_default_instance();
}


void Batch::Clear() {
// @@protoc_insertion_point(message_clear_start:jaeger.api_v2.Batch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spans_.Clear();
  if (GetArena() == nullptr && process_ != nullptr) {
    delete process_;
  }
  process_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Batch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .jaeger.api_v2.Span spans = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_spans(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .jaeger.api_v2.Process process = 2 [(.gogoproto.nullable) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_process(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Batch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jaeger.api_v2.Batch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jaeger.api_v2.Span spans = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_spans_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_spans(i), target, stream);
  }

  // .jaeger.api_v2.Process process = 2 [(.gogoproto.nullable) = true];
  if (this->has_process()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::process(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jaeger.api_v2.Batch)
  return target;
}

size_t Batch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jaeger.api_v2.Batch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .jaeger.api_v2.Span spans = 1;
  total_size += 1UL * this->_internal_spans_size();
  for (const auto& msg : this->spans_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .jaeger.api_v2.Process process = 2 [(.gogoproto.nullable) = true];
  if (this->has_process()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *process_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Batch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jaeger.api_v2.Batch)
  GOOGLE_DCHECK_NE(&from, this);
  const Batch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Batch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jaeger.api_v2.Batch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jaeger.api_v2.Batch)
    MergeFrom(*source);
  }
}

void Batch::MergeFrom(const Batch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jaeger.api_v2.Batch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spans_.MergeFrom(from.spans_);
  if (from.has_process()) {
    _internal_mutable_process()->::jaeger::api_v2::Process::MergeFrom(from._internal_process());
  }
}

void Batch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jaeger.api_v2.Batch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Batch::CopyFrom(const Batch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jaeger.api_v2.Batch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Batch::IsInitialized() const {
  return true;
}

void Batch::InternalSwap(Batch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  spans_.InternalSwap(&other->spans_);
  swap(process_, other->process_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Batch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DependencyLink::_Internal {
 public:
};

DependencyLink::DependencyLink(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jaeger.api_v2.DependencyLink)
}
DependencyLink::DependencyLink(const DependencyLink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parent().empty()) {
    parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parent(), 
      GetArena());
  }
  child_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_child().empty()) {
    child_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_child(), 
      GetArena());
  }
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source().empty()) {
    source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source(), 
      GetArena());
  }
  call_count_ = from.call_count_;
  // @@protoc_insertion_point(copy_constructor:jaeger.api_v2.DependencyLink)
}

void DependencyLink::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DependencyLink_model_2eproto.base);
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  child_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  call_count_ = PROTOBUF_ULONGLONG(0);
}

DependencyLink::~DependencyLink() {
  // @@protoc_insertion_point(destructor:jaeger.api_v2.DependencyLink)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DependencyLink::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  parent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  child_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DependencyLink::ArenaDtor(void* object) {
  DependencyLink* _this = reinterpret_cast< DependencyLink* >(object);
  (void)_this;
}
void DependencyLink::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DependencyLink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DependencyLink& DependencyLink::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DependencyLink_model_2eproto.base);
  return *internal_default_instance();
}


void DependencyLink::Clear() {
// @@protoc_insertion_point(message_clear_start:jaeger.api_v2.DependencyLink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmpty();
  child_.ClearToEmpty();
  source_.ClearToEmpty();
  call_count_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DependencyLink::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string parent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_parent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jaeger.api_v2.DependencyLink.parent"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string child = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_child();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jaeger.api_v2.DependencyLink.child"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 call_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          call_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jaeger.api_v2.DependencyLink.source"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DependencyLink::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jaeger.api_v2.DependencyLink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent().data(), static_cast<int>(this->_internal_parent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jaeger.api_v2.DependencyLink.parent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parent(), target);
  }

  // string child = 2;
  if (this->child().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_child().data(), static_cast<int>(this->_internal_child().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jaeger.api_v2.DependencyLink.child");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_child(), target);
  }

  // uint64 call_count = 3;
  if (this->call_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_call_count(), target);
  }

  // string source = 4;
  if (this->source().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jaeger.api_v2.DependencyLink.source");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jaeger.api_v2.DependencyLink)
  return target;
}

size_t DependencyLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jaeger.api_v2.DependencyLink)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent());
  }

  // string child = 2;
  if (this->child().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_child());
  }

  // string source = 4;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source());
  }

  // uint64 call_count = 3;
  if (this->call_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_call_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DependencyLink::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jaeger.api_v2.DependencyLink)
  GOOGLE_DCHECK_NE(&from, this);
  const DependencyLink* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DependencyLink>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jaeger.api_v2.DependencyLink)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jaeger.api_v2.DependencyLink)
    MergeFrom(*source);
  }
}

void DependencyLink::MergeFrom(const DependencyLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jaeger.api_v2.DependencyLink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent().size() > 0) {
    _internal_set_parent(from._internal_parent());
  }
  if (from.child().size() > 0) {
    _internal_set_child(from._internal_child());
  }
  if (from.source().size() > 0) {
    _internal_set_source(from._internal_source());
  }
  if (from.call_count() != 0) {
    _internal_set_call_count(from._internal_call_count());
  }
}

void DependencyLink::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jaeger.api_v2.DependencyLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DependencyLink::CopyFrom(const DependencyLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jaeger.api_v2.DependencyLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DependencyLink::IsInitialized() const {
  return true;
}

void DependencyLink::InternalSwap(DependencyLink* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  parent_.Swap(&other->parent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  child_.Swap(&other->child_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(call_count_, other->call_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DependencyLink::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace api_v2
}  // namespace jaeger
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::jaeger::api_v2::KeyValue* Arena::CreateMaybeMessage< ::jaeger::api_v2::KeyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jaeger::api_v2::KeyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::jaeger::api_v2::Log* Arena::CreateMaybeMessage< ::jaeger::api_v2::Log >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jaeger::api_v2::Log >(arena);
}
template<> PROTOBUF_NOINLINE ::jaeger::api_v2::SpanRef* Arena::CreateMaybeMessage< ::jaeger::api_v2::SpanRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jaeger::api_v2::SpanRef >(arena);
}
template<> PROTOBUF_NOINLINE ::jaeger::api_v2::Process* Arena::CreateMaybeMessage< ::jaeger::api_v2::Process >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jaeger::api_v2::Process >(arena);
}
template<> PROTOBUF_NOINLINE ::jaeger::api_v2::Span* Arena::CreateMaybeMessage< ::jaeger::api_v2::Span >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jaeger::api_v2::Span >(arena);
}
template<> PROTOBUF_NOINLINE ::jaeger::api_v2::Trace_ProcessMapping* Arena::CreateMaybeMessage< ::jaeger::api_v2::Trace_ProcessMapping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jaeger::api_v2::Trace_ProcessMapping >(arena);
}
template<> PROTOBUF_NOINLINE ::jaeger::api_v2::Trace* Arena::CreateMaybeMessage< ::jaeger::api_v2::Trace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jaeger::api_v2::Trace >(arena);
}
template<> PROTOBUF_NOINLINE ::jaeger::api_v2::Batch* Arena::CreateMaybeMessage< ::jaeger::api_v2::Batch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jaeger::api_v2::Batch >(arena);
}
template<> PROTOBUF_NOINLINE ::jaeger::api_v2::DependencyLink* Arena::CreateMaybeMessage< ::jaeger::api_v2::DependencyLink >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jaeger::api_v2::DependencyLink >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
