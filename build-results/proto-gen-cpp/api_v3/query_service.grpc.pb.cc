// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api_v3/query_service.proto

#include "api_v3/query_service.pb.h"
#include "api_v3/query_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace jaeger {
namespace api_v3 {

static const char* QueryService_method_names[] = {
  "/jaeger.api_v3.QueryService/GetTrace",
  "/jaeger.api_v3.QueryService/FindTraces",
  "/jaeger.api_v3.QueryService/GetServices",
  "/jaeger.api_v3.QueryService/GetOperations",
};

std::unique_ptr< QueryService::Stub> QueryService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< QueryService::Stub> stub(new QueryService::Stub(channel));
  return stub;
}

QueryService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetTrace_(QueryService_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_FindTraces_(QueryService_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetServices_(QueryService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOperations_(QueryService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::jaeger::api_v3::SpansResponseChunk>* QueryService::Stub::GetTraceRaw(::grpc::ClientContext* context, const ::jaeger::api_v3::GetTraceRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::jaeger::api_v3::SpansResponseChunk>::Create(channel_.get(), rpcmethod_GetTrace_, context, request);
}

void QueryService::Stub::experimental_async::GetTrace(::grpc::ClientContext* context, ::jaeger::api_v3::GetTraceRequest* request, ::grpc::experimental::ClientReadReactor< ::jaeger::api_v3::SpansResponseChunk>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::jaeger::api_v3::SpansResponseChunk>::Create(stub_->channel_.get(), stub_->rpcmethod_GetTrace_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::jaeger::api_v3::SpansResponseChunk>* QueryService::Stub::AsyncGetTraceRaw(::grpc::ClientContext* context, const ::jaeger::api_v3::GetTraceRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::jaeger::api_v3::SpansResponseChunk>::Create(channel_.get(), cq, rpcmethod_GetTrace_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::jaeger::api_v3::SpansResponseChunk>* QueryService::Stub::PrepareAsyncGetTraceRaw(::grpc::ClientContext* context, const ::jaeger::api_v3::GetTraceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::jaeger::api_v3::SpansResponseChunk>::Create(channel_.get(), cq, rpcmethod_GetTrace_, context, request, false, nullptr);
}

::grpc::ClientReader< ::jaeger::api_v3::SpansResponseChunk>* QueryService::Stub::FindTracesRaw(::grpc::ClientContext* context, const ::jaeger::api_v3::FindTracesRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::jaeger::api_v3::SpansResponseChunk>::Create(channel_.get(), rpcmethod_FindTraces_, context, request);
}

void QueryService::Stub::experimental_async::FindTraces(::grpc::ClientContext* context, ::jaeger::api_v3::FindTracesRequest* request, ::grpc::experimental::ClientReadReactor< ::jaeger::api_v3::SpansResponseChunk>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::jaeger::api_v3::SpansResponseChunk>::Create(stub_->channel_.get(), stub_->rpcmethod_FindTraces_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::jaeger::api_v3::SpansResponseChunk>* QueryService::Stub::AsyncFindTracesRaw(::grpc::ClientContext* context, const ::jaeger::api_v3::FindTracesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::jaeger::api_v3::SpansResponseChunk>::Create(channel_.get(), cq, rpcmethod_FindTraces_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::jaeger::api_v3::SpansResponseChunk>* QueryService::Stub::PrepareAsyncFindTracesRaw(::grpc::ClientContext* context, const ::jaeger::api_v3::FindTracesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::jaeger::api_v3::SpansResponseChunk>::Create(channel_.get(), cq, rpcmethod_FindTraces_, context, request, false, nullptr);
}

::grpc::Status QueryService::Stub::GetServices(::grpc::ClientContext* context, const ::jaeger::api_v3::GetServicesRequest& request, ::jaeger::api_v3::GetServicesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::jaeger::api_v3::GetServicesRequest, ::jaeger::api_v3::GetServicesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServices_, context, request, response);
}

void QueryService::Stub::experimental_async::GetServices(::grpc::ClientContext* context, const ::jaeger::api_v3::GetServicesRequest* request, ::jaeger::api_v3::GetServicesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::jaeger::api_v3::GetServicesRequest, ::jaeger::api_v3::GetServicesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServices_, context, request, response, std::move(f));
}

void QueryService::Stub::experimental_async::GetServices(::grpc::ClientContext* context, const ::jaeger::api_v3::GetServicesRequest* request, ::jaeger::api_v3::GetServicesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServices_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::jaeger::api_v3::GetServicesResponse>* QueryService::Stub::PrepareAsyncGetServicesRaw(::grpc::ClientContext* context, const ::jaeger::api_v3::GetServicesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::jaeger::api_v3::GetServicesResponse, ::jaeger::api_v3::GetServicesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServices_, context, request);
}

::grpc::ClientAsyncResponseReader< ::jaeger::api_v3::GetServicesResponse>* QueryService::Stub::AsyncGetServicesRaw(::grpc::ClientContext* context, const ::jaeger::api_v3::GetServicesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServicesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status QueryService::Stub::GetOperations(::grpc::ClientContext* context, const ::jaeger::api_v3::GetOperationsRequest& request, ::jaeger::api_v3::GetOperationsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::jaeger::api_v3::GetOperationsRequest, ::jaeger::api_v3::GetOperationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOperations_, context, request, response);
}

void QueryService::Stub::experimental_async::GetOperations(::grpc::ClientContext* context, const ::jaeger::api_v3::GetOperationsRequest* request, ::jaeger::api_v3::GetOperationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::jaeger::api_v3::GetOperationsRequest, ::jaeger::api_v3::GetOperationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOperations_, context, request, response, std::move(f));
}

void QueryService::Stub::experimental_async::GetOperations(::grpc::ClientContext* context, const ::jaeger::api_v3::GetOperationsRequest* request, ::jaeger::api_v3::GetOperationsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOperations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::jaeger::api_v3::GetOperationsResponse>* QueryService::Stub::PrepareAsyncGetOperationsRaw(::grpc::ClientContext* context, const ::jaeger::api_v3::GetOperationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::jaeger::api_v3::GetOperationsResponse, ::jaeger::api_v3::GetOperationsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOperations_, context, request);
}

::grpc::ClientAsyncResponseReader< ::jaeger::api_v3::GetOperationsResponse>* QueryService::Stub::AsyncGetOperationsRaw(::grpc::ClientContext* context, const ::jaeger::api_v3::GetOperationsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOperationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

QueryService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QueryService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< QueryService::Service, ::jaeger::api_v3::GetTraceRequest, ::jaeger::api_v3::SpansResponseChunk>(
          [](QueryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::jaeger::api_v3::GetTraceRequest* req,
             ::grpc::ServerWriter<::jaeger::api_v3::SpansResponseChunk>* writer) {
               return service->GetTrace(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QueryService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< QueryService::Service, ::jaeger::api_v3::FindTracesRequest, ::jaeger::api_v3::SpansResponseChunk>(
          [](QueryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::jaeger::api_v3::FindTracesRequest* req,
             ::grpc::ServerWriter<::jaeger::api_v3::SpansResponseChunk>* writer) {
               return service->FindTraces(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QueryService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QueryService::Service, ::jaeger::api_v3::GetServicesRequest, ::jaeger::api_v3::GetServicesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](QueryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::jaeger::api_v3::GetServicesRequest* req,
             ::jaeger::api_v3::GetServicesResponse* resp) {
               return service->GetServices(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QueryService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QueryService::Service, ::jaeger::api_v3::GetOperationsRequest, ::jaeger::api_v3::GetOperationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](QueryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::jaeger::api_v3::GetOperationsRequest* req,
             ::jaeger::api_v3::GetOperationsResponse* resp) {
               return service->GetOperations(ctx, req, resp);
             }, this)));
}

QueryService::Service::~Service() {
}

::grpc::Status QueryService::Service::GetTrace(::grpc::ServerContext* context, const ::jaeger::api_v3::GetTraceRequest* request, ::grpc::ServerWriter< ::jaeger::api_v3::SpansResponseChunk>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status QueryService::Service::FindTraces(::grpc::ServerContext* context, const ::jaeger::api_v3::FindTracesRequest* request, ::grpc::ServerWriter< ::jaeger::api_v3::SpansResponseChunk>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status QueryService::Service::GetServices(::grpc::ServerContext* context, const ::jaeger::api_v3::GetServicesRequest* request, ::jaeger::api_v3::GetServicesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status QueryService::Service::GetOperations(::grpc::ServerContext* context, const ::jaeger::api_v3::GetOperationsRequest* request, ::jaeger::api_v3::GetOperationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace jaeger
}  // namespace api_v3

