// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: query.proto
// Original file comments:
// Copyright (c) 2019 The Jaeger Authors.
// Copyright (c) 2018 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_query_2eproto__INCLUDED
#define GRPC_query_2eproto__INCLUDED

#include "query.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace jaeger {
namespace api_v2 {

class QueryService final {
 public:
  static constexpr char const* service_full_name() {
    return "jaeger.api_v2.QueryService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::jaeger::api_v2::SpansResponseChunk>> GetTrace(::grpc::ClientContext* context, const ::jaeger::api_v2::GetTraceRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::jaeger::api_v2::SpansResponseChunk>>(GetTraceRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::jaeger::api_v2::SpansResponseChunk>> AsyncGetTrace(::grpc::ClientContext* context, const ::jaeger::api_v2::GetTraceRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::jaeger::api_v2::SpansResponseChunk>>(AsyncGetTraceRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::jaeger::api_v2::SpansResponseChunk>> PrepareAsyncGetTrace(::grpc::ClientContext* context, const ::jaeger::api_v2::GetTraceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::jaeger::api_v2::SpansResponseChunk>>(PrepareAsyncGetTraceRaw(context, request, cq));
    }
    virtual ::grpc::Status ArchiveTrace(::grpc::ClientContext* context, const ::jaeger::api_v2::ArchiveTraceRequest& request, ::jaeger::api_v2::ArchiveTraceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jaeger::api_v2::ArchiveTraceResponse>> AsyncArchiveTrace(::grpc::ClientContext* context, const ::jaeger::api_v2::ArchiveTraceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jaeger::api_v2::ArchiveTraceResponse>>(AsyncArchiveTraceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jaeger::api_v2::ArchiveTraceResponse>> PrepareAsyncArchiveTrace(::grpc::ClientContext* context, const ::jaeger::api_v2::ArchiveTraceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jaeger::api_v2::ArchiveTraceResponse>>(PrepareAsyncArchiveTraceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::jaeger::api_v2::SpansResponseChunk>> FindTraces(::grpc::ClientContext* context, const ::jaeger::api_v2::FindTracesRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::jaeger::api_v2::SpansResponseChunk>>(FindTracesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::jaeger::api_v2::SpansResponseChunk>> AsyncFindTraces(::grpc::ClientContext* context, const ::jaeger::api_v2::FindTracesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::jaeger::api_v2::SpansResponseChunk>>(AsyncFindTracesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::jaeger::api_v2::SpansResponseChunk>> PrepareAsyncFindTraces(::grpc::ClientContext* context, const ::jaeger::api_v2::FindTracesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::jaeger::api_v2::SpansResponseChunk>>(PrepareAsyncFindTracesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetServices(::grpc::ClientContext* context, const ::jaeger::api_v2::GetServicesRequest& request, ::jaeger::api_v2::GetServicesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jaeger::api_v2::GetServicesResponse>> AsyncGetServices(::grpc::ClientContext* context, const ::jaeger::api_v2::GetServicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jaeger::api_v2::GetServicesResponse>>(AsyncGetServicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jaeger::api_v2::GetServicesResponse>> PrepareAsyncGetServices(::grpc::ClientContext* context, const ::jaeger::api_v2::GetServicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jaeger::api_v2::GetServicesResponse>>(PrepareAsyncGetServicesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetOperations(::grpc::ClientContext* context, const ::jaeger::api_v2::GetOperationsRequest& request, ::jaeger::api_v2::GetOperationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jaeger::api_v2::GetOperationsResponse>> AsyncGetOperations(::grpc::ClientContext* context, const ::jaeger::api_v2::GetOperationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jaeger::api_v2::GetOperationsResponse>>(AsyncGetOperationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jaeger::api_v2::GetOperationsResponse>> PrepareAsyncGetOperations(::grpc::ClientContext* context, const ::jaeger::api_v2::GetOperationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jaeger::api_v2::GetOperationsResponse>>(PrepareAsyncGetOperationsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetDependencies(::grpc::ClientContext* context, const ::jaeger::api_v2::GetDependenciesRequest& request, ::jaeger::api_v2::GetDependenciesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jaeger::api_v2::GetDependenciesResponse>> AsyncGetDependencies(::grpc::ClientContext* context, const ::jaeger::api_v2::GetDependenciesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jaeger::api_v2::GetDependenciesResponse>>(AsyncGetDependenciesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jaeger::api_v2::GetDependenciesResponse>> PrepareAsyncGetDependencies(::grpc::ClientContext* context, const ::jaeger::api_v2::GetDependenciesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jaeger::api_v2::GetDependenciesResponse>>(PrepareAsyncGetDependenciesRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetTrace(::grpc::ClientContext* context, ::jaeger::api_v2::GetTraceRequest* request, ::grpc::ClientReadReactor< ::jaeger::api_v2::SpansResponseChunk>* reactor) = 0;
      #else
      virtual void GetTrace(::grpc::ClientContext* context, ::jaeger::api_v2::GetTraceRequest* request, ::grpc::experimental::ClientReadReactor< ::jaeger::api_v2::SpansResponseChunk>* reactor) = 0;
      #endif
      virtual void ArchiveTrace(::grpc::ClientContext* context, const ::jaeger::api_v2::ArchiveTraceRequest* request, ::jaeger::api_v2::ArchiveTraceResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ArchiveTrace(::grpc::ClientContext* context, const ::jaeger::api_v2::ArchiveTraceRequest* request, ::jaeger::api_v2::ArchiveTraceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ArchiveTrace(::grpc::ClientContext* context, const ::jaeger::api_v2::ArchiveTraceRequest* request, ::jaeger::api_v2::ArchiveTraceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void FindTraces(::grpc::ClientContext* context, ::jaeger::api_v2::FindTracesRequest* request, ::grpc::ClientReadReactor< ::jaeger::api_v2::SpansResponseChunk>* reactor) = 0;
      #else
      virtual void FindTraces(::grpc::ClientContext* context, ::jaeger::api_v2::FindTracesRequest* request, ::grpc::experimental::ClientReadReactor< ::jaeger::api_v2::SpansResponseChunk>* reactor) = 0;
      #endif
      virtual void GetServices(::grpc::ClientContext* context, const ::jaeger::api_v2::GetServicesRequest* request, ::jaeger::api_v2::GetServicesResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetServices(::grpc::ClientContext* context, const ::jaeger::api_v2::GetServicesRequest* request, ::jaeger::api_v2::GetServicesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetServices(::grpc::ClientContext* context, const ::jaeger::api_v2::GetServicesRequest* request, ::jaeger::api_v2::GetServicesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetOperations(::grpc::ClientContext* context, const ::jaeger::api_v2::GetOperationsRequest* request, ::jaeger::api_v2::GetOperationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetOperations(::grpc::ClientContext* context, const ::jaeger::api_v2::GetOperationsRequest* request, ::jaeger::api_v2::GetOperationsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetOperations(::grpc::ClientContext* context, const ::jaeger::api_v2::GetOperationsRequest* request, ::jaeger::api_v2::GetOperationsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetDependencies(::grpc::ClientContext* context, const ::jaeger::api_v2::GetDependenciesRequest* request, ::jaeger::api_v2::GetDependenciesResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetDependencies(::grpc::ClientContext* context, const ::jaeger::api_v2::GetDependenciesRequest* request, ::jaeger::api_v2::GetDependenciesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetDependencies(::grpc::ClientContext* context, const ::jaeger::api_v2::GetDependenciesRequest* request, ::jaeger::api_v2::GetDependenciesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::jaeger::api_v2::SpansResponseChunk>* GetTraceRaw(::grpc::ClientContext* context, const ::jaeger::api_v2::GetTraceRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::jaeger::api_v2::SpansResponseChunk>* AsyncGetTraceRaw(::grpc::ClientContext* context, const ::jaeger::api_v2::GetTraceRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::jaeger::api_v2::SpansResponseChunk>* PrepareAsyncGetTraceRaw(::grpc::ClientContext* context, const ::jaeger::api_v2::GetTraceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jaeger::api_v2::ArchiveTraceResponse>* AsyncArchiveTraceRaw(::grpc::ClientContext* context, const ::jaeger::api_v2::ArchiveTraceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jaeger::api_v2::ArchiveTraceResponse>* PrepareAsyncArchiveTraceRaw(::grpc::ClientContext* context, const ::jaeger::api_v2::ArchiveTraceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::jaeger::api_v2::SpansResponseChunk>* FindTracesRaw(::grpc::ClientContext* context, const ::jaeger::api_v2::FindTracesRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::jaeger::api_v2::SpansResponseChunk>* AsyncFindTracesRaw(::grpc::ClientContext* context, const ::jaeger::api_v2::FindTracesRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::jaeger::api_v2::SpansResponseChunk>* PrepareAsyncFindTracesRaw(::grpc::ClientContext* context, const ::jaeger::api_v2::FindTracesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jaeger::api_v2::GetServicesResponse>* AsyncGetServicesRaw(::grpc::ClientContext* context, const ::jaeger::api_v2::GetServicesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jaeger::api_v2::GetServicesResponse>* PrepareAsyncGetServicesRaw(::grpc::ClientContext* context, const ::jaeger::api_v2::GetServicesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jaeger::api_v2::GetOperationsResponse>* AsyncGetOperationsRaw(::grpc::ClientContext* context, const ::jaeger::api_v2::GetOperationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jaeger::api_v2::GetOperationsResponse>* PrepareAsyncGetOperationsRaw(::grpc::ClientContext* context, const ::jaeger::api_v2::GetOperationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jaeger::api_v2::GetDependenciesResponse>* AsyncGetDependenciesRaw(::grpc::ClientContext* context, const ::jaeger::api_v2::GetDependenciesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jaeger::api_v2::GetDependenciesResponse>* PrepareAsyncGetDependenciesRaw(::grpc::ClientContext* context, const ::jaeger::api_v2::GetDependenciesRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::jaeger::api_v2::SpansResponseChunk>> GetTrace(::grpc::ClientContext* context, const ::jaeger::api_v2::GetTraceRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::jaeger::api_v2::SpansResponseChunk>>(GetTraceRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::jaeger::api_v2::SpansResponseChunk>> AsyncGetTrace(::grpc::ClientContext* context, const ::jaeger::api_v2::GetTraceRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::jaeger::api_v2::SpansResponseChunk>>(AsyncGetTraceRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::jaeger::api_v2::SpansResponseChunk>> PrepareAsyncGetTrace(::grpc::ClientContext* context, const ::jaeger::api_v2::GetTraceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::jaeger::api_v2::SpansResponseChunk>>(PrepareAsyncGetTraceRaw(context, request, cq));
    }
    ::grpc::Status ArchiveTrace(::grpc::ClientContext* context, const ::jaeger::api_v2::ArchiveTraceRequest& request, ::jaeger::api_v2::ArchiveTraceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jaeger::api_v2::ArchiveTraceResponse>> AsyncArchiveTrace(::grpc::ClientContext* context, const ::jaeger::api_v2::ArchiveTraceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jaeger::api_v2::ArchiveTraceResponse>>(AsyncArchiveTraceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jaeger::api_v2::ArchiveTraceResponse>> PrepareAsyncArchiveTrace(::grpc::ClientContext* context, const ::jaeger::api_v2::ArchiveTraceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jaeger::api_v2::ArchiveTraceResponse>>(PrepareAsyncArchiveTraceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::jaeger::api_v2::SpansResponseChunk>> FindTraces(::grpc::ClientContext* context, const ::jaeger::api_v2::FindTracesRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::jaeger::api_v2::SpansResponseChunk>>(FindTracesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::jaeger::api_v2::SpansResponseChunk>> AsyncFindTraces(::grpc::ClientContext* context, const ::jaeger::api_v2::FindTracesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::jaeger::api_v2::SpansResponseChunk>>(AsyncFindTracesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::jaeger::api_v2::SpansResponseChunk>> PrepareAsyncFindTraces(::grpc::ClientContext* context, const ::jaeger::api_v2::FindTracesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::jaeger::api_v2::SpansResponseChunk>>(PrepareAsyncFindTracesRaw(context, request, cq));
    }
    ::grpc::Status GetServices(::grpc::ClientContext* context, const ::jaeger::api_v2::GetServicesRequest& request, ::jaeger::api_v2::GetServicesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jaeger::api_v2::GetServicesResponse>> AsyncGetServices(::grpc::ClientContext* context, const ::jaeger::api_v2::GetServicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jaeger::api_v2::GetServicesResponse>>(AsyncGetServicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jaeger::api_v2::GetServicesResponse>> PrepareAsyncGetServices(::grpc::ClientContext* context, const ::jaeger::api_v2::GetServicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jaeger::api_v2::GetServicesResponse>>(PrepareAsyncGetServicesRaw(context, request, cq));
    }
    ::grpc::Status GetOperations(::grpc::ClientContext* context, const ::jaeger::api_v2::GetOperationsRequest& request, ::jaeger::api_v2::GetOperationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jaeger::api_v2::GetOperationsResponse>> AsyncGetOperations(::grpc::ClientContext* context, const ::jaeger::api_v2::GetOperationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jaeger::api_v2::GetOperationsResponse>>(AsyncGetOperationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jaeger::api_v2::GetOperationsResponse>> PrepareAsyncGetOperations(::grpc::ClientContext* context, const ::jaeger::api_v2::GetOperationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jaeger::api_v2::GetOperationsResponse>>(PrepareAsyncGetOperationsRaw(context, request, cq));
    }
    ::grpc::Status GetDependencies(::grpc::ClientContext* context, const ::jaeger::api_v2::GetDependenciesRequest& request, ::jaeger::api_v2::GetDependenciesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jaeger::api_v2::GetDependenciesResponse>> AsyncGetDependencies(::grpc::ClientContext* context, const ::jaeger::api_v2::GetDependenciesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jaeger::api_v2::GetDependenciesResponse>>(AsyncGetDependenciesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jaeger::api_v2::GetDependenciesResponse>> PrepareAsyncGetDependencies(::grpc::ClientContext* context, const ::jaeger::api_v2::GetDependenciesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jaeger::api_v2::GetDependenciesResponse>>(PrepareAsyncGetDependenciesRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetTrace(::grpc::ClientContext* context, ::jaeger::api_v2::GetTraceRequest* request, ::grpc::ClientReadReactor< ::jaeger::api_v2::SpansResponseChunk>* reactor) override;
      #else
      void GetTrace(::grpc::ClientContext* context, ::jaeger::api_v2::GetTraceRequest* request, ::grpc::experimental::ClientReadReactor< ::jaeger::api_v2::SpansResponseChunk>* reactor) override;
      #endif
      void ArchiveTrace(::grpc::ClientContext* context, const ::jaeger::api_v2::ArchiveTraceRequest* request, ::jaeger::api_v2::ArchiveTraceResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ArchiveTrace(::grpc::ClientContext* context, const ::jaeger::api_v2::ArchiveTraceRequest* request, ::jaeger::api_v2::ArchiveTraceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ArchiveTrace(::grpc::ClientContext* context, const ::jaeger::api_v2::ArchiveTraceRequest* request, ::jaeger::api_v2::ArchiveTraceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void FindTraces(::grpc::ClientContext* context, ::jaeger::api_v2::FindTracesRequest* request, ::grpc::ClientReadReactor< ::jaeger::api_v2::SpansResponseChunk>* reactor) override;
      #else
      void FindTraces(::grpc::ClientContext* context, ::jaeger::api_v2::FindTracesRequest* request, ::grpc::experimental::ClientReadReactor< ::jaeger::api_v2::SpansResponseChunk>* reactor) override;
      #endif
      void GetServices(::grpc::ClientContext* context, const ::jaeger::api_v2::GetServicesRequest* request, ::jaeger::api_v2::GetServicesResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetServices(::grpc::ClientContext* context, const ::jaeger::api_v2::GetServicesRequest* request, ::jaeger::api_v2::GetServicesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetServices(::grpc::ClientContext* context, const ::jaeger::api_v2::GetServicesRequest* request, ::jaeger::api_v2::GetServicesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetOperations(::grpc::ClientContext* context, const ::jaeger::api_v2::GetOperationsRequest* request, ::jaeger::api_v2::GetOperationsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetOperations(::grpc::ClientContext* context, const ::jaeger::api_v2::GetOperationsRequest* request, ::jaeger::api_v2::GetOperationsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetOperations(::grpc::ClientContext* context, const ::jaeger::api_v2::GetOperationsRequest* request, ::jaeger::api_v2::GetOperationsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetDependencies(::grpc::ClientContext* context, const ::jaeger::api_v2::GetDependenciesRequest* request, ::jaeger::api_v2::GetDependenciesResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetDependencies(::grpc::ClientContext* context, const ::jaeger::api_v2::GetDependenciesRequest* request, ::jaeger::api_v2::GetDependenciesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetDependencies(::grpc::ClientContext* context, const ::jaeger::api_v2::GetDependenciesRequest* request, ::jaeger::api_v2::GetDependenciesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::jaeger::api_v2::SpansResponseChunk>* GetTraceRaw(::grpc::ClientContext* context, const ::jaeger::api_v2::GetTraceRequest& request) override;
    ::grpc::ClientAsyncReader< ::jaeger::api_v2::SpansResponseChunk>* AsyncGetTraceRaw(::grpc::ClientContext* context, const ::jaeger::api_v2::GetTraceRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::jaeger::api_v2::SpansResponseChunk>* PrepareAsyncGetTraceRaw(::grpc::ClientContext* context, const ::jaeger::api_v2::GetTraceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jaeger::api_v2::ArchiveTraceResponse>* AsyncArchiveTraceRaw(::grpc::ClientContext* context, const ::jaeger::api_v2::ArchiveTraceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jaeger::api_v2::ArchiveTraceResponse>* PrepareAsyncArchiveTraceRaw(::grpc::ClientContext* context, const ::jaeger::api_v2::ArchiveTraceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::jaeger::api_v2::SpansResponseChunk>* FindTracesRaw(::grpc::ClientContext* context, const ::jaeger::api_v2::FindTracesRequest& request) override;
    ::grpc::ClientAsyncReader< ::jaeger::api_v2::SpansResponseChunk>* AsyncFindTracesRaw(::grpc::ClientContext* context, const ::jaeger::api_v2::FindTracesRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::jaeger::api_v2::SpansResponseChunk>* PrepareAsyncFindTracesRaw(::grpc::ClientContext* context, const ::jaeger::api_v2::FindTracesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jaeger::api_v2::GetServicesResponse>* AsyncGetServicesRaw(::grpc::ClientContext* context, const ::jaeger::api_v2::GetServicesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jaeger::api_v2::GetServicesResponse>* PrepareAsyncGetServicesRaw(::grpc::ClientContext* context, const ::jaeger::api_v2::GetServicesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jaeger::api_v2::GetOperationsResponse>* AsyncGetOperationsRaw(::grpc::ClientContext* context, const ::jaeger::api_v2::GetOperationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jaeger::api_v2::GetOperationsResponse>* PrepareAsyncGetOperationsRaw(::grpc::ClientContext* context, const ::jaeger::api_v2::GetOperationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jaeger::api_v2::GetDependenciesResponse>* AsyncGetDependenciesRaw(::grpc::ClientContext* context, const ::jaeger::api_v2::GetDependenciesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jaeger::api_v2::GetDependenciesResponse>* PrepareAsyncGetDependenciesRaw(::grpc::ClientContext* context, const ::jaeger::api_v2::GetDependenciesRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetTrace_;
    const ::grpc::internal::RpcMethod rpcmethod_ArchiveTrace_;
    const ::grpc::internal::RpcMethod rpcmethod_FindTraces_;
    const ::grpc::internal::RpcMethod rpcmethod_GetServices_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOperations_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDependencies_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetTrace(::grpc::ServerContext* context, const ::jaeger::api_v2::GetTraceRequest* request, ::grpc::ServerWriter< ::jaeger::api_v2::SpansResponseChunk>* writer);
    virtual ::grpc::Status ArchiveTrace(::grpc::ServerContext* context, const ::jaeger::api_v2::ArchiveTraceRequest* request, ::jaeger::api_v2::ArchiveTraceResponse* response);
    virtual ::grpc::Status FindTraces(::grpc::ServerContext* context, const ::jaeger::api_v2::FindTracesRequest* request, ::grpc::ServerWriter< ::jaeger::api_v2::SpansResponseChunk>* writer);
    virtual ::grpc::Status GetServices(::grpc::ServerContext* context, const ::jaeger::api_v2::GetServicesRequest* request, ::jaeger::api_v2::GetServicesResponse* response);
    virtual ::grpc::Status GetOperations(::grpc::ServerContext* context, const ::jaeger::api_v2::GetOperationsRequest* request, ::jaeger::api_v2::GetOperationsResponse* response);
    virtual ::grpc::Status GetDependencies(::grpc::ServerContext* context, const ::jaeger::api_v2::GetDependenciesRequest* request, ::jaeger::api_v2::GetDependenciesResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTrace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTrace() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetTrace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTrace(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::GetTraceRequest* /*request*/, ::grpc::ServerWriter< ::jaeger::api_v2::SpansResponseChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTrace(::grpc::ServerContext* context, ::jaeger::api_v2::GetTraceRequest* request, ::grpc::ServerAsyncWriter< ::jaeger::api_v2::SpansResponseChunk>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ArchiveTrace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ArchiveTrace() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ArchiveTrace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ArchiveTrace(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::ArchiveTraceRequest* /*request*/, ::jaeger::api_v2::ArchiveTraceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestArchiveTrace(::grpc::ServerContext* context, ::jaeger::api_v2::ArchiveTraceRequest* request, ::grpc::ServerAsyncResponseWriter< ::jaeger::api_v2::ArchiveTraceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FindTraces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindTraces() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_FindTraces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindTraces(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::FindTracesRequest* /*request*/, ::grpc::ServerWriter< ::jaeger::api_v2::SpansResponseChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindTraces(::grpc::ServerContext* context, ::jaeger::api_v2::FindTracesRequest* request, ::grpc::ServerAsyncWriter< ::jaeger::api_v2::SpansResponseChunk>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetServices() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetServices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServices(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::GetServicesRequest* /*request*/, ::jaeger::api_v2::GetServicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServices(::grpc::ServerContext* context, ::jaeger::api_v2::GetServicesRequest* request, ::grpc::ServerAsyncResponseWriter< ::jaeger::api_v2::GetServicesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetOperations() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOperations(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::GetOperationsRequest* /*request*/, ::jaeger::api_v2::GetOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOperations(::grpc::ServerContext* context, ::jaeger::api_v2::GetOperationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::jaeger::api_v2::GetOperationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDependencies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDependencies() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetDependencies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDependencies(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::GetDependenciesRequest* /*request*/, ::jaeger::api_v2::GetDependenciesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDependencies(::grpc::ServerContext* context, ::jaeger::api_v2::GetDependenciesRequest* request, ::grpc::ServerAsyncResponseWriter< ::jaeger::api_v2::GetDependenciesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetTrace<WithAsyncMethod_ArchiveTrace<WithAsyncMethod_FindTraces<WithAsyncMethod_GetServices<WithAsyncMethod_GetOperations<WithAsyncMethod_GetDependencies<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetTrace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetTrace() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::jaeger::api_v2::GetTraceRequest, ::jaeger::api_v2::SpansResponseChunk>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::jaeger::api_v2::GetTraceRequest* request) { return this->GetTrace(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetTrace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTrace(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::GetTraceRequest* /*request*/, ::grpc::ServerWriter< ::jaeger::api_v2::SpansResponseChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::jaeger::api_v2::SpansResponseChunk>* GetTrace(
      ::grpc::CallbackServerContext* /*context*/, const ::jaeger::api_v2::GetTraceRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::jaeger::api_v2::SpansResponseChunk>* GetTrace(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::jaeger::api_v2::GetTraceRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ArchiveTrace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ArchiveTrace() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::jaeger::api_v2::ArchiveTraceRequest, ::jaeger::api_v2::ArchiveTraceResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::jaeger::api_v2::ArchiveTraceRequest* request, ::jaeger::api_v2::ArchiveTraceResponse* response) { return this->ArchiveTrace(context, request, response); }));}
    void SetMessageAllocatorFor_ArchiveTrace(
        ::grpc::experimental::MessageAllocator< ::jaeger::api_v2::ArchiveTraceRequest, ::jaeger::api_v2::ArchiveTraceResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::jaeger::api_v2::ArchiveTraceRequest, ::jaeger::api_v2::ArchiveTraceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ArchiveTrace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ArchiveTrace(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::ArchiveTraceRequest* /*request*/, ::jaeger::api_v2::ArchiveTraceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ArchiveTrace(
      ::grpc::CallbackServerContext* /*context*/, const ::jaeger::api_v2::ArchiveTraceRequest* /*request*/, ::jaeger::api_v2::ArchiveTraceResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ArchiveTrace(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::jaeger::api_v2::ArchiveTraceRequest* /*request*/, ::jaeger::api_v2::ArchiveTraceResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FindTraces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_FindTraces() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::jaeger::api_v2::FindTracesRequest, ::jaeger::api_v2::SpansResponseChunk>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::jaeger::api_v2::FindTracesRequest* request) { return this->FindTraces(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_FindTraces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindTraces(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::FindTracesRequest* /*request*/, ::grpc::ServerWriter< ::jaeger::api_v2::SpansResponseChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::jaeger::api_v2::SpansResponseChunk>* FindTraces(
      ::grpc::CallbackServerContext* /*context*/, const ::jaeger::api_v2::FindTracesRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::jaeger::api_v2::SpansResponseChunk>* FindTraces(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::jaeger::api_v2::FindTracesRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetServices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetServices() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::jaeger::api_v2::GetServicesRequest, ::jaeger::api_v2::GetServicesResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::jaeger::api_v2::GetServicesRequest* request, ::jaeger::api_v2::GetServicesResponse* response) { return this->GetServices(context, request, response); }));}
    void SetMessageAllocatorFor_GetServices(
        ::grpc::experimental::MessageAllocator< ::jaeger::api_v2::GetServicesRequest, ::jaeger::api_v2::GetServicesResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::jaeger::api_v2::GetServicesRequest, ::jaeger::api_v2::GetServicesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetServices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServices(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::GetServicesRequest* /*request*/, ::jaeger::api_v2::GetServicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetServices(
      ::grpc::CallbackServerContext* /*context*/, const ::jaeger::api_v2::GetServicesRequest* /*request*/, ::jaeger::api_v2::GetServicesResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetServices(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::jaeger::api_v2::GetServicesRequest* /*request*/, ::jaeger::api_v2::GetServicesResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetOperations() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::jaeger::api_v2::GetOperationsRequest, ::jaeger::api_v2::GetOperationsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::jaeger::api_v2::GetOperationsRequest* request, ::jaeger::api_v2::GetOperationsResponse* response) { return this->GetOperations(context, request, response); }));}
    void SetMessageAllocatorFor_GetOperations(
        ::grpc::experimental::MessageAllocator< ::jaeger::api_v2::GetOperationsRequest, ::jaeger::api_v2::GetOperationsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::jaeger::api_v2::GetOperationsRequest, ::jaeger::api_v2::GetOperationsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOperations(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::GetOperationsRequest* /*request*/, ::jaeger::api_v2::GetOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetOperations(
      ::grpc::CallbackServerContext* /*context*/, const ::jaeger::api_v2::GetOperationsRequest* /*request*/, ::jaeger::api_v2::GetOperationsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetOperations(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::jaeger::api_v2::GetOperationsRequest* /*request*/, ::jaeger::api_v2::GetOperationsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetDependencies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetDependencies() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::jaeger::api_v2::GetDependenciesRequest, ::jaeger::api_v2::GetDependenciesResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::jaeger::api_v2::GetDependenciesRequest* request, ::jaeger::api_v2::GetDependenciesResponse* response) { return this->GetDependencies(context, request, response); }));}
    void SetMessageAllocatorFor_GetDependencies(
        ::grpc::experimental::MessageAllocator< ::jaeger::api_v2::GetDependenciesRequest, ::jaeger::api_v2::GetDependenciesResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::jaeger::api_v2::GetDependenciesRequest, ::jaeger::api_v2::GetDependenciesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetDependencies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDependencies(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::GetDependenciesRequest* /*request*/, ::jaeger::api_v2::GetDependenciesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetDependencies(
      ::grpc::CallbackServerContext* /*context*/, const ::jaeger::api_v2::GetDependenciesRequest* /*request*/, ::jaeger::api_v2::GetDependenciesResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetDependencies(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::jaeger::api_v2::GetDependenciesRequest* /*request*/, ::jaeger::api_v2::GetDependenciesResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetTrace<ExperimentalWithCallbackMethod_ArchiveTrace<ExperimentalWithCallbackMethod_FindTraces<ExperimentalWithCallbackMethod_GetServices<ExperimentalWithCallbackMethod_GetOperations<ExperimentalWithCallbackMethod_GetDependencies<Service > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetTrace<ExperimentalWithCallbackMethod_ArchiveTrace<ExperimentalWithCallbackMethod_FindTraces<ExperimentalWithCallbackMethod_GetServices<ExperimentalWithCallbackMethod_GetOperations<ExperimentalWithCallbackMethod_GetDependencies<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetTrace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTrace() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetTrace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTrace(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::GetTraceRequest* /*request*/, ::grpc::ServerWriter< ::jaeger::api_v2::SpansResponseChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ArchiveTrace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ArchiveTrace() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ArchiveTrace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ArchiveTrace(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::ArchiveTraceRequest* /*request*/, ::jaeger::api_v2::ArchiveTraceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FindTraces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindTraces() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_FindTraces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindTraces(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::FindTracesRequest* /*request*/, ::grpc::ServerWriter< ::jaeger::api_v2::SpansResponseChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetServices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetServices() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetServices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServices(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::GetServicesRequest* /*request*/, ::jaeger::api_v2::GetServicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetOperations() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOperations(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::GetOperationsRequest* /*request*/, ::jaeger::api_v2::GetOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDependencies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDependencies() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetDependencies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDependencies(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::GetDependenciesRequest* /*request*/, ::jaeger::api_v2::GetDependenciesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTrace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTrace() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetTrace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTrace(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::GetTraceRequest* /*request*/, ::grpc::ServerWriter< ::jaeger::api_v2::SpansResponseChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTrace(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ArchiveTrace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ArchiveTrace() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ArchiveTrace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ArchiveTrace(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::ArchiveTraceRequest* /*request*/, ::jaeger::api_v2::ArchiveTraceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestArchiveTrace(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindTraces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindTraces() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_FindTraces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindTraces(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::FindTracesRequest* /*request*/, ::grpc::ServerWriter< ::jaeger::api_v2::SpansResponseChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindTraces(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetServices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetServices() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetServices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServices(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::GetServicesRequest* /*request*/, ::jaeger::api_v2::GetServicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServices(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetOperations() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOperations(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::GetOperationsRequest* /*request*/, ::jaeger::api_v2::GetOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOperations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDependencies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDependencies() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetDependencies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDependencies(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::GetDependenciesRequest* /*request*/, ::jaeger::api_v2::GetDependenciesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDependencies(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetTrace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetTrace() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetTrace(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetTrace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTrace(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::GetTraceRequest* /*request*/, ::grpc::ServerWriter< ::jaeger::api_v2::SpansResponseChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetTrace(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetTrace(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ArchiveTrace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ArchiveTrace() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ArchiveTrace(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ArchiveTrace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ArchiveTrace(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::ArchiveTraceRequest* /*request*/, ::jaeger::api_v2::ArchiveTraceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ArchiveTrace(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ArchiveTrace(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FindTraces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_FindTraces() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->FindTraces(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_FindTraces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindTraces(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::FindTracesRequest* /*request*/, ::grpc::ServerWriter< ::jaeger::api_v2::SpansResponseChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* FindTraces(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* FindTraces(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetServices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetServices() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetServices(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetServices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServices(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::GetServicesRequest* /*request*/, ::jaeger::api_v2::GetServicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetServices(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetServices(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetOperations() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetOperations(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOperations(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::GetOperationsRequest* /*request*/, ::jaeger::api_v2::GetOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetOperations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetOperations(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetDependencies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetDependencies() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDependencies(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetDependencies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDependencies(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::GetDependenciesRequest* /*request*/, ::jaeger::api_v2::GetDependenciesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetDependencies(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetDependencies(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ArchiveTrace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ArchiveTrace() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::jaeger::api_v2::ArchiveTraceRequest, ::jaeger::api_v2::ArchiveTraceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::jaeger::api_v2::ArchiveTraceRequest, ::jaeger::api_v2::ArchiveTraceResponse>* streamer) {
                       return this->StreamedArchiveTrace(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ArchiveTrace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ArchiveTrace(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::ArchiveTraceRequest* /*request*/, ::jaeger::api_v2::ArchiveTraceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedArchiveTrace(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::jaeger::api_v2::ArchiveTraceRequest,::jaeger::api_v2::ArchiveTraceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetServices() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::jaeger::api_v2::GetServicesRequest, ::jaeger::api_v2::GetServicesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::jaeger::api_v2::GetServicesRequest, ::jaeger::api_v2::GetServicesResponse>* streamer) {
                       return this->StreamedGetServices(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetServices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServices(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::GetServicesRequest* /*request*/, ::jaeger::api_v2::GetServicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServices(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::jaeger::api_v2::GetServicesRequest,::jaeger::api_v2::GetServicesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetOperations() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::jaeger::api_v2::GetOperationsRequest, ::jaeger::api_v2::GetOperationsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::jaeger::api_v2::GetOperationsRequest, ::jaeger::api_v2::GetOperationsResponse>* streamer) {
                       return this->StreamedGetOperations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOperations(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::GetOperationsRequest* /*request*/, ::jaeger::api_v2::GetOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOperations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::jaeger::api_v2::GetOperationsRequest,::jaeger::api_v2::GetOperationsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDependencies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDependencies() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::jaeger::api_v2::GetDependenciesRequest, ::jaeger::api_v2::GetDependenciesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::jaeger::api_v2::GetDependenciesRequest, ::jaeger::api_v2::GetDependenciesResponse>* streamer) {
                       return this->StreamedGetDependencies(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDependencies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDependencies(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::GetDependenciesRequest* /*request*/, ::jaeger::api_v2::GetDependenciesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDependencies(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::jaeger::api_v2::GetDependenciesRequest,::jaeger::api_v2::GetDependenciesResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ArchiveTrace<WithStreamedUnaryMethod_GetServices<WithStreamedUnaryMethod_GetOperations<WithStreamedUnaryMethod_GetDependencies<Service > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetTrace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetTrace() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::jaeger::api_v2::GetTraceRequest, ::jaeger::api_v2::SpansResponseChunk>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::jaeger::api_v2::GetTraceRequest, ::jaeger::api_v2::SpansResponseChunk>* streamer) {
                       return this->StreamedGetTrace(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetTrace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTrace(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::GetTraceRequest* /*request*/, ::grpc::ServerWriter< ::jaeger::api_v2::SpansResponseChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetTrace(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::jaeger::api_v2::GetTraceRequest,::jaeger::api_v2::SpansResponseChunk>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_FindTraces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_FindTraces() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::jaeger::api_v2::FindTracesRequest, ::jaeger::api_v2::SpansResponseChunk>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::jaeger::api_v2::FindTracesRequest, ::jaeger::api_v2::SpansResponseChunk>* streamer) {
                       return this->StreamedFindTraces(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_FindTraces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindTraces(::grpc::ServerContext* /*context*/, const ::jaeger::api_v2::FindTracesRequest* /*request*/, ::grpc::ServerWriter< ::jaeger::api_v2::SpansResponseChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedFindTraces(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::jaeger::api_v2::FindTracesRequest,::jaeger::api_v2::SpansResponseChunk>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetTrace<WithSplitStreamingMethod_FindTraces<Service > > SplitStreamedService;
  typedef WithSplitStreamingMethod_GetTrace<WithStreamedUnaryMethod_ArchiveTrace<WithSplitStreamingMethod_FindTraces<WithStreamedUnaryMethod_GetServices<WithStreamedUnaryMethod_GetOperations<WithStreamedUnaryMethod_GetDependencies<Service > > > > > > StreamedService;
};

}  // namespace api_v2
}  // namespace jaeger


#endif  // GRPC_query_2eproto__INCLUDED
