// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: collector.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_collector_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_collector_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "model.pb.h"
#include "gogoproto/gogo.pb.h"
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_collector_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_collector_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_collector_2eproto;
namespace jaeger {
namespace api_v2 {
class PostSpansRequest;
class PostSpansRequestDefaultTypeInternal;
extern PostSpansRequestDefaultTypeInternal _PostSpansRequest_default_instance_;
class PostSpansResponse;
class PostSpansResponseDefaultTypeInternal;
extern PostSpansResponseDefaultTypeInternal _PostSpansResponse_default_instance_;
}  // namespace api_v2
}  // namespace jaeger
PROTOBUF_NAMESPACE_OPEN
template<> ::jaeger::api_v2::PostSpansRequest* Arena::CreateMaybeMessage<::jaeger::api_v2::PostSpansRequest>(Arena*);
template<> ::jaeger::api_v2::PostSpansResponse* Arena::CreateMaybeMessage<::jaeger::api_v2::PostSpansResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace jaeger {
namespace api_v2 {

// ===================================================================

class PostSpansRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jaeger.api_v2.PostSpansRequest) */ {
 public:
  inline PostSpansRequest() : PostSpansRequest(nullptr) {}
  virtual ~PostSpansRequest();

  PostSpansRequest(const PostSpansRequest& from);
  PostSpansRequest(PostSpansRequest&& from) noexcept
    : PostSpansRequest() {
    *this = ::std::move(from);
  }

  inline PostSpansRequest& operator=(const PostSpansRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostSpansRequest& operator=(PostSpansRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostSpansRequest& default_instance();

  static inline const PostSpansRequest* internal_default_instance() {
    return reinterpret_cast<const PostSpansRequest*>(
               &_PostSpansRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PostSpansRequest& a, PostSpansRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostSpansRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostSpansRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostSpansRequest* New() const final {
    return CreateMaybeMessage<PostSpansRequest>(nullptr);
  }

  PostSpansRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostSpansRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostSpansRequest& from);
  void MergeFrom(const PostSpansRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostSpansRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jaeger.api_v2.PostSpansRequest";
  }
  protected:
  explicit PostSpansRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_collector_2eproto);
    return ::descriptor_table_collector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBatchFieldNumber = 1,
  };
  // .jaeger.api_v2.Batch batch = 1 [(.gogoproto.nullable) = false];
  bool has_batch() const;
  private:
  bool _internal_has_batch() const;
  public:
  void clear_batch();
  const ::jaeger::api_v2::Batch& batch() const;
  ::jaeger::api_v2::Batch* release_batch();
  ::jaeger::api_v2::Batch* mutable_batch();
  void set_allocated_batch(::jaeger::api_v2::Batch* batch);
  private:
  const ::jaeger::api_v2::Batch& _internal_batch() const;
  ::jaeger::api_v2::Batch* _internal_mutable_batch();
  public:
  void unsafe_arena_set_allocated_batch(
      ::jaeger::api_v2::Batch* batch);
  ::jaeger::api_v2::Batch* unsafe_arena_release_batch();

  // @@protoc_insertion_point(class_scope:jaeger.api_v2.PostSpansRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::jaeger::api_v2::Batch* batch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_collector_2eproto;
};
// -------------------------------------------------------------------

class PostSpansResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jaeger.api_v2.PostSpansResponse) */ {
 public:
  inline PostSpansResponse() : PostSpansResponse(nullptr) {}
  virtual ~PostSpansResponse();

  PostSpansResponse(const PostSpansResponse& from);
  PostSpansResponse(PostSpansResponse&& from) noexcept
    : PostSpansResponse() {
    *this = ::std::move(from);
  }

  inline PostSpansResponse& operator=(const PostSpansResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostSpansResponse& operator=(PostSpansResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostSpansResponse& default_instance();

  static inline const PostSpansResponse* internal_default_instance() {
    return reinterpret_cast<const PostSpansResponse*>(
               &_PostSpansResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PostSpansResponse& a, PostSpansResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PostSpansResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostSpansResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostSpansResponse* New() const final {
    return CreateMaybeMessage<PostSpansResponse>(nullptr);
  }

  PostSpansResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostSpansResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostSpansResponse& from);
  void MergeFrom(const PostSpansResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostSpansResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jaeger.api_v2.PostSpansResponse";
  }
  protected:
  explicit PostSpansResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_collector_2eproto);
    return ::descriptor_table_collector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:jaeger.api_v2.PostSpansResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_collector_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PostSpansRequest

// .jaeger.api_v2.Batch batch = 1 [(.gogoproto.nullable) = false];
inline bool PostSpansRequest::_internal_has_batch() const {
  return this != internal_default_instance() && batch_ != nullptr;
}
inline bool PostSpansRequest::has_batch() const {
  return _internal_has_batch();
}
inline const ::jaeger::api_v2::Batch& PostSpansRequest::_internal_batch() const {
  const ::jaeger::api_v2::Batch* p = batch_;
  return p != nullptr ? *p : reinterpret_cast<const ::jaeger::api_v2::Batch&>(
      ::jaeger::api_v2::_Batch_default_instance_);
}
inline const ::jaeger::api_v2::Batch& PostSpansRequest::batch() const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.PostSpansRequest.batch)
  return _internal_batch();
}
inline void PostSpansRequest::unsafe_arena_set_allocated_batch(
    ::jaeger::api_v2::Batch* batch) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(batch_);
  }
  batch_ = batch;
  if (batch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jaeger.api_v2.PostSpansRequest.batch)
}
inline ::jaeger::api_v2::Batch* PostSpansRequest::release_batch() {
  
  ::jaeger::api_v2::Batch* temp = batch_;
  batch_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::jaeger::api_v2::Batch* PostSpansRequest::unsafe_arena_release_batch() {
  // @@protoc_insertion_point(field_release:jaeger.api_v2.PostSpansRequest.batch)
  
  ::jaeger::api_v2::Batch* temp = batch_;
  batch_ = nullptr;
  return temp;
}
inline ::jaeger::api_v2::Batch* PostSpansRequest::_internal_mutable_batch() {
  
  if (batch_ == nullptr) {
    auto* p = CreateMaybeMessage<::jaeger::api_v2::Batch>(GetArena());
    batch_ = p;
  }
  return batch_;
}
inline ::jaeger::api_v2::Batch* PostSpansRequest::mutable_batch() {
  // @@protoc_insertion_point(field_mutable:jaeger.api_v2.PostSpansRequest.batch)
  return _internal_mutable_batch();
}
inline void PostSpansRequest::set_allocated_batch(::jaeger::api_v2::Batch* batch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(batch_);
  }
  if (batch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(batch)->GetArena();
    if (message_arena != submessage_arena) {
      batch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, batch, submessage_arena);
    }
    
  } else {
    
  }
  batch_ = batch;
  // @@protoc_insertion_point(field_set_allocated:jaeger.api_v2.PostSpansRequest.batch)
}

// -------------------------------------------------------------------

// PostSpansResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api_v2
}  // namespace jaeger

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_collector_2eproto
