// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_query_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_query_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "model.pb.h"
#include "gogoproto/gogo.pb.h"
#include "google/api/annotations.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_query_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_query_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_query_2eproto;
namespace jaeger {
namespace api_v2 {
class ArchiveTraceRequest;
class ArchiveTraceRequestDefaultTypeInternal;
extern ArchiveTraceRequestDefaultTypeInternal _ArchiveTraceRequest_default_instance_;
class ArchiveTraceResponse;
class ArchiveTraceResponseDefaultTypeInternal;
extern ArchiveTraceResponseDefaultTypeInternal _ArchiveTraceResponse_default_instance_;
class FindTracesRequest;
class FindTracesRequestDefaultTypeInternal;
extern FindTracesRequestDefaultTypeInternal _FindTracesRequest_default_instance_;
class GetDependenciesRequest;
class GetDependenciesRequestDefaultTypeInternal;
extern GetDependenciesRequestDefaultTypeInternal _GetDependenciesRequest_default_instance_;
class GetDependenciesResponse;
class GetDependenciesResponseDefaultTypeInternal;
extern GetDependenciesResponseDefaultTypeInternal _GetDependenciesResponse_default_instance_;
class GetOperationsRequest;
class GetOperationsRequestDefaultTypeInternal;
extern GetOperationsRequestDefaultTypeInternal _GetOperationsRequest_default_instance_;
class GetOperationsResponse;
class GetOperationsResponseDefaultTypeInternal;
extern GetOperationsResponseDefaultTypeInternal _GetOperationsResponse_default_instance_;
class GetServicesRequest;
class GetServicesRequestDefaultTypeInternal;
extern GetServicesRequestDefaultTypeInternal _GetServicesRequest_default_instance_;
class GetServicesResponse;
class GetServicesResponseDefaultTypeInternal;
extern GetServicesResponseDefaultTypeInternal _GetServicesResponse_default_instance_;
class GetTraceRequest;
class GetTraceRequestDefaultTypeInternal;
extern GetTraceRequestDefaultTypeInternal _GetTraceRequest_default_instance_;
class Operation;
class OperationDefaultTypeInternal;
extern OperationDefaultTypeInternal _Operation_default_instance_;
class SpansResponseChunk;
class SpansResponseChunkDefaultTypeInternal;
extern SpansResponseChunkDefaultTypeInternal _SpansResponseChunk_default_instance_;
class TraceQueryParameters;
class TraceQueryParametersDefaultTypeInternal;
extern TraceQueryParametersDefaultTypeInternal _TraceQueryParameters_default_instance_;
class TraceQueryParameters_TagsEntry_DoNotUse;
class TraceQueryParameters_TagsEntry_DoNotUseDefaultTypeInternal;
extern TraceQueryParameters_TagsEntry_DoNotUseDefaultTypeInternal _TraceQueryParameters_TagsEntry_DoNotUse_default_instance_;
}  // namespace api_v2
}  // namespace jaeger
PROTOBUF_NAMESPACE_OPEN
template<> ::jaeger::api_v2::ArchiveTraceRequest* Arena::CreateMaybeMessage<::jaeger::api_v2::ArchiveTraceRequest>(Arena*);
template<> ::jaeger::api_v2::ArchiveTraceResponse* Arena::CreateMaybeMessage<::jaeger::api_v2::ArchiveTraceResponse>(Arena*);
template<> ::jaeger::api_v2::FindTracesRequest* Arena::CreateMaybeMessage<::jaeger::api_v2::FindTracesRequest>(Arena*);
template<> ::jaeger::api_v2::GetDependenciesRequest* Arena::CreateMaybeMessage<::jaeger::api_v2::GetDependenciesRequest>(Arena*);
template<> ::jaeger::api_v2::GetDependenciesResponse* Arena::CreateMaybeMessage<::jaeger::api_v2::GetDependenciesResponse>(Arena*);
template<> ::jaeger::api_v2::GetOperationsRequest* Arena::CreateMaybeMessage<::jaeger::api_v2::GetOperationsRequest>(Arena*);
template<> ::jaeger::api_v2::GetOperationsResponse* Arena::CreateMaybeMessage<::jaeger::api_v2::GetOperationsResponse>(Arena*);
template<> ::jaeger::api_v2::GetServicesRequest* Arena::CreateMaybeMessage<::jaeger::api_v2::GetServicesRequest>(Arena*);
template<> ::jaeger::api_v2::GetServicesResponse* Arena::CreateMaybeMessage<::jaeger::api_v2::GetServicesResponse>(Arena*);
template<> ::jaeger::api_v2::GetTraceRequest* Arena::CreateMaybeMessage<::jaeger::api_v2::GetTraceRequest>(Arena*);
template<> ::jaeger::api_v2::Operation* Arena::CreateMaybeMessage<::jaeger::api_v2::Operation>(Arena*);
template<> ::jaeger::api_v2::SpansResponseChunk* Arena::CreateMaybeMessage<::jaeger::api_v2::SpansResponseChunk>(Arena*);
template<> ::jaeger::api_v2::TraceQueryParameters* Arena::CreateMaybeMessage<::jaeger::api_v2::TraceQueryParameters>(Arena*);
template<> ::jaeger::api_v2::TraceQueryParameters_TagsEntry_DoNotUse* Arena::CreateMaybeMessage<::jaeger::api_v2::TraceQueryParameters_TagsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace jaeger {
namespace api_v2 {

// ===================================================================

class GetTraceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jaeger.api_v2.GetTraceRequest) */ {
 public:
  inline GetTraceRequest() : GetTraceRequest(nullptr) {}
  virtual ~GetTraceRequest();

  GetTraceRequest(const GetTraceRequest& from);
  GetTraceRequest(GetTraceRequest&& from) noexcept
    : GetTraceRequest() {
    *this = ::std::move(from);
  }

  inline GetTraceRequest& operator=(const GetTraceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTraceRequest& operator=(GetTraceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTraceRequest& default_instance();

  static inline const GetTraceRequest* internal_default_instance() {
    return reinterpret_cast<const GetTraceRequest*>(
               &_GetTraceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetTraceRequest& a, GetTraceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTraceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTraceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTraceRequest* New() const final {
    return CreateMaybeMessage<GetTraceRequest>(nullptr);
  }

  GetTraceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTraceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTraceRequest& from);
  void MergeFrom(const GetTraceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTraceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jaeger.api_v2.GetTraceRequest";
  }
  protected:
  explicit GetTraceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_query_2eproto);
    return ::descriptor_table_query_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTraceIdFieldNumber = 1,
    kStartTimeFieldNumber = 2,
    kEndTimeFieldNumber = 3,
  };
  // bytes trace_id = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/jaegertracing/jaeger/model.TraceID", (.gogoproto.customname) = "TraceID"];
  void clear_trace_id();
  const std::string& trace_id() const;
  void set_trace_id(const std::string& value);
  void set_trace_id(std::string&& value);
  void set_trace_id(const char* value);
  void set_trace_id(const void* value, size_t size);
  std::string* mutable_trace_id();
  std::string* release_trace_id();
  void set_allocated_trace_id(std::string* trace_id);
  private:
  const std::string& _internal_trace_id() const;
  void _internal_set_trace_id(const std::string& value);
  std::string* _internal_mutable_trace_id();
  public:

  // .google.protobuf.Timestamp start_time = 2;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Timestamp end_time = 3;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // @@protoc_insertion_point(class_scope:jaeger.api_v2.GetTraceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class SpansResponseChunk PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jaeger.api_v2.SpansResponseChunk) */ {
 public:
  inline SpansResponseChunk() : SpansResponseChunk(nullptr) {}
  virtual ~SpansResponseChunk();

  SpansResponseChunk(const SpansResponseChunk& from);
  SpansResponseChunk(SpansResponseChunk&& from) noexcept
    : SpansResponseChunk() {
    *this = ::std::move(from);
  }

  inline SpansResponseChunk& operator=(const SpansResponseChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpansResponseChunk& operator=(SpansResponseChunk&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpansResponseChunk& default_instance();

  static inline const SpansResponseChunk* internal_default_instance() {
    return reinterpret_cast<const SpansResponseChunk*>(
               &_SpansResponseChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SpansResponseChunk& a, SpansResponseChunk& b) {
    a.Swap(&b);
  }
  inline void Swap(SpansResponseChunk* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpansResponseChunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpansResponseChunk* New() const final {
    return CreateMaybeMessage<SpansResponseChunk>(nullptr);
  }

  SpansResponseChunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpansResponseChunk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpansResponseChunk& from);
  void MergeFrom(const SpansResponseChunk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpansResponseChunk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jaeger.api_v2.SpansResponseChunk";
  }
  protected:
  explicit SpansResponseChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_query_2eproto);
    return ::descriptor_table_query_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpansFieldNumber = 1,
  };
  // repeated .jaeger.api_v2.Span spans = 1 [(.gogoproto.nullable) = false];
  int spans_size() const;
  private:
  int _internal_spans_size() const;
  public:
  void clear_spans();
  ::jaeger::api_v2::Span* mutable_spans(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jaeger::api_v2::Span >*
      mutable_spans();
  private:
  const ::jaeger::api_v2::Span& _internal_spans(int index) const;
  ::jaeger::api_v2::Span* _internal_add_spans();
  public:
  const ::jaeger::api_v2::Span& spans(int index) const;
  ::jaeger::api_v2::Span* add_spans();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jaeger::api_v2::Span >&
      spans() const;

  // @@protoc_insertion_point(class_scope:jaeger.api_v2.SpansResponseChunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jaeger::api_v2::Span > spans_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class ArchiveTraceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jaeger.api_v2.ArchiveTraceRequest) */ {
 public:
  inline ArchiveTraceRequest() : ArchiveTraceRequest(nullptr) {}
  virtual ~ArchiveTraceRequest();

  ArchiveTraceRequest(const ArchiveTraceRequest& from);
  ArchiveTraceRequest(ArchiveTraceRequest&& from) noexcept
    : ArchiveTraceRequest() {
    *this = ::std::move(from);
  }

  inline ArchiveTraceRequest& operator=(const ArchiveTraceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArchiveTraceRequest& operator=(ArchiveTraceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArchiveTraceRequest& default_instance();

  static inline const ArchiveTraceRequest* internal_default_instance() {
    return reinterpret_cast<const ArchiveTraceRequest*>(
               &_ArchiveTraceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ArchiveTraceRequest& a, ArchiveTraceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ArchiveTraceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArchiveTraceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArchiveTraceRequest* New() const final {
    return CreateMaybeMessage<ArchiveTraceRequest>(nullptr);
  }

  ArchiveTraceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArchiveTraceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArchiveTraceRequest& from);
  void MergeFrom(const ArchiveTraceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArchiveTraceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jaeger.api_v2.ArchiveTraceRequest";
  }
  protected:
  explicit ArchiveTraceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_query_2eproto);
    return ::descriptor_table_query_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTraceIdFieldNumber = 1,
    kStartTimeFieldNumber = 2,
    kEndTimeFieldNumber = 3,
  };
  // bytes trace_id = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/jaegertracing/jaeger/model.TraceID", (.gogoproto.customname) = "TraceID"];
  void clear_trace_id();
  const std::string& trace_id() const;
  void set_trace_id(const std::string& value);
  void set_trace_id(std::string&& value);
  void set_trace_id(const char* value);
  void set_trace_id(const void* value, size_t size);
  std::string* mutable_trace_id();
  std::string* release_trace_id();
  void set_allocated_trace_id(std::string* trace_id);
  private:
  const std::string& _internal_trace_id() const;
  void _internal_set_trace_id(const std::string& value);
  std::string* _internal_mutable_trace_id();
  public:

  // .google.protobuf.Timestamp start_time = 2;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Timestamp end_time = 3;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // @@protoc_insertion_point(class_scope:jaeger.api_v2.ArchiveTraceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class ArchiveTraceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jaeger.api_v2.ArchiveTraceResponse) */ {
 public:
  inline ArchiveTraceResponse() : ArchiveTraceResponse(nullptr) {}
  virtual ~ArchiveTraceResponse();

  ArchiveTraceResponse(const ArchiveTraceResponse& from);
  ArchiveTraceResponse(ArchiveTraceResponse&& from) noexcept
    : ArchiveTraceResponse() {
    *this = ::std::move(from);
  }

  inline ArchiveTraceResponse& operator=(const ArchiveTraceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArchiveTraceResponse& operator=(ArchiveTraceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArchiveTraceResponse& default_instance();

  static inline const ArchiveTraceResponse* internal_default_instance() {
    return reinterpret_cast<const ArchiveTraceResponse*>(
               &_ArchiveTraceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ArchiveTraceResponse& a, ArchiveTraceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ArchiveTraceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArchiveTraceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArchiveTraceResponse* New() const final {
    return CreateMaybeMessage<ArchiveTraceResponse>(nullptr);
  }

  ArchiveTraceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArchiveTraceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArchiveTraceResponse& from);
  void MergeFrom(const ArchiveTraceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArchiveTraceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jaeger.api_v2.ArchiveTraceResponse";
  }
  protected:
  explicit ArchiveTraceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_query_2eproto);
    return ::descriptor_table_query_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:jaeger.api_v2.ArchiveTraceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class TraceQueryParameters_TagsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TraceQueryParameters_TagsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TraceQueryParameters_TagsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  TraceQueryParameters_TagsEntry_DoNotUse();
  explicit TraceQueryParameters_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TraceQueryParameters_TagsEntry_DoNotUse& other);
  static const TraceQueryParameters_TagsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TraceQueryParameters_TagsEntry_DoNotUse*>(&_TraceQueryParameters_TagsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "jaeger.api_v2.TraceQueryParameters.TagsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "jaeger.api_v2.TraceQueryParameters.TagsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_query_2eproto);
    return ::descriptor_table_query_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class TraceQueryParameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jaeger.api_v2.TraceQueryParameters) */ {
 public:
  inline TraceQueryParameters() : TraceQueryParameters(nullptr) {}
  virtual ~TraceQueryParameters();

  TraceQueryParameters(const TraceQueryParameters& from);
  TraceQueryParameters(TraceQueryParameters&& from) noexcept
    : TraceQueryParameters() {
    *this = ::std::move(from);
  }

  inline TraceQueryParameters& operator=(const TraceQueryParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceQueryParameters& operator=(TraceQueryParameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TraceQueryParameters& default_instance();

  static inline const TraceQueryParameters* internal_default_instance() {
    return reinterpret_cast<const TraceQueryParameters*>(
               &_TraceQueryParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TraceQueryParameters& a, TraceQueryParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceQueryParameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceQueryParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TraceQueryParameters* New() const final {
    return CreateMaybeMessage<TraceQueryParameters>(nullptr);
  }

  TraceQueryParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TraceQueryParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TraceQueryParameters& from);
  void MergeFrom(const TraceQueryParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceQueryParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jaeger.api_v2.TraceQueryParameters";
  }
  protected:
  explicit TraceQueryParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_query_2eproto);
    return ::descriptor_table_query_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 3,
    kServiceNameFieldNumber = 1,
    kOperationNameFieldNumber = 2,
    kStartTimeMinFieldNumber = 4,
    kStartTimeMaxFieldNumber = 5,
    kDurationMinFieldNumber = 6,
    kDurationMaxFieldNumber = 7,
    kSearchDepthFieldNumber = 8,
  };
  // map<string, string> tags = 3;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_tags();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_tags();

  // string service_name = 1;
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // string operation_name = 2;
  void clear_operation_name();
  const std::string& operation_name() const;
  void set_operation_name(const std::string& value);
  void set_operation_name(std::string&& value);
  void set_operation_name(const char* value);
  void set_operation_name(const char* value, size_t size);
  std::string* mutable_operation_name();
  std::string* release_operation_name();
  void set_allocated_operation_name(std::string* operation_name);
  private:
  const std::string& _internal_operation_name() const;
  void _internal_set_operation_name(const std::string& value);
  std::string* _internal_mutable_operation_name();
  public:

  // .google.protobuf.Timestamp start_time_min = 4 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_start_time_min() const;
  private:
  bool _internal_has_start_time_min() const;
  public:
  void clear_start_time_min();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_time_min() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time_min();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time_min();
  void set_allocated_start_time_min(PROTOBUF_NAMESPACE_ID::Timestamp* start_time_min);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time_min() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time_min();
  public:
  void unsafe_arena_set_allocated_start_time_min(
      PROTOBUF_NAMESPACE_ID::Timestamp* start_time_min);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time_min();

  // .google.protobuf.Timestamp start_time_max = 5 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_start_time_max() const;
  private:
  bool _internal_has_start_time_max() const;
  public:
  void clear_start_time_max();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_time_max() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time_max();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time_max();
  void set_allocated_start_time_max(PROTOBUF_NAMESPACE_ID::Timestamp* start_time_max);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time_max() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time_max();
  public:
  void unsafe_arena_set_allocated_start_time_max(
      PROTOBUF_NAMESPACE_ID::Timestamp* start_time_max);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time_max();

  // .google.protobuf.Duration duration_min = 6 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  bool has_duration_min() const;
  private:
  bool _internal_has_duration_min() const;
  public:
  void clear_duration_min();
  const PROTOBUF_NAMESPACE_ID::Duration& duration_min() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_duration_min();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_duration_min();
  void set_allocated_duration_min(PROTOBUF_NAMESPACE_ID::Duration* duration_min);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_duration_min() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_duration_min();
  public:
  void unsafe_arena_set_allocated_duration_min(
      PROTOBUF_NAMESPACE_ID::Duration* duration_min);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_duration_min();

  // .google.protobuf.Duration duration_max = 7 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  bool has_duration_max() const;
  private:
  bool _internal_has_duration_max() const;
  public:
  void clear_duration_max();
  const PROTOBUF_NAMESPACE_ID::Duration& duration_max() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_duration_max();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_duration_max();
  void set_allocated_duration_max(PROTOBUF_NAMESPACE_ID::Duration* duration_max);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_duration_max() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_duration_max();
  public:
  void unsafe_arena_set_allocated_duration_max(
      PROTOBUF_NAMESPACE_ID::Duration* duration_max);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_duration_max();

  // int32 search_depth = 8;
  void clear_search_depth();
  ::PROTOBUF_NAMESPACE_ID::int32 search_depth() const;
  void set_search_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_search_depth() const;
  void _internal_set_search_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:jaeger.api_v2.TraceQueryParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      TraceQueryParameters_TagsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operation_name_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_time_min_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_time_max_;
  PROTOBUF_NAMESPACE_ID::Duration* duration_min_;
  PROTOBUF_NAMESPACE_ID::Duration* duration_max_;
  ::PROTOBUF_NAMESPACE_ID::int32 search_depth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class FindTracesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jaeger.api_v2.FindTracesRequest) */ {
 public:
  inline FindTracesRequest() : FindTracesRequest(nullptr) {}
  virtual ~FindTracesRequest();

  FindTracesRequest(const FindTracesRequest& from);
  FindTracesRequest(FindTracesRequest&& from) noexcept
    : FindTracesRequest() {
    *this = ::std::move(from);
  }

  inline FindTracesRequest& operator=(const FindTracesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindTracesRequest& operator=(FindTracesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindTracesRequest& default_instance();

  static inline const FindTracesRequest* internal_default_instance() {
    return reinterpret_cast<const FindTracesRequest*>(
               &_FindTracesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FindTracesRequest& a, FindTracesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindTracesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindTracesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindTracesRequest* New() const final {
    return CreateMaybeMessage<FindTracesRequest>(nullptr);
  }

  FindTracesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindTracesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindTracesRequest& from);
  void MergeFrom(const FindTracesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindTracesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jaeger.api_v2.FindTracesRequest";
  }
  protected:
  explicit FindTracesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_query_2eproto);
    return ::descriptor_table_query_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // .jaeger.api_v2.TraceQueryParameters query = 1;
  bool has_query() const;
  private:
  bool _internal_has_query() const;
  public:
  void clear_query();
  const ::jaeger::api_v2::TraceQueryParameters& query() const;
  ::jaeger::api_v2::TraceQueryParameters* release_query();
  ::jaeger::api_v2::TraceQueryParameters* mutable_query();
  void set_allocated_query(::jaeger::api_v2::TraceQueryParameters* query);
  private:
  const ::jaeger::api_v2::TraceQueryParameters& _internal_query() const;
  ::jaeger::api_v2::TraceQueryParameters* _internal_mutable_query();
  public:
  void unsafe_arena_set_allocated_query(
      ::jaeger::api_v2::TraceQueryParameters* query);
  ::jaeger::api_v2::TraceQueryParameters* unsafe_arena_release_query();

  // @@protoc_insertion_point(class_scope:jaeger.api_v2.FindTracesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::jaeger::api_v2::TraceQueryParameters* query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class GetServicesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jaeger.api_v2.GetServicesRequest) */ {
 public:
  inline GetServicesRequest() : GetServicesRequest(nullptr) {}
  virtual ~GetServicesRequest();

  GetServicesRequest(const GetServicesRequest& from);
  GetServicesRequest(GetServicesRequest&& from) noexcept
    : GetServicesRequest() {
    *this = ::std::move(from);
  }

  inline GetServicesRequest& operator=(const GetServicesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServicesRequest& operator=(GetServicesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServicesRequest& default_instance();

  static inline const GetServicesRequest* internal_default_instance() {
    return reinterpret_cast<const GetServicesRequest*>(
               &_GetServicesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetServicesRequest& a, GetServicesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServicesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServicesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServicesRequest* New() const final {
    return CreateMaybeMessage<GetServicesRequest>(nullptr);
  }

  GetServicesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServicesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServicesRequest& from);
  void MergeFrom(const GetServicesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServicesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jaeger.api_v2.GetServicesRequest";
  }
  protected:
  explicit GetServicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_query_2eproto);
    return ::descriptor_table_query_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:jaeger.api_v2.GetServicesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class GetServicesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jaeger.api_v2.GetServicesResponse) */ {
 public:
  inline GetServicesResponse() : GetServicesResponse(nullptr) {}
  virtual ~GetServicesResponse();

  GetServicesResponse(const GetServicesResponse& from);
  GetServicesResponse(GetServicesResponse&& from) noexcept
    : GetServicesResponse() {
    *this = ::std::move(from);
  }

  inline GetServicesResponse& operator=(const GetServicesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServicesResponse& operator=(GetServicesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServicesResponse& default_instance();

  static inline const GetServicesResponse* internal_default_instance() {
    return reinterpret_cast<const GetServicesResponse*>(
               &_GetServicesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetServicesResponse& a, GetServicesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServicesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServicesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServicesResponse* New() const final {
    return CreateMaybeMessage<GetServicesResponse>(nullptr);
  }

  GetServicesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServicesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServicesResponse& from);
  void MergeFrom(const GetServicesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServicesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jaeger.api_v2.GetServicesResponse";
  }
  protected:
  explicit GetServicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_query_2eproto);
    return ::descriptor_table_query_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServicesFieldNumber = 1,
  };
  // repeated string services = 1;
  int services_size() const;
  private:
  int _internal_services_size() const;
  public:
  void clear_services();
  const std::string& services(int index) const;
  std::string* mutable_services(int index);
  void set_services(int index, const std::string& value);
  void set_services(int index, std::string&& value);
  void set_services(int index, const char* value);
  void set_services(int index, const char* value, size_t size);
  std::string* add_services();
  void add_services(const std::string& value);
  void add_services(std::string&& value);
  void add_services(const char* value);
  void add_services(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& services() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_services();
  private:
  const std::string& _internal_services(int index) const;
  std::string* _internal_add_services();
  public:

  // @@protoc_insertion_point(class_scope:jaeger.api_v2.GetServicesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> services_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class GetOperationsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jaeger.api_v2.GetOperationsRequest) */ {
 public:
  inline GetOperationsRequest() : GetOperationsRequest(nullptr) {}
  virtual ~GetOperationsRequest();

  GetOperationsRequest(const GetOperationsRequest& from);
  GetOperationsRequest(GetOperationsRequest&& from) noexcept
    : GetOperationsRequest() {
    *this = ::std::move(from);
  }

  inline GetOperationsRequest& operator=(const GetOperationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOperationsRequest& operator=(GetOperationsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOperationsRequest& default_instance();

  static inline const GetOperationsRequest* internal_default_instance() {
    return reinterpret_cast<const GetOperationsRequest*>(
               &_GetOperationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetOperationsRequest& a, GetOperationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOperationsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOperationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOperationsRequest* New() const final {
    return CreateMaybeMessage<GetOperationsRequest>(nullptr);
  }

  GetOperationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOperationsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOperationsRequest& from);
  void MergeFrom(const GetOperationsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOperationsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jaeger.api_v2.GetOperationsRequest";
  }
  protected:
  explicit GetOperationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_query_2eproto);
    return ::descriptor_table_query_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceFieldNumber = 1,
    kSpanKindFieldNumber = 2,
  };
  // string service = 1;
  void clear_service();
  const std::string& service() const;
  void set_service(const std::string& value);
  void set_service(std::string&& value);
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  std::string* mutable_service();
  std::string* release_service();
  void set_allocated_service(std::string* service);
  private:
  const std::string& _internal_service() const;
  void _internal_set_service(const std::string& value);
  std::string* _internal_mutable_service();
  public:

  // string span_kind = 2;
  void clear_span_kind();
  const std::string& span_kind() const;
  void set_span_kind(const std::string& value);
  void set_span_kind(std::string&& value);
  void set_span_kind(const char* value);
  void set_span_kind(const char* value, size_t size);
  std::string* mutable_span_kind();
  std::string* release_span_kind();
  void set_allocated_span_kind(std::string* span_kind);
  private:
  const std::string& _internal_span_kind() const;
  void _internal_set_span_kind(const std::string& value);
  std::string* _internal_mutable_span_kind();
  public:

  // @@protoc_insertion_point(class_scope:jaeger.api_v2.GetOperationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr span_kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class Operation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jaeger.api_v2.Operation) */ {
 public:
  inline Operation() : Operation(nullptr) {}
  virtual ~Operation();

  Operation(const Operation& from);
  Operation(Operation&& from) noexcept
    : Operation() {
    *this = ::std::move(from);
  }

  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Operation& operator=(Operation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Operation& default_instance();

  static inline const Operation* internal_default_instance() {
    return reinterpret_cast<const Operation*>(
               &_Operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Operation& a, Operation& b) {
    a.Swap(&b);
  }
  inline void Swap(Operation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Operation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Operation* New() const final {
    return CreateMaybeMessage<Operation>(nullptr);
  }

  Operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Operation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Operation& from);
  void MergeFrom(const Operation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jaeger.api_v2.Operation";
  }
  protected:
  explicit Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_query_2eproto);
    return ::descriptor_table_query_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSpanKindFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string span_kind = 2;
  void clear_span_kind();
  const std::string& span_kind() const;
  void set_span_kind(const std::string& value);
  void set_span_kind(std::string&& value);
  void set_span_kind(const char* value);
  void set_span_kind(const char* value, size_t size);
  std::string* mutable_span_kind();
  std::string* release_span_kind();
  void set_allocated_span_kind(std::string* span_kind);
  private:
  const std::string& _internal_span_kind() const;
  void _internal_set_span_kind(const std::string& value);
  std::string* _internal_mutable_span_kind();
  public:

  // @@protoc_insertion_point(class_scope:jaeger.api_v2.Operation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr span_kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class GetOperationsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jaeger.api_v2.GetOperationsResponse) */ {
 public:
  inline GetOperationsResponse() : GetOperationsResponse(nullptr) {}
  virtual ~GetOperationsResponse();

  GetOperationsResponse(const GetOperationsResponse& from);
  GetOperationsResponse(GetOperationsResponse&& from) noexcept
    : GetOperationsResponse() {
    *this = ::std::move(from);
  }

  inline GetOperationsResponse& operator=(const GetOperationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOperationsResponse& operator=(GetOperationsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOperationsResponse& default_instance();

  static inline const GetOperationsResponse* internal_default_instance() {
    return reinterpret_cast<const GetOperationsResponse*>(
               &_GetOperationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetOperationsResponse& a, GetOperationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOperationsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOperationsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOperationsResponse* New() const final {
    return CreateMaybeMessage<GetOperationsResponse>(nullptr);
  }

  GetOperationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOperationsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOperationsResponse& from);
  void MergeFrom(const GetOperationsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOperationsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jaeger.api_v2.GetOperationsResponse";
  }
  protected:
  explicit GetOperationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_query_2eproto);
    return ::descriptor_table_query_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationNamesFieldNumber = 1,
    kOperationsFieldNumber = 2,
  };
  // repeated string operationNames = 1;
  int operationnames_size() const;
  private:
  int _internal_operationnames_size() const;
  public:
  void clear_operationnames();
  const std::string& operationnames(int index) const;
  std::string* mutable_operationnames(int index);
  void set_operationnames(int index, const std::string& value);
  void set_operationnames(int index, std::string&& value);
  void set_operationnames(int index, const char* value);
  void set_operationnames(int index, const char* value, size_t size);
  std::string* add_operationnames();
  void add_operationnames(const std::string& value);
  void add_operationnames(std::string&& value);
  void add_operationnames(const char* value);
  void add_operationnames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& operationnames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_operationnames();
  private:
  const std::string& _internal_operationnames(int index) const;
  std::string* _internal_add_operationnames();
  public:

  // repeated .jaeger.api_v2.Operation operations = 2;
  int operations_size() const;
  private:
  int _internal_operations_size() const;
  public:
  void clear_operations();
  ::jaeger::api_v2::Operation* mutable_operations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jaeger::api_v2::Operation >*
      mutable_operations();
  private:
  const ::jaeger::api_v2::Operation& _internal_operations(int index) const;
  ::jaeger::api_v2::Operation* _internal_add_operations();
  public:
  const ::jaeger::api_v2::Operation& operations(int index) const;
  ::jaeger::api_v2::Operation* add_operations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jaeger::api_v2::Operation >&
      operations() const;

  // @@protoc_insertion_point(class_scope:jaeger.api_v2.GetOperationsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> operationnames_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jaeger::api_v2::Operation > operations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class GetDependenciesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jaeger.api_v2.GetDependenciesRequest) */ {
 public:
  inline GetDependenciesRequest() : GetDependenciesRequest(nullptr) {}
  virtual ~GetDependenciesRequest();

  GetDependenciesRequest(const GetDependenciesRequest& from);
  GetDependenciesRequest(GetDependenciesRequest&& from) noexcept
    : GetDependenciesRequest() {
    *this = ::std::move(from);
  }

  inline GetDependenciesRequest& operator=(const GetDependenciesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDependenciesRequest& operator=(GetDependenciesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDependenciesRequest& default_instance();

  static inline const GetDependenciesRequest* internal_default_instance() {
    return reinterpret_cast<const GetDependenciesRequest*>(
               &_GetDependenciesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetDependenciesRequest& a, GetDependenciesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDependenciesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDependenciesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDependenciesRequest* New() const final {
    return CreateMaybeMessage<GetDependenciesRequest>(nullptr);
  }

  GetDependenciesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDependenciesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDependenciesRequest& from);
  void MergeFrom(const GetDependenciesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDependenciesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jaeger.api_v2.GetDependenciesRequest";
  }
  protected:
  explicit GetDependenciesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_query_2eproto);
    return ::descriptor_table_query_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartTimeFieldNumber = 1,
    kEndTimeFieldNumber = 2,
  };
  // .google.protobuf.Timestamp start_time = 1 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Timestamp end_time = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // @@protoc_insertion_point(class_scope:jaeger.api_v2.GetDependenciesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class GetDependenciesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jaeger.api_v2.GetDependenciesResponse) */ {
 public:
  inline GetDependenciesResponse() : GetDependenciesResponse(nullptr) {}
  virtual ~GetDependenciesResponse();

  GetDependenciesResponse(const GetDependenciesResponse& from);
  GetDependenciesResponse(GetDependenciesResponse&& from) noexcept
    : GetDependenciesResponse() {
    *this = ::std::move(from);
  }

  inline GetDependenciesResponse& operator=(const GetDependenciesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDependenciesResponse& operator=(GetDependenciesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDependenciesResponse& default_instance();

  static inline const GetDependenciesResponse* internal_default_instance() {
    return reinterpret_cast<const GetDependenciesResponse*>(
               &_GetDependenciesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetDependenciesResponse& a, GetDependenciesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDependenciesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDependenciesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDependenciesResponse* New() const final {
    return CreateMaybeMessage<GetDependenciesResponse>(nullptr);
  }

  GetDependenciesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDependenciesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDependenciesResponse& from);
  void MergeFrom(const GetDependenciesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDependenciesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jaeger.api_v2.GetDependenciesResponse";
  }
  protected:
  explicit GetDependenciesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_query_2eproto);
    return ::descriptor_table_query_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDependenciesFieldNumber = 1,
  };
  // repeated .jaeger.api_v2.DependencyLink dependencies = 1 [(.gogoproto.nullable) = false];
  int dependencies_size() const;
  private:
  int _internal_dependencies_size() const;
  public:
  void clear_dependencies();
  ::jaeger::api_v2::DependencyLink* mutable_dependencies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jaeger::api_v2::DependencyLink >*
      mutable_dependencies();
  private:
  const ::jaeger::api_v2::DependencyLink& _internal_dependencies(int index) const;
  ::jaeger::api_v2::DependencyLink* _internal_add_dependencies();
  public:
  const ::jaeger::api_v2::DependencyLink& dependencies(int index) const;
  ::jaeger::api_v2::DependencyLink* add_dependencies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jaeger::api_v2::DependencyLink >&
      dependencies() const;

  // @@protoc_insertion_point(class_scope:jaeger.api_v2.GetDependenciesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jaeger::api_v2::DependencyLink > dependencies_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetTraceRequest

// bytes trace_id = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/jaegertracing/jaeger/model.TraceID", (.gogoproto.customname) = "TraceID"];
inline void GetTraceRequest::clear_trace_id() {
  trace_id_.ClearToEmpty();
}
inline const std::string& GetTraceRequest::trace_id() const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.GetTraceRequest.trace_id)
  return _internal_trace_id();
}
inline void GetTraceRequest::set_trace_id(const std::string& value) {
  _internal_set_trace_id(value);
  // @@protoc_insertion_point(field_set:jaeger.api_v2.GetTraceRequest.trace_id)
}
inline std::string* GetTraceRequest::mutable_trace_id() {
  // @@protoc_insertion_point(field_mutable:jaeger.api_v2.GetTraceRequest.trace_id)
  return _internal_mutable_trace_id();
}
inline const std::string& GetTraceRequest::_internal_trace_id() const {
  return trace_id_.Get();
}
inline void GetTraceRequest::_internal_set_trace_id(const std::string& value) {
  
  trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetTraceRequest::set_trace_id(std::string&& value) {
  
  trace_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jaeger.api_v2.GetTraceRequest.trace_id)
}
inline void GetTraceRequest::set_trace_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:jaeger.api_v2.GetTraceRequest.trace_id)
}
inline void GetTraceRequest::set_trace_id(const void* value,
    size_t size) {
  
  trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jaeger.api_v2.GetTraceRequest.trace_id)
}
inline std::string* GetTraceRequest::_internal_mutable_trace_id() {
  
  return trace_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetTraceRequest::release_trace_id() {
  // @@protoc_insertion_point(field_release:jaeger.api_v2.GetTraceRequest.trace_id)
  return trace_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTraceRequest::set_allocated_trace_id(std::string* trace_id) {
  if (trace_id != nullptr) {
    
  } else {
    
  }
  trace_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trace_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jaeger.api_v2.GetTraceRequest.trace_id)
}

// .google.protobuf.Timestamp start_time = 2;
inline bool GetTraceRequest::_internal_has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline bool GetTraceRequest::has_start_time() const {
  return _internal_has_start_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetTraceRequest::_internal_start_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetTraceRequest::start_time() const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.GetTraceRequest.start_time)
  return _internal_start_time();
}
inline void GetTraceRequest::unsafe_arena_set_allocated_start_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jaeger.api_v2.GetTraceRequest.start_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetTraceRequest::release_start_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetTraceRequest::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:jaeger.api_v2.GetTraceRequest.start_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetTraceRequest::_internal_mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    start_time_ = p;
  }
  return start_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetTraceRequest::mutable_start_time() {
  // @@protoc_insertion_point(field_mutable:jaeger.api_v2.GetTraceRequest.start_time)
  return _internal_mutable_start_time();
}
inline void GetTraceRequest::set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:jaeger.api_v2.GetTraceRequest.start_time)
}

// .google.protobuf.Timestamp end_time = 3;
inline bool GetTraceRequest::_internal_has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline bool GetTraceRequest::has_end_time() const {
  return _internal_has_end_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetTraceRequest::_internal_end_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetTraceRequest::end_time() const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.GetTraceRequest.end_time)
  return _internal_end_time();
}
inline void GetTraceRequest::unsafe_arena_set_allocated_end_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jaeger.api_v2.GetTraceRequest.end_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetTraceRequest::release_end_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetTraceRequest::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:jaeger.api_v2.GetTraceRequest.end_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetTraceRequest::_internal_mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    end_time_ = p;
  }
  return end_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetTraceRequest::mutable_end_time() {
  // @@protoc_insertion_point(field_mutable:jaeger.api_v2.GetTraceRequest.end_time)
  return _internal_mutable_end_time();
}
inline void GetTraceRequest::set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:jaeger.api_v2.GetTraceRequest.end_time)
}

// -------------------------------------------------------------------

// SpansResponseChunk

// repeated .jaeger.api_v2.Span spans = 1 [(.gogoproto.nullable) = false];
inline int SpansResponseChunk::_internal_spans_size() const {
  return spans_.size();
}
inline int SpansResponseChunk::spans_size() const {
  return _internal_spans_size();
}
inline ::jaeger::api_v2::Span* SpansResponseChunk::mutable_spans(int index) {
  // @@protoc_insertion_point(field_mutable:jaeger.api_v2.SpansResponseChunk.spans)
  return spans_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jaeger::api_v2::Span >*
SpansResponseChunk::mutable_spans() {
  // @@protoc_insertion_point(field_mutable_list:jaeger.api_v2.SpansResponseChunk.spans)
  return &spans_;
}
inline const ::jaeger::api_v2::Span& SpansResponseChunk::_internal_spans(int index) const {
  return spans_.Get(index);
}
inline const ::jaeger::api_v2::Span& SpansResponseChunk::spans(int index) const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.SpansResponseChunk.spans)
  return _internal_spans(index);
}
inline ::jaeger::api_v2::Span* SpansResponseChunk::_internal_add_spans() {
  return spans_.Add();
}
inline ::jaeger::api_v2::Span* SpansResponseChunk::add_spans() {
  // @@protoc_insertion_point(field_add:jaeger.api_v2.SpansResponseChunk.spans)
  return _internal_add_spans();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jaeger::api_v2::Span >&
SpansResponseChunk::spans() const {
  // @@protoc_insertion_point(field_list:jaeger.api_v2.SpansResponseChunk.spans)
  return spans_;
}

// -------------------------------------------------------------------

// ArchiveTraceRequest

// bytes trace_id = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/jaegertracing/jaeger/model.TraceID", (.gogoproto.customname) = "TraceID"];
inline void ArchiveTraceRequest::clear_trace_id() {
  trace_id_.ClearToEmpty();
}
inline const std::string& ArchiveTraceRequest::trace_id() const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.ArchiveTraceRequest.trace_id)
  return _internal_trace_id();
}
inline void ArchiveTraceRequest::set_trace_id(const std::string& value) {
  _internal_set_trace_id(value);
  // @@protoc_insertion_point(field_set:jaeger.api_v2.ArchiveTraceRequest.trace_id)
}
inline std::string* ArchiveTraceRequest::mutable_trace_id() {
  // @@protoc_insertion_point(field_mutable:jaeger.api_v2.ArchiveTraceRequest.trace_id)
  return _internal_mutable_trace_id();
}
inline const std::string& ArchiveTraceRequest::_internal_trace_id() const {
  return trace_id_.Get();
}
inline void ArchiveTraceRequest::_internal_set_trace_id(const std::string& value) {
  
  trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ArchiveTraceRequest::set_trace_id(std::string&& value) {
  
  trace_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jaeger.api_v2.ArchiveTraceRequest.trace_id)
}
inline void ArchiveTraceRequest::set_trace_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:jaeger.api_v2.ArchiveTraceRequest.trace_id)
}
inline void ArchiveTraceRequest::set_trace_id(const void* value,
    size_t size) {
  
  trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jaeger.api_v2.ArchiveTraceRequest.trace_id)
}
inline std::string* ArchiveTraceRequest::_internal_mutable_trace_id() {
  
  return trace_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ArchiveTraceRequest::release_trace_id() {
  // @@protoc_insertion_point(field_release:jaeger.api_v2.ArchiveTraceRequest.trace_id)
  return trace_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ArchiveTraceRequest::set_allocated_trace_id(std::string* trace_id) {
  if (trace_id != nullptr) {
    
  } else {
    
  }
  trace_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trace_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jaeger.api_v2.ArchiveTraceRequest.trace_id)
}

// .google.protobuf.Timestamp start_time = 2;
inline bool ArchiveTraceRequest::_internal_has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline bool ArchiveTraceRequest::has_start_time() const {
  return _internal_has_start_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ArchiveTraceRequest::_internal_start_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ArchiveTraceRequest::start_time() const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.ArchiveTraceRequest.start_time)
  return _internal_start_time();
}
inline void ArchiveTraceRequest::unsafe_arena_set_allocated_start_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jaeger.api_v2.ArchiveTraceRequest.start_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ArchiveTraceRequest::release_start_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ArchiveTraceRequest::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:jaeger.api_v2.ArchiveTraceRequest.start_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ArchiveTraceRequest::_internal_mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    start_time_ = p;
  }
  return start_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ArchiveTraceRequest::mutable_start_time() {
  // @@protoc_insertion_point(field_mutable:jaeger.api_v2.ArchiveTraceRequest.start_time)
  return _internal_mutable_start_time();
}
inline void ArchiveTraceRequest::set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:jaeger.api_v2.ArchiveTraceRequest.start_time)
}

// .google.protobuf.Timestamp end_time = 3;
inline bool ArchiveTraceRequest::_internal_has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline bool ArchiveTraceRequest::has_end_time() const {
  return _internal_has_end_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ArchiveTraceRequest::_internal_end_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ArchiveTraceRequest::end_time() const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.ArchiveTraceRequest.end_time)
  return _internal_end_time();
}
inline void ArchiveTraceRequest::unsafe_arena_set_allocated_end_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jaeger.api_v2.ArchiveTraceRequest.end_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ArchiveTraceRequest::release_end_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ArchiveTraceRequest::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:jaeger.api_v2.ArchiveTraceRequest.end_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ArchiveTraceRequest::_internal_mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    end_time_ = p;
  }
  return end_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ArchiveTraceRequest::mutable_end_time() {
  // @@protoc_insertion_point(field_mutable:jaeger.api_v2.ArchiveTraceRequest.end_time)
  return _internal_mutable_end_time();
}
inline void ArchiveTraceRequest::set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:jaeger.api_v2.ArchiveTraceRequest.end_time)
}

// -------------------------------------------------------------------

// ArchiveTraceResponse

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TraceQueryParameters

// string service_name = 1;
inline void TraceQueryParameters::clear_service_name() {
  service_name_.ClearToEmpty();
}
inline const std::string& TraceQueryParameters::service_name() const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.TraceQueryParameters.service_name)
  return _internal_service_name();
}
inline void TraceQueryParameters::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:jaeger.api_v2.TraceQueryParameters.service_name)
}
inline std::string* TraceQueryParameters::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:jaeger.api_v2.TraceQueryParameters.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& TraceQueryParameters::_internal_service_name() const {
  return service_name_.Get();
}
inline void TraceQueryParameters::_internal_set_service_name(const std::string& value) {
  
  service_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TraceQueryParameters::set_service_name(std::string&& value) {
  
  service_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jaeger.api_v2.TraceQueryParameters.service_name)
}
inline void TraceQueryParameters::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:jaeger.api_v2.TraceQueryParameters.service_name)
}
inline void TraceQueryParameters::set_service_name(const char* value,
    size_t size) {
  
  service_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jaeger.api_v2.TraceQueryParameters.service_name)
}
inline std::string* TraceQueryParameters::_internal_mutable_service_name() {
  
  return service_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TraceQueryParameters::release_service_name() {
  // @@protoc_insertion_point(field_release:jaeger.api_v2.TraceQueryParameters.service_name)
  return service_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TraceQueryParameters::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jaeger.api_v2.TraceQueryParameters.service_name)
}

// string operation_name = 2;
inline void TraceQueryParameters::clear_operation_name() {
  operation_name_.ClearToEmpty();
}
inline const std::string& TraceQueryParameters::operation_name() const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.TraceQueryParameters.operation_name)
  return _internal_operation_name();
}
inline void TraceQueryParameters::set_operation_name(const std::string& value) {
  _internal_set_operation_name(value);
  // @@protoc_insertion_point(field_set:jaeger.api_v2.TraceQueryParameters.operation_name)
}
inline std::string* TraceQueryParameters::mutable_operation_name() {
  // @@protoc_insertion_point(field_mutable:jaeger.api_v2.TraceQueryParameters.operation_name)
  return _internal_mutable_operation_name();
}
inline const std::string& TraceQueryParameters::_internal_operation_name() const {
  return operation_name_.Get();
}
inline void TraceQueryParameters::_internal_set_operation_name(const std::string& value) {
  
  operation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TraceQueryParameters::set_operation_name(std::string&& value) {
  
  operation_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jaeger.api_v2.TraceQueryParameters.operation_name)
}
inline void TraceQueryParameters::set_operation_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  operation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:jaeger.api_v2.TraceQueryParameters.operation_name)
}
inline void TraceQueryParameters::set_operation_name(const char* value,
    size_t size) {
  
  operation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jaeger.api_v2.TraceQueryParameters.operation_name)
}
inline std::string* TraceQueryParameters::_internal_mutable_operation_name() {
  
  return operation_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TraceQueryParameters::release_operation_name() {
  // @@protoc_insertion_point(field_release:jaeger.api_v2.TraceQueryParameters.operation_name)
  return operation_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TraceQueryParameters::set_allocated_operation_name(std::string* operation_name) {
  if (operation_name != nullptr) {
    
  } else {
    
  }
  operation_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operation_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jaeger.api_v2.TraceQueryParameters.operation_name)
}

// map<string, string> tags = 3;
inline int TraceQueryParameters::_internal_tags_size() const {
  return tags_.size();
}
inline int TraceQueryParameters::tags_size() const {
  return _internal_tags_size();
}
inline void TraceQueryParameters::clear_tags() {
  tags_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TraceQueryParameters::_internal_tags() const {
  return tags_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TraceQueryParameters::tags() const {
  // @@protoc_insertion_point(field_map:jaeger.api_v2.TraceQueryParameters.tags)
  return _internal_tags();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TraceQueryParameters::_internal_mutable_tags() {
  return tags_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TraceQueryParameters::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:jaeger.api_v2.TraceQueryParameters.tags)
  return _internal_mutable_tags();
}

// .google.protobuf.Timestamp start_time_min = 4 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool TraceQueryParameters::_internal_has_start_time_min() const {
  return this != internal_default_instance() && start_time_min_ != nullptr;
}
inline bool TraceQueryParameters::has_start_time_min() const {
  return _internal_has_start_time_min();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TraceQueryParameters::_internal_start_time_min() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_time_min_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TraceQueryParameters::start_time_min() const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.TraceQueryParameters.start_time_min)
  return _internal_start_time_min();
}
inline void TraceQueryParameters::unsafe_arena_set_allocated_start_time_min(
    PROTOBUF_NAMESPACE_ID::Timestamp* start_time_min) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_min_);
  }
  start_time_min_ = start_time_min;
  if (start_time_min) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jaeger.api_v2.TraceQueryParameters.start_time_min)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TraceQueryParameters::release_start_time_min() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_min_;
  start_time_min_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TraceQueryParameters::unsafe_arena_release_start_time_min() {
  // @@protoc_insertion_point(field_release:jaeger.api_v2.TraceQueryParameters.start_time_min)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_min_;
  start_time_min_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TraceQueryParameters::_internal_mutable_start_time_min() {
  
  if (start_time_min_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    start_time_min_ = p;
  }
  return start_time_min_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TraceQueryParameters::mutable_start_time_min() {
  // @@protoc_insertion_point(field_mutable:jaeger.api_v2.TraceQueryParameters.start_time_min)
  return _internal_mutable_start_time_min();
}
inline void TraceQueryParameters::set_allocated_start_time_min(PROTOBUF_NAMESPACE_ID::Timestamp* start_time_min) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_min_);
  }
  if (start_time_min) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_min)->GetArena();
    if (message_arena != submessage_arena) {
      start_time_min = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time_min, submessage_arena);
    }
    
  } else {
    
  }
  start_time_min_ = start_time_min;
  // @@protoc_insertion_point(field_set_allocated:jaeger.api_v2.TraceQueryParameters.start_time_min)
}

// .google.protobuf.Timestamp start_time_max = 5 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool TraceQueryParameters::_internal_has_start_time_max() const {
  return this != internal_default_instance() && start_time_max_ != nullptr;
}
inline bool TraceQueryParameters::has_start_time_max() const {
  return _internal_has_start_time_max();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TraceQueryParameters::_internal_start_time_max() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_time_max_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TraceQueryParameters::start_time_max() const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.TraceQueryParameters.start_time_max)
  return _internal_start_time_max();
}
inline void TraceQueryParameters::unsafe_arena_set_allocated_start_time_max(
    PROTOBUF_NAMESPACE_ID::Timestamp* start_time_max) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_max_);
  }
  start_time_max_ = start_time_max;
  if (start_time_max) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jaeger.api_v2.TraceQueryParameters.start_time_max)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TraceQueryParameters::release_start_time_max() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_max_;
  start_time_max_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TraceQueryParameters::unsafe_arena_release_start_time_max() {
  // @@protoc_insertion_point(field_release:jaeger.api_v2.TraceQueryParameters.start_time_max)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_max_;
  start_time_max_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TraceQueryParameters::_internal_mutable_start_time_max() {
  
  if (start_time_max_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    start_time_max_ = p;
  }
  return start_time_max_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TraceQueryParameters::mutable_start_time_max() {
  // @@protoc_insertion_point(field_mutable:jaeger.api_v2.TraceQueryParameters.start_time_max)
  return _internal_mutable_start_time_max();
}
inline void TraceQueryParameters::set_allocated_start_time_max(PROTOBUF_NAMESPACE_ID::Timestamp* start_time_max) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_max_);
  }
  if (start_time_max) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_max)->GetArena();
    if (message_arena != submessage_arena) {
      start_time_max = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time_max, submessage_arena);
    }
    
  } else {
    
  }
  start_time_max_ = start_time_max;
  // @@protoc_insertion_point(field_set_allocated:jaeger.api_v2.TraceQueryParameters.start_time_max)
}

// .google.protobuf.Duration duration_min = 6 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
inline bool TraceQueryParameters::_internal_has_duration_min() const {
  return this != internal_default_instance() && duration_min_ != nullptr;
}
inline bool TraceQueryParameters::has_duration_min() const {
  return _internal_has_duration_min();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& TraceQueryParameters::_internal_duration_min() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = duration_min_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration&>(
      PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& TraceQueryParameters::duration_min() const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.TraceQueryParameters.duration_min)
  return _internal_duration_min();
}
inline void TraceQueryParameters::unsafe_arena_set_allocated_duration_min(
    PROTOBUF_NAMESPACE_ID::Duration* duration_min) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_min_);
  }
  duration_min_ = duration_min;
  if (duration_min) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jaeger.api_v2.TraceQueryParameters.duration_min)
}
inline PROTOBUF_NAMESPACE_ID::Duration* TraceQueryParameters::release_duration_min() {
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = duration_min_;
  duration_min_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* TraceQueryParameters::unsafe_arena_release_duration_min() {
  // @@protoc_insertion_point(field_release:jaeger.api_v2.TraceQueryParameters.duration_min)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = duration_min_;
  duration_min_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* TraceQueryParameters::_internal_mutable_duration_min() {
  
  if (duration_min_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    duration_min_ = p;
  }
  return duration_min_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* TraceQueryParameters::mutable_duration_min() {
  // @@protoc_insertion_point(field_mutable:jaeger.api_v2.TraceQueryParameters.duration_min)
  return _internal_mutable_duration_min();
}
inline void TraceQueryParameters::set_allocated_duration_min(PROTOBUF_NAMESPACE_ID::Duration* duration_min) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_min_);
  }
  if (duration_min) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_min)->GetArena();
    if (message_arena != submessage_arena) {
      duration_min = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration_min, submessage_arena);
    }
    
  } else {
    
  }
  duration_min_ = duration_min;
  // @@protoc_insertion_point(field_set_allocated:jaeger.api_v2.TraceQueryParameters.duration_min)
}

// .google.protobuf.Duration duration_max = 7 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
inline bool TraceQueryParameters::_internal_has_duration_max() const {
  return this != internal_default_instance() && duration_max_ != nullptr;
}
inline bool TraceQueryParameters::has_duration_max() const {
  return _internal_has_duration_max();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& TraceQueryParameters::_internal_duration_max() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = duration_max_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration&>(
      PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& TraceQueryParameters::duration_max() const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.TraceQueryParameters.duration_max)
  return _internal_duration_max();
}
inline void TraceQueryParameters::unsafe_arena_set_allocated_duration_max(
    PROTOBUF_NAMESPACE_ID::Duration* duration_max) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_max_);
  }
  duration_max_ = duration_max;
  if (duration_max) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jaeger.api_v2.TraceQueryParameters.duration_max)
}
inline PROTOBUF_NAMESPACE_ID::Duration* TraceQueryParameters::release_duration_max() {
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = duration_max_;
  duration_max_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* TraceQueryParameters::unsafe_arena_release_duration_max() {
  // @@protoc_insertion_point(field_release:jaeger.api_v2.TraceQueryParameters.duration_max)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = duration_max_;
  duration_max_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* TraceQueryParameters::_internal_mutable_duration_max() {
  
  if (duration_max_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    duration_max_ = p;
  }
  return duration_max_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* TraceQueryParameters::mutable_duration_max() {
  // @@protoc_insertion_point(field_mutable:jaeger.api_v2.TraceQueryParameters.duration_max)
  return _internal_mutable_duration_max();
}
inline void TraceQueryParameters::set_allocated_duration_max(PROTOBUF_NAMESPACE_ID::Duration* duration_max) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_max_);
  }
  if (duration_max) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_max)->GetArena();
    if (message_arena != submessage_arena) {
      duration_max = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration_max, submessage_arena);
    }
    
  } else {
    
  }
  duration_max_ = duration_max;
  // @@protoc_insertion_point(field_set_allocated:jaeger.api_v2.TraceQueryParameters.duration_max)
}

// int32 search_depth = 8;
inline void TraceQueryParameters::clear_search_depth() {
  search_depth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceQueryParameters::_internal_search_depth() const {
  return search_depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceQueryParameters::search_depth() const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.TraceQueryParameters.search_depth)
  return _internal_search_depth();
}
inline void TraceQueryParameters::_internal_set_search_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  search_depth_ = value;
}
inline void TraceQueryParameters::set_search_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_search_depth(value);
  // @@protoc_insertion_point(field_set:jaeger.api_v2.TraceQueryParameters.search_depth)
}

// -------------------------------------------------------------------

// FindTracesRequest

// .jaeger.api_v2.TraceQueryParameters query = 1;
inline bool FindTracesRequest::_internal_has_query() const {
  return this != internal_default_instance() && query_ != nullptr;
}
inline bool FindTracesRequest::has_query() const {
  return _internal_has_query();
}
inline void FindTracesRequest::clear_query() {
  if (GetArena() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
}
inline const ::jaeger::api_v2::TraceQueryParameters& FindTracesRequest::_internal_query() const {
  const ::jaeger::api_v2::TraceQueryParameters* p = query_;
  return p != nullptr ? *p : reinterpret_cast<const ::jaeger::api_v2::TraceQueryParameters&>(
      ::jaeger::api_v2::_TraceQueryParameters_default_instance_);
}
inline const ::jaeger::api_v2::TraceQueryParameters& FindTracesRequest::query() const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.FindTracesRequest.query)
  return _internal_query();
}
inline void FindTracesRequest::unsafe_arena_set_allocated_query(
    ::jaeger::api_v2::TraceQueryParameters* query) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_);
  }
  query_ = query;
  if (query) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jaeger.api_v2.FindTracesRequest.query)
}
inline ::jaeger::api_v2::TraceQueryParameters* FindTracesRequest::release_query() {
  
  ::jaeger::api_v2::TraceQueryParameters* temp = query_;
  query_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::jaeger::api_v2::TraceQueryParameters* FindTracesRequest::unsafe_arena_release_query() {
  // @@protoc_insertion_point(field_release:jaeger.api_v2.FindTracesRequest.query)
  
  ::jaeger::api_v2::TraceQueryParameters* temp = query_;
  query_ = nullptr;
  return temp;
}
inline ::jaeger::api_v2::TraceQueryParameters* FindTracesRequest::_internal_mutable_query() {
  
  if (query_ == nullptr) {
    auto* p = CreateMaybeMessage<::jaeger::api_v2::TraceQueryParameters>(GetArena());
    query_ = p;
  }
  return query_;
}
inline ::jaeger::api_v2::TraceQueryParameters* FindTracesRequest::mutable_query() {
  // @@protoc_insertion_point(field_mutable:jaeger.api_v2.FindTracesRequest.query)
  return _internal_mutable_query();
}
inline void FindTracesRequest::set_allocated_query(::jaeger::api_v2::TraceQueryParameters* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete query_;
  }
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(query);
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    
  } else {
    
  }
  query_ = query;
  // @@protoc_insertion_point(field_set_allocated:jaeger.api_v2.FindTracesRequest.query)
}

// -------------------------------------------------------------------

// GetServicesRequest

// -------------------------------------------------------------------

// GetServicesResponse

// repeated string services = 1;
inline int GetServicesResponse::_internal_services_size() const {
  return services_.size();
}
inline int GetServicesResponse::services_size() const {
  return _internal_services_size();
}
inline void GetServicesResponse::clear_services() {
  services_.Clear();
}
inline std::string* GetServicesResponse::add_services() {
  // @@protoc_insertion_point(field_add_mutable:jaeger.api_v2.GetServicesResponse.services)
  return _internal_add_services();
}
inline const std::string& GetServicesResponse::_internal_services(int index) const {
  return services_.Get(index);
}
inline const std::string& GetServicesResponse::services(int index) const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.GetServicesResponse.services)
  return _internal_services(index);
}
inline std::string* GetServicesResponse::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:jaeger.api_v2.GetServicesResponse.services)
  return services_.Mutable(index);
}
inline void GetServicesResponse::set_services(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:jaeger.api_v2.GetServicesResponse.services)
  services_.Mutable(index)->assign(value);
}
inline void GetServicesResponse::set_services(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:jaeger.api_v2.GetServicesResponse.services)
  services_.Mutable(index)->assign(std::move(value));
}
inline void GetServicesResponse::set_services(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  services_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:jaeger.api_v2.GetServicesResponse.services)
}
inline void GetServicesResponse::set_services(int index, const char* value, size_t size) {
  services_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:jaeger.api_v2.GetServicesResponse.services)
}
inline std::string* GetServicesResponse::_internal_add_services() {
  return services_.Add();
}
inline void GetServicesResponse::add_services(const std::string& value) {
  services_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:jaeger.api_v2.GetServicesResponse.services)
}
inline void GetServicesResponse::add_services(std::string&& value) {
  services_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:jaeger.api_v2.GetServicesResponse.services)
}
inline void GetServicesResponse::add_services(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  services_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:jaeger.api_v2.GetServicesResponse.services)
}
inline void GetServicesResponse::add_services(const char* value, size_t size) {
  services_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:jaeger.api_v2.GetServicesResponse.services)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetServicesResponse::services() const {
  // @@protoc_insertion_point(field_list:jaeger.api_v2.GetServicesResponse.services)
  return services_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetServicesResponse::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:jaeger.api_v2.GetServicesResponse.services)
  return &services_;
}

// -------------------------------------------------------------------

// GetOperationsRequest

// string service = 1;
inline void GetOperationsRequest::clear_service() {
  service_.ClearToEmpty();
}
inline const std::string& GetOperationsRequest::service() const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.GetOperationsRequest.service)
  return _internal_service();
}
inline void GetOperationsRequest::set_service(const std::string& value) {
  _internal_set_service(value);
  // @@protoc_insertion_point(field_set:jaeger.api_v2.GetOperationsRequest.service)
}
inline std::string* GetOperationsRequest::mutable_service() {
  // @@protoc_insertion_point(field_mutable:jaeger.api_v2.GetOperationsRequest.service)
  return _internal_mutable_service();
}
inline const std::string& GetOperationsRequest::_internal_service() const {
  return service_.Get();
}
inline void GetOperationsRequest::_internal_set_service(const std::string& value) {
  
  service_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetOperationsRequest::set_service(std::string&& value) {
  
  service_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jaeger.api_v2.GetOperationsRequest.service)
}
inline void GetOperationsRequest::set_service(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:jaeger.api_v2.GetOperationsRequest.service)
}
inline void GetOperationsRequest::set_service(const char* value,
    size_t size) {
  
  service_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jaeger.api_v2.GetOperationsRequest.service)
}
inline std::string* GetOperationsRequest::_internal_mutable_service() {
  
  return service_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetOperationsRequest::release_service() {
  // @@protoc_insertion_point(field_release:jaeger.api_v2.GetOperationsRequest.service)
  return service_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetOperationsRequest::set_allocated_service(std::string* service) {
  if (service != nullptr) {
    
  } else {
    
  }
  service_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jaeger.api_v2.GetOperationsRequest.service)
}

// string span_kind = 2;
inline void GetOperationsRequest::clear_span_kind() {
  span_kind_.ClearToEmpty();
}
inline const std::string& GetOperationsRequest::span_kind() const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.GetOperationsRequest.span_kind)
  return _internal_span_kind();
}
inline void GetOperationsRequest::set_span_kind(const std::string& value) {
  _internal_set_span_kind(value);
  // @@protoc_insertion_point(field_set:jaeger.api_v2.GetOperationsRequest.span_kind)
}
inline std::string* GetOperationsRequest::mutable_span_kind() {
  // @@protoc_insertion_point(field_mutable:jaeger.api_v2.GetOperationsRequest.span_kind)
  return _internal_mutable_span_kind();
}
inline const std::string& GetOperationsRequest::_internal_span_kind() const {
  return span_kind_.Get();
}
inline void GetOperationsRequest::_internal_set_span_kind(const std::string& value) {
  
  span_kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetOperationsRequest::set_span_kind(std::string&& value) {
  
  span_kind_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jaeger.api_v2.GetOperationsRequest.span_kind)
}
inline void GetOperationsRequest::set_span_kind(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  span_kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:jaeger.api_v2.GetOperationsRequest.span_kind)
}
inline void GetOperationsRequest::set_span_kind(const char* value,
    size_t size) {
  
  span_kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jaeger.api_v2.GetOperationsRequest.span_kind)
}
inline std::string* GetOperationsRequest::_internal_mutable_span_kind() {
  
  return span_kind_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetOperationsRequest::release_span_kind() {
  // @@protoc_insertion_point(field_release:jaeger.api_v2.GetOperationsRequest.span_kind)
  return span_kind_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetOperationsRequest::set_allocated_span_kind(std::string* span_kind) {
  if (span_kind != nullptr) {
    
  } else {
    
  }
  span_kind_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), span_kind,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jaeger.api_v2.GetOperationsRequest.span_kind)
}

// -------------------------------------------------------------------

// Operation

// string name = 1;
inline void Operation::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Operation::name() const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.Operation.name)
  return _internal_name();
}
inline void Operation::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:jaeger.api_v2.Operation.name)
}
inline std::string* Operation::mutable_name() {
  // @@protoc_insertion_point(field_mutable:jaeger.api_v2.Operation.name)
  return _internal_mutable_name();
}
inline const std::string& Operation::_internal_name() const {
  return name_.Get();
}
inline void Operation::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Operation::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jaeger.api_v2.Operation.name)
}
inline void Operation::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:jaeger.api_v2.Operation.name)
}
inline void Operation::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jaeger.api_v2.Operation.name)
}
inline std::string* Operation::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Operation::release_name() {
  // @@protoc_insertion_point(field_release:jaeger.api_v2.Operation.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Operation::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jaeger.api_v2.Operation.name)
}

// string span_kind = 2;
inline void Operation::clear_span_kind() {
  span_kind_.ClearToEmpty();
}
inline const std::string& Operation::span_kind() const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.Operation.span_kind)
  return _internal_span_kind();
}
inline void Operation::set_span_kind(const std::string& value) {
  _internal_set_span_kind(value);
  // @@protoc_insertion_point(field_set:jaeger.api_v2.Operation.span_kind)
}
inline std::string* Operation::mutable_span_kind() {
  // @@protoc_insertion_point(field_mutable:jaeger.api_v2.Operation.span_kind)
  return _internal_mutable_span_kind();
}
inline const std::string& Operation::_internal_span_kind() const {
  return span_kind_.Get();
}
inline void Operation::_internal_set_span_kind(const std::string& value) {
  
  span_kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Operation::set_span_kind(std::string&& value) {
  
  span_kind_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jaeger.api_v2.Operation.span_kind)
}
inline void Operation::set_span_kind(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  span_kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:jaeger.api_v2.Operation.span_kind)
}
inline void Operation::set_span_kind(const char* value,
    size_t size) {
  
  span_kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jaeger.api_v2.Operation.span_kind)
}
inline std::string* Operation::_internal_mutable_span_kind() {
  
  return span_kind_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Operation::release_span_kind() {
  // @@protoc_insertion_point(field_release:jaeger.api_v2.Operation.span_kind)
  return span_kind_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Operation::set_allocated_span_kind(std::string* span_kind) {
  if (span_kind != nullptr) {
    
  } else {
    
  }
  span_kind_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), span_kind,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jaeger.api_v2.Operation.span_kind)
}

// -------------------------------------------------------------------

// GetOperationsResponse

// repeated string operationNames = 1;
inline int GetOperationsResponse::_internal_operationnames_size() const {
  return operationnames_.size();
}
inline int GetOperationsResponse::operationnames_size() const {
  return _internal_operationnames_size();
}
inline void GetOperationsResponse::clear_operationnames() {
  operationnames_.Clear();
}
inline std::string* GetOperationsResponse::add_operationnames() {
  // @@protoc_insertion_point(field_add_mutable:jaeger.api_v2.GetOperationsResponse.operationNames)
  return _internal_add_operationnames();
}
inline const std::string& GetOperationsResponse::_internal_operationnames(int index) const {
  return operationnames_.Get(index);
}
inline const std::string& GetOperationsResponse::operationnames(int index) const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.GetOperationsResponse.operationNames)
  return _internal_operationnames(index);
}
inline std::string* GetOperationsResponse::mutable_operationnames(int index) {
  // @@protoc_insertion_point(field_mutable:jaeger.api_v2.GetOperationsResponse.operationNames)
  return operationnames_.Mutable(index);
}
inline void GetOperationsResponse::set_operationnames(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:jaeger.api_v2.GetOperationsResponse.operationNames)
  operationnames_.Mutable(index)->assign(value);
}
inline void GetOperationsResponse::set_operationnames(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:jaeger.api_v2.GetOperationsResponse.operationNames)
  operationnames_.Mutable(index)->assign(std::move(value));
}
inline void GetOperationsResponse::set_operationnames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  operationnames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:jaeger.api_v2.GetOperationsResponse.operationNames)
}
inline void GetOperationsResponse::set_operationnames(int index, const char* value, size_t size) {
  operationnames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:jaeger.api_v2.GetOperationsResponse.operationNames)
}
inline std::string* GetOperationsResponse::_internal_add_operationnames() {
  return operationnames_.Add();
}
inline void GetOperationsResponse::add_operationnames(const std::string& value) {
  operationnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:jaeger.api_v2.GetOperationsResponse.operationNames)
}
inline void GetOperationsResponse::add_operationnames(std::string&& value) {
  operationnames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:jaeger.api_v2.GetOperationsResponse.operationNames)
}
inline void GetOperationsResponse::add_operationnames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  operationnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:jaeger.api_v2.GetOperationsResponse.operationNames)
}
inline void GetOperationsResponse::add_operationnames(const char* value, size_t size) {
  operationnames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:jaeger.api_v2.GetOperationsResponse.operationNames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetOperationsResponse::operationnames() const {
  // @@protoc_insertion_point(field_list:jaeger.api_v2.GetOperationsResponse.operationNames)
  return operationnames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetOperationsResponse::mutable_operationnames() {
  // @@protoc_insertion_point(field_mutable_list:jaeger.api_v2.GetOperationsResponse.operationNames)
  return &operationnames_;
}

// repeated .jaeger.api_v2.Operation operations = 2;
inline int GetOperationsResponse::_internal_operations_size() const {
  return operations_.size();
}
inline int GetOperationsResponse::operations_size() const {
  return _internal_operations_size();
}
inline void GetOperationsResponse::clear_operations() {
  operations_.Clear();
}
inline ::jaeger::api_v2::Operation* GetOperationsResponse::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:jaeger.api_v2.GetOperationsResponse.operations)
  return operations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jaeger::api_v2::Operation >*
GetOperationsResponse::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:jaeger.api_v2.GetOperationsResponse.operations)
  return &operations_;
}
inline const ::jaeger::api_v2::Operation& GetOperationsResponse::_internal_operations(int index) const {
  return operations_.Get(index);
}
inline const ::jaeger::api_v2::Operation& GetOperationsResponse::operations(int index) const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.GetOperationsResponse.operations)
  return _internal_operations(index);
}
inline ::jaeger::api_v2::Operation* GetOperationsResponse::_internal_add_operations() {
  return operations_.Add();
}
inline ::jaeger::api_v2::Operation* GetOperationsResponse::add_operations() {
  // @@protoc_insertion_point(field_add:jaeger.api_v2.GetOperationsResponse.operations)
  return _internal_add_operations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jaeger::api_v2::Operation >&
GetOperationsResponse::operations() const {
  // @@protoc_insertion_point(field_list:jaeger.api_v2.GetOperationsResponse.operations)
  return operations_;
}

// -------------------------------------------------------------------

// GetDependenciesRequest

// .google.protobuf.Timestamp start_time = 1 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool GetDependenciesRequest::_internal_has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline bool GetDependenciesRequest::has_start_time() const {
  return _internal_has_start_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetDependenciesRequest::_internal_start_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetDependenciesRequest::start_time() const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.GetDependenciesRequest.start_time)
  return _internal_start_time();
}
inline void GetDependenciesRequest::unsafe_arena_set_allocated_start_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jaeger.api_v2.GetDependenciesRequest.start_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDependenciesRequest::release_start_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDependenciesRequest::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:jaeger.api_v2.GetDependenciesRequest.start_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDependenciesRequest::_internal_mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    start_time_ = p;
  }
  return start_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDependenciesRequest::mutable_start_time() {
  // @@protoc_insertion_point(field_mutable:jaeger.api_v2.GetDependenciesRequest.start_time)
  return _internal_mutable_start_time();
}
inline void GetDependenciesRequest::set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:jaeger.api_v2.GetDependenciesRequest.start_time)
}

// .google.protobuf.Timestamp end_time = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool GetDependenciesRequest::_internal_has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline bool GetDependenciesRequest::has_end_time() const {
  return _internal_has_end_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetDependenciesRequest::_internal_end_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetDependenciesRequest::end_time() const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.GetDependenciesRequest.end_time)
  return _internal_end_time();
}
inline void GetDependenciesRequest::unsafe_arena_set_allocated_end_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jaeger.api_v2.GetDependenciesRequest.end_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDependenciesRequest::release_end_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDependenciesRequest::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:jaeger.api_v2.GetDependenciesRequest.end_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDependenciesRequest::_internal_mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    end_time_ = p;
  }
  return end_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDependenciesRequest::mutable_end_time() {
  // @@protoc_insertion_point(field_mutable:jaeger.api_v2.GetDependenciesRequest.end_time)
  return _internal_mutable_end_time();
}
inline void GetDependenciesRequest::set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:jaeger.api_v2.GetDependenciesRequest.end_time)
}

// -------------------------------------------------------------------

// GetDependenciesResponse

// repeated .jaeger.api_v2.DependencyLink dependencies = 1 [(.gogoproto.nullable) = false];
inline int GetDependenciesResponse::_internal_dependencies_size() const {
  return dependencies_.size();
}
inline int GetDependenciesResponse::dependencies_size() const {
  return _internal_dependencies_size();
}
inline ::jaeger::api_v2::DependencyLink* GetDependenciesResponse::mutable_dependencies(int index) {
  // @@protoc_insertion_point(field_mutable:jaeger.api_v2.GetDependenciesResponse.dependencies)
  return dependencies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jaeger::api_v2::DependencyLink >*
GetDependenciesResponse::mutable_dependencies() {
  // @@protoc_insertion_point(field_mutable_list:jaeger.api_v2.GetDependenciesResponse.dependencies)
  return &dependencies_;
}
inline const ::jaeger::api_v2::DependencyLink& GetDependenciesResponse::_internal_dependencies(int index) const {
  return dependencies_.Get(index);
}
inline const ::jaeger::api_v2::DependencyLink& GetDependenciesResponse::dependencies(int index) const {
  // @@protoc_insertion_point(field_get:jaeger.api_v2.GetDependenciesResponse.dependencies)
  return _internal_dependencies(index);
}
inline ::jaeger::api_v2::DependencyLink* GetDependenciesResponse::_internal_add_dependencies() {
  return dependencies_.Add();
}
inline ::jaeger::api_v2::DependencyLink* GetDependenciesResponse::add_dependencies() {
  // @@protoc_insertion_point(field_add:jaeger.api_v2.GetDependenciesResponse.dependencies)
  return _internal_add_dependencies();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jaeger::api_v2::DependencyLink >&
GetDependenciesResponse::dependencies() const {
  // @@protoc_insertion_point(field_list:jaeger.api_v2.GetDependenciesResponse.dependencies)
  return dependencies_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api_v2
}  // namespace jaeger

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_query_2eproto
