// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: query.proto

#include "query.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DependencyLink_model_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_query_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Operation_query_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Span_model_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_query_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TraceQueryParameters_query_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_query_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceQueryParameters_TagsEntry_DoNotUse_query_2eproto;
namespace jaeger {
namespace api_v2 {
class GetTraceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTraceRequest> _instance;
} _GetTraceRequest_default_instance_;
class SpansResponseChunkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpansResponseChunk> _instance;
} _SpansResponseChunk_default_instance_;
class ArchiveTraceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArchiveTraceRequest> _instance;
} _ArchiveTraceRequest_default_instance_;
class ArchiveTraceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArchiveTraceResponse> _instance;
} _ArchiveTraceResponse_default_instance_;
class TraceQueryParameters_TagsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TraceQueryParameters_TagsEntry_DoNotUse> _instance;
} _TraceQueryParameters_TagsEntry_DoNotUse_default_instance_;
class TraceQueryParametersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TraceQueryParameters> _instance;
} _TraceQueryParameters_default_instance_;
class FindTracesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FindTracesRequest> _instance;
} _FindTracesRequest_default_instance_;
class GetServicesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServicesRequest> _instance;
} _GetServicesRequest_default_instance_;
class GetServicesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServicesResponse> _instance;
} _GetServicesResponse_default_instance_;
class GetOperationsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetOperationsRequest> _instance;
} _GetOperationsRequest_default_instance_;
class OperationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Operation> _instance;
} _Operation_default_instance_;
class GetOperationsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetOperationsResponse> _instance;
} _GetOperationsResponse_default_instance_;
class GetDependenciesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDependenciesRequest> _instance;
} _GetDependenciesRequest_default_instance_;
class GetDependenciesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDependenciesResponse> _instance;
} _GetDependenciesResponse_default_instance_;
}  // namespace api_v2
}  // namespace jaeger
static void InitDefaultsscc_info_ArchiveTraceRequest_query_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jaeger::api_v2::_ArchiveTraceRequest_default_instance_;
    new (ptr) ::jaeger::api_v2::ArchiveTraceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ArchiveTraceRequest_query_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ArchiveTraceRequest_query_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_ArchiveTraceResponse_query_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jaeger::api_v2::_ArchiveTraceResponse_default_instance_;
    new (ptr) ::jaeger::api_v2::ArchiveTraceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArchiveTraceResponse_query_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ArchiveTraceResponse_query_2eproto}, {}};

static void InitDefaultsscc_info_FindTracesRequest_query_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jaeger::api_v2::_FindTracesRequest_default_instance_;
    new (ptr) ::jaeger::api_v2::FindTracesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FindTracesRequest_query_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FindTracesRequest_query_2eproto}, {
      &scc_info_TraceQueryParameters_query_2eproto.base,}};

static void InitDefaultsscc_info_GetDependenciesRequest_query_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jaeger::api_v2::_GetDependenciesRequest_default_instance_;
    new (ptr) ::jaeger::api_v2::GetDependenciesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetDependenciesRequest_query_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetDependenciesRequest_query_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_GetDependenciesResponse_query_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jaeger::api_v2::_GetDependenciesResponse_default_instance_;
    new (ptr) ::jaeger::api_v2::GetDependenciesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetDependenciesResponse_query_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetDependenciesResponse_query_2eproto}, {
      &scc_info_DependencyLink_model_2eproto.base,}};

static void InitDefaultsscc_info_GetOperationsRequest_query_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jaeger::api_v2::_GetOperationsRequest_default_instance_;
    new (ptr) ::jaeger::api_v2::GetOperationsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetOperationsRequest_query_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetOperationsRequest_query_2eproto}, {}};

static void InitDefaultsscc_info_GetOperationsResponse_query_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jaeger::api_v2::_GetOperationsResponse_default_instance_;
    new (ptr) ::jaeger::api_v2::GetOperationsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetOperationsResponse_query_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetOperationsResponse_query_2eproto}, {
      &scc_info_Operation_query_2eproto.base,}};

static void InitDefaultsscc_info_GetServicesRequest_query_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jaeger::api_v2::_GetServicesRequest_default_instance_;
    new (ptr) ::jaeger::api_v2::GetServicesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetServicesRequest_query_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetServicesRequest_query_2eproto}, {}};

static void InitDefaultsscc_info_GetServicesResponse_query_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jaeger::api_v2::_GetServicesResponse_default_instance_;
    new (ptr) ::jaeger::api_v2::GetServicesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetServicesResponse_query_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetServicesResponse_query_2eproto}, {}};

static void InitDefaultsscc_info_GetTraceRequest_query_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jaeger::api_v2::_GetTraceRequest_default_instance_;
    new (ptr) ::jaeger::api_v2::GetTraceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetTraceRequest_query_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetTraceRequest_query_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_Operation_query_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jaeger::api_v2::_Operation_default_instance_;
    new (ptr) ::jaeger::api_v2::Operation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Operation_query_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Operation_query_2eproto}, {}};

static void InitDefaultsscc_info_SpansResponseChunk_query_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jaeger::api_v2::_SpansResponseChunk_default_instance_;
    new (ptr) ::jaeger::api_v2::SpansResponseChunk();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpansResponseChunk_query_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SpansResponseChunk_query_2eproto}, {
      &scc_info_Span_model_2eproto.base,}};

static void InitDefaultsscc_info_TraceQueryParameters_query_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jaeger::api_v2::_TraceQueryParameters_default_instance_;
    new (ptr) ::jaeger::api_v2::TraceQueryParameters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TraceQueryParameters_query_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TraceQueryParameters_query_2eproto}, {
      &scc_info_TraceQueryParameters_TagsEntry_DoNotUse_query_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static void InitDefaultsscc_info_TraceQueryParameters_TagsEntry_DoNotUse_query_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jaeger::api_v2::_TraceQueryParameters_TagsEntry_DoNotUse_default_instance_;
    new (ptr) ::jaeger::api_v2::TraceQueryParameters_TagsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceQueryParameters_TagsEntry_DoNotUse_query_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TraceQueryParameters_TagsEntry_DoNotUse_query_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_query_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_query_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_query_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_query_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::GetTraceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::GetTraceRequest, trace_id_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::GetTraceRequest, start_time_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::GetTraceRequest, end_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::SpansResponseChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::SpansResponseChunk, spans_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::ArchiveTraceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::ArchiveTraceRequest, trace_id_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::ArchiveTraceRequest, start_time_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::ArchiveTraceRequest, end_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::ArchiveTraceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::TraceQueryParameters_TagsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::TraceQueryParameters_TagsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::TraceQueryParameters_TagsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::TraceQueryParameters_TagsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::TraceQueryParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::TraceQueryParameters, service_name_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::TraceQueryParameters, operation_name_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::TraceQueryParameters, tags_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::TraceQueryParameters, start_time_min_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::TraceQueryParameters, start_time_max_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::TraceQueryParameters, duration_min_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::TraceQueryParameters, duration_max_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::TraceQueryParameters, search_depth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::FindTracesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::FindTracesRequest, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::GetServicesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::GetServicesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::GetServicesResponse, services_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::GetOperationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::GetOperationsRequest, service_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::GetOperationsRequest, span_kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::Operation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::Operation, name_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::Operation, span_kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::GetOperationsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::GetOperationsResponse, operationnames_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::GetOperationsResponse, operations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::GetDependenciesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::GetDependenciesRequest, start_time_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::GetDependenciesRequest, end_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::GetDependenciesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::GetDependenciesResponse, dependencies_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::jaeger::api_v2::GetTraceRequest)},
  { 8, -1, sizeof(::jaeger::api_v2::SpansResponseChunk)},
  { 14, -1, sizeof(::jaeger::api_v2::ArchiveTraceRequest)},
  { 22, -1, sizeof(::jaeger::api_v2::ArchiveTraceResponse)},
  { 27, 34, sizeof(::jaeger::api_v2::TraceQueryParameters_TagsEntry_DoNotUse)},
  { 36, -1, sizeof(::jaeger::api_v2::TraceQueryParameters)},
  { 49, -1, sizeof(::jaeger::api_v2::FindTracesRequest)},
  { 55, -1, sizeof(::jaeger::api_v2::GetServicesRequest)},
  { 60, -1, sizeof(::jaeger::api_v2::GetServicesResponse)},
  { 66, -1, sizeof(::jaeger::api_v2::GetOperationsRequest)},
  { 73, -1, sizeof(::jaeger::api_v2::Operation)},
  { 80, -1, sizeof(::jaeger::api_v2::GetOperationsResponse)},
  { 87, -1, sizeof(::jaeger::api_v2::GetDependenciesRequest)},
  { 94, -1, sizeof(::jaeger::api_v2::GetDependenciesResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jaeger::api_v2::_GetTraceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jaeger::api_v2::_SpansResponseChunk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jaeger::api_v2::_ArchiveTraceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jaeger::api_v2::_ArchiveTraceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jaeger::api_v2::_TraceQueryParameters_TagsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jaeger::api_v2::_TraceQueryParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jaeger::api_v2::_FindTracesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jaeger::api_v2::_GetServicesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jaeger::api_v2::_GetServicesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jaeger::api_v2::_GetOperationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jaeger::api_v2::_Operation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jaeger::api_v2::_GetOperationsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jaeger::api_v2::_GetDependenciesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jaeger::api_v2::_GetDependenciesResponse_default_instance_),
};

const char descriptor_table_protodef_query_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013query.proto\022\rjaeger.api_v2\032\013model.prot"
  "o\032\024gogoproto/gogo.proto\032\034google/api/anno"
  "tations.proto\032\037google/protobuf/timestamp"
  ".proto\032\036google/protobuf/duration.proto\"\303"
  "\001\n\017GetTraceRequest\022R\n\010trace_id\030\001 \001(\014B@\310\336"
  "\037\000\332\336\037-github.com/jaegertracing/jaeger/mo"
  "del.TraceID\342\336\037\007TraceID\022.\n\nstart_time\030\002 \001"
  "(\0132\032.google.protobuf.Timestamp\022,\n\010end_ti"
  "me\030\003 \001(\0132\032.google.protobuf.Timestamp\">\n\022"
  "SpansResponseChunk\022(\n\005spans\030\001 \003(\0132\023.jaeg"
  "er.api_v2.SpanB\004\310\336\037\000\"\307\001\n\023ArchiveTraceReq"
  "uest\022R\n\010trace_id\030\001 \001(\014B@\310\336\037\000\332\336\037-github.c"
  "om/jaegertracing/jaeger/model.TraceID\342\336\037"
  "\007TraceID\022.\n\nstart_time\030\002 \001(\0132\032.google.pr"
  "otobuf.Timestamp\022,\n\010end_time\030\003 \001(\0132\032.goo"
  "gle.protobuf.Timestamp\"\026\n\024ArchiveTraceRe"
  "sponse\"\266\003\n\024TraceQueryParameters\022\024\n\014servi"
  "ce_name\030\001 \001(\t\022\026\n\016operation_name\030\002 \001(\t\022;\n"
  "\004tags\030\003 \003(\0132-.jaeger.api_v2.TraceQueryPa"
  "rameters.TagsEntry\022<\n\016start_time_min\030\004 \001"
  "(\0132\032.google.protobuf.TimestampB\010\220\337\037\001\310\336\037\000"
  "\022<\n\016start_time_max\030\005 \001(\0132\032.google.protob"
  "uf.TimestampB\010\220\337\037\001\310\336\037\000\0229\n\014duration_min\030\006"
  " \001(\0132\031.google.protobuf.DurationB\010\230\337\037\001\310\336\037"
  "\000\0229\n\014duration_max\030\007 \001(\0132\031.google.protobu"
  "f.DurationB\010\230\337\037\001\310\336\037\000\022\024\n\014search_depth\030\010 \001"
  "(\005\032+\n\tTagsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 "
  "\001(\t:\0028\001\"G\n\021FindTracesRequest\0222\n\005query\030\001 "
  "\001(\0132#.jaeger.api_v2.TraceQueryParameters"
  "\"\024\n\022GetServicesRequest\"\'\n\023GetServicesRes"
  "ponse\022\020\n\010services\030\001 \003(\t\":\n\024GetOperations"
  "Request\022\017\n\007service\030\001 \001(\t\022\021\n\tspan_kind\030\002 "
  "\001(\t\",\n\tOperation\022\014\n\004name\030\001 \001(\t\022\021\n\tspan_k"
  "ind\030\002 \001(\t\"]\n\025GetOperationsResponse\022\026\n\016op"
  "erationNames\030\001 \003(\t\022,\n\noperations\030\002 \003(\0132\030"
  ".jaeger.api_v2.Operation\"\212\001\n\026GetDependen"
  "ciesRequest\0228\n\nstart_time\030\001 \001(\0132\032.google"
  ".protobuf.TimestampB\010\220\337\037\001\310\336\037\000\0226\n\010end_tim"
  "e\030\002 \001(\0132\032.google.protobuf.TimestampB\010\220\337\037"
  "\001\310\336\037\000\"T\n\027GetDependenciesResponse\0229\n\014depe"
  "ndencies\030\001 \003(\0132\035.jaeger.api_v2.Dependenc"
  "yLinkB\004\310\336\037\0002\255\005\n\014QueryService\022k\n\010GetTrace"
  "\022\036.jaeger.api_v2.GetTraceRequest\032!.jaege"
  "r.api_v2.SpansResponseChunk\"\032\202\323\344\223\002\024\022\022/tr"
  "aces/{trace_id}0\001\022t\n\014ArchiveTrace\022\".jaeg"
  "er.api_v2.ArchiveTraceRequest\032#.jaeger.a"
  "pi_v2.ArchiveTraceResponse\"\033\202\323\344\223\002\025\"\023/arc"
  "hive/{trace_id}\022g\n\nFindTraces\022 .jaeger.a"
  "pi_v2.FindTracesRequest\032!.jaeger.api_v2."
  "SpansResponseChunk\"\022\202\323\344\223\002\014\"\007/search:\001*0\001"
  "\022g\n\013GetServices\022!.jaeger.api_v2.GetServi"
  "cesRequest\032\".jaeger.api_v2.GetServicesRe"
  "sponse\"\021\202\323\344\223\002\013\022\t/services\022o\n\rGetOperatio"
  "ns\022#.jaeger.api_v2.GetOperationsRequest\032"
  "$.jaeger.api_v2.GetOperationsResponse\"\023\202"
  "\323\344\223\002\r\022\013/operations\022w\n\017GetDependencies\022%."
  "jaeger.api_v2.GetDependenciesRequest\032&.j"
  "aeger.api_v2.GetDependenciesResponse\"\025\202\323"
  "\344\223\002\017\022\r/dependenciesB-\n\027io.jaegertracing."
  "api_v2Z\006api_v2\310\342\036\001\320\342\036\001\340\342\036\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_query_2eproto_deps[5] = {
  &::descriptor_table_gogoproto_2fgogo_2eproto,
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_model_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_query_2eproto_sccs[14] = {
  &scc_info_ArchiveTraceRequest_query_2eproto.base,
  &scc_info_ArchiveTraceResponse_query_2eproto.base,
  &scc_info_FindTracesRequest_query_2eproto.base,
  &scc_info_GetDependenciesRequest_query_2eproto.base,
  &scc_info_GetDependenciesResponse_query_2eproto.base,
  &scc_info_GetOperationsRequest_query_2eproto.base,
  &scc_info_GetOperationsResponse_query_2eproto.base,
  &scc_info_GetServicesRequest_query_2eproto.base,
  &scc_info_GetServicesResponse_query_2eproto.base,
  &scc_info_GetTraceRequest_query_2eproto.base,
  &scc_info_Operation_query_2eproto.base,
  &scc_info_SpansResponseChunk_query_2eproto.base,
  &scc_info_TraceQueryParameters_query_2eproto.base,
  &scc_info_TraceQueryParameters_TagsEntry_DoNotUse_query_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_query_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_query_2eproto = {
  false, false, descriptor_table_protodef_query_2eproto, "query.proto", 2394,
  &descriptor_table_query_2eproto_once, descriptor_table_query_2eproto_sccs, descriptor_table_query_2eproto_deps, 14, 5,
  schemas, file_default_instances, TableStruct_query_2eproto::offsets,
  file_level_metadata_query_2eproto, 14, file_level_enum_descriptors_query_2eproto, file_level_service_descriptors_query_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_query_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_query_2eproto)), true);
namespace jaeger {
namespace api_v2 {

// ===================================================================

class GetTraceRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const GetTraceRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const GetTraceRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
GetTraceRequest::_Internal::start_time(const GetTraceRequest* msg) {
  return *msg->start_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
GetTraceRequest::_Internal::end_time(const GetTraceRequest* msg) {
  return *msg->end_time_;
}
void GetTraceRequest::clear_start_time() {
  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
void GetTraceRequest::clear_end_time() {
  if (GetArena() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
}
GetTraceRequest::GetTraceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jaeger.api_v2.GetTraceRequest)
}
GetTraceRequest::GetTraceRequest(const GetTraceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trace_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trace_id().empty()) {
    trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_trace_id(), 
      GetArena());
  }
  if (from._internal_has_start_time()) {
    start_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from._internal_has_end_time()) {
    end_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_time_);
  } else {
    end_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:jaeger.api_v2.GetTraceRequest)
}

void GetTraceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTraceRequest_query_2eproto.base);
  trace_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&start_time_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
}

GetTraceRequest::~GetTraceRequest() {
  // @@protoc_insertion_point(destructor:jaeger.api_v2.GetTraceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetTraceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  trace_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
}

void GetTraceRequest::ArenaDtor(void* object) {
  GetTraceRequest* _this = reinterpret_cast< GetTraceRequest* >(object);
  (void)_this;
}
void GetTraceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTraceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTraceRequest& GetTraceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTraceRequest_query_2eproto.base);
  return *internal_default_instance();
}


void GetTraceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:jaeger.api_v2.GetTraceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trace_id_.ClearToEmpty();
  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArena() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTraceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes trace_id = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/jaegertracing/jaeger/model.TraceID", (.gogoproto.customname) = "TraceID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_trace_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTraceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jaeger.api_v2.GetTraceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes trace_id = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/jaegertracing/jaeger/model.TraceID", (.gogoproto.customname) = "TraceID"];
  if (this->trace_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_trace_id(), target);
  }

  // .google.protobuf.Timestamp start_time = 2;
  if (this->has_start_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start_time(this), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 3;
  if (this->has_end_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::end_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jaeger.api_v2.GetTraceRequest)
  return target;
}

size_t GetTraceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jaeger.api_v2.GetTraceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes trace_id = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/jaegertracing/jaeger/model.TraceID", (.gogoproto.customname) = "TraceID"];
  if (this->trace_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_trace_id());
  }

  // .google.protobuf.Timestamp start_time = 2;
  if (this->has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Timestamp end_time = 3;
  if (this->has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTraceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jaeger.api_v2.GetTraceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTraceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTraceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jaeger.api_v2.GetTraceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jaeger.api_v2.GetTraceRequest)
    MergeFrom(*source);
  }
}

void GetTraceRequest::MergeFrom(const GetTraceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jaeger.api_v2.GetTraceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trace_id().size() > 0) {
    _internal_set_trace_id(from._internal_trace_id());
  }
  if (from.has_start_time()) {
    _internal_mutable_start_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_time());
  }
  if (from.has_end_time()) {
    _internal_mutable_end_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end_time());
  }
}

void GetTraceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jaeger.api_v2.GetTraceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTraceRequest::CopyFrom(const GetTraceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jaeger.api_v2.GetTraceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTraceRequest::IsInitialized() const {
  return true;
}

void GetTraceRequest::InternalSwap(GetTraceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trace_id_.Swap(&other->trace_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTraceRequest, end_time_)
      + sizeof(GetTraceRequest::end_time_)
      - PROTOBUF_FIELD_OFFSET(GetTraceRequest, start_time_)>(
          reinterpret_cast<char*>(&start_time_),
          reinterpret_cast<char*>(&other->start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTraceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SpansResponseChunk::_Internal {
 public:
};

void SpansResponseChunk::clear_spans() {
  spans_.Clear();
}
SpansResponseChunk::SpansResponseChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  spans_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jaeger.api_v2.SpansResponseChunk)
}
SpansResponseChunk::SpansResponseChunk(const SpansResponseChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      spans_(from.spans_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jaeger.api_v2.SpansResponseChunk)
}

void SpansResponseChunk::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpansResponseChunk_query_2eproto.base);
}

SpansResponseChunk::~SpansResponseChunk() {
  // @@protoc_insertion_point(destructor:jaeger.api_v2.SpansResponseChunk)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpansResponseChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpansResponseChunk::ArenaDtor(void* object) {
  SpansResponseChunk* _this = reinterpret_cast< SpansResponseChunk* >(object);
  (void)_this;
}
void SpansResponseChunk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpansResponseChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpansResponseChunk& SpansResponseChunk::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpansResponseChunk_query_2eproto.base);
  return *internal_default_instance();
}


void SpansResponseChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:jaeger.api_v2.SpansResponseChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spans_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpansResponseChunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .jaeger.api_v2.Span spans = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_spans(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpansResponseChunk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jaeger.api_v2.SpansResponseChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jaeger.api_v2.Span spans = 1 [(.gogoproto.nullable) = false];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_spans_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_spans(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jaeger.api_v2.SpansResponseChunk)
  return target;
}

size_t SpansResponseChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jaeger.api_v2.SpansResponseChunk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .jaeger.api_v2.Span spans = 1 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_spans_size();
  for (const auto& msg : this->spans_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpansResponseChunk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jaeger.api_v2.SpansResponseChunk)
  GOOGLE_DCHECK_NE(&from, this);
  const SpansResponseChunk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpansResponseChunk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jaeger.api_v2.SpansResponseChunk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jaeger.api_v2.SpansResponseChunk)
    MergeFrom(*source);
  }
}

void SpansResponseChunk::MergeFrom(const SpansResponseChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jaeger.api_v2.SpansResponseChunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spans_.MergeFrom(from.spans_);
}

void SpansResponseChunk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jaeger.api_v2.SpansResponseChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpansResponseChunk::CopyFrom(const SpansResponseChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jaeger.api_v2.SpansResponseChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpansResponseChunk::IsInitialized() const {
  return true;
}

void SpansResponseChunk::InternalSwap(SpansResponseChunk* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  spans_.InternalSwap(&other->spans_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpansResponseChunk::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ArchiveTraceRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const ArchiveTraceRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const ArchiveTraceRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
ArchiveTraceRequest::_Internal::start_time(const ArchiveTraceRequest* msg) {
  return *msg->start_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ArchiveTraceRequest::_Internal::end_time(const ArchiveTraceRequest* msg) {
  return *msg->end_time_;
}
void ArchiveTraceRequest::clear_start_time() {
  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
void ArchiveTraceRequest::clear_end_time() {
  if (GetArena() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
}
ArchiveTraceRequest::ArchiveTraceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jaeger.api_v2.ArchiveTraceRequest)
}
ArchiveTraceRequest::ArchiveTraceRequest(const ArchiveTraceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trace_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trace_id().empty()) {
    trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_trace_id(), 
      GetArena());
  }
  if (from._internal_has_start_time()) {
    start_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from._internal_has_end_time()) {
    end_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_time_);
  } else {
    end_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:jaeger.api_v2.ArchiveTraceRequest)
}

void ArchiveTraceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ArchiveTraceRequest_query_2eproto.base);
  trace_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&start_time_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
}

ArchiveTraceRequest::~ArchiveTraceRequest() {
  // @@protoc_insertion_point(destructor:jaeger.api_v2.ArchiveTraceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArchiveTraceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  trace_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
}

void ArchiveTraceRequest::ArenaDtor(void* object) {
  ArchiveTraceRequest* _this = reinterpret_cast< ArchiveTraceRequest* >(object);
  (void)_this;
}
void ArchiveTraceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArchiveTraceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArchiveTraceRequest& ArchiveTraceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArchiveTraceRequest_query_2eproto.base);
  return *internal_default_instance();
}


void ArchiveTraceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:jaeger.api_v2.ArchiveTraceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trace_id_.ClearToEmpty();
  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArena() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArchiveTraceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes trace_id = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/jaegertracing/jaeger/model.TraceID", (.gogoproto.customname) = "TraceID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_trace_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArchiveTraceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jaeger.api_v2.ArchiveTraceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes trace_id = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/jaegertracing/jaeger/model.TraceID", (.gogoproto.customname) = "TraceID"];
  if (this->trace_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_trace_id(), target);
  }

  // .google.protobuf.Timestamp start_time = 2;
  if (this->has_start_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start_time(this), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 3;
  if (this->has_end_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::end_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jaeger.api_v2.ArchiveTraceRequest)
  return target;
}

size_t ArchiveTraceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jaeger.api_v2.ArchiveTraceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes trace_id = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/jaegertracing/jaeger/model.TraceID", (.gogoproto.customname) = "TraceID"];
  if (this->trace_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_trace_id());
  }

  // .google.protobuf.Timestamp start_time = 2;
  if (this->has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Timestamp end_time = 3;
  if (this->has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArchiveTraceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jaeger.api_v2.ArchiveTraceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ArchiveTraceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArchiveTraceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jaeger.api_v2.ArchiveTraceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jaeger.api_v2.ArchiveTraceRequest)
    MergeFrom(*source);
  }
}

void ArchiveTraceRequest::MergeFrom(const ArchiveTraceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jaeger.api_v2.ArchiveTraceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trace_id().size() > 0) {
    _internal_set_trace_id(from._internal_trace_id());
  }
  if (from.has_start_time()) {
    _internal_mutable_start_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_time());
  }
  if (from.has_end_time()) {
    _internal_mutable_end_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end_time());
  }
}

void ArchiveTraceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jaeger.api_v2.ArchiveTraceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArchiveTraceRequest::CopyFrom(const ArchiveTraceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jaeger.api_v2.ArchiveTraceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArchiveTraceRequest::IsInitialized() const {
  return true;
}

void ArchiveTraceRequest::InternalSwap(ArchiveTraceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trace_id_.Swap(&other->trace_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArchiveTraceRequest, end_time_)
      + sizeof(ArchiveTraceRequest::end_time_)
      - PROTOBUF_FIELD_OFFSET(ArchiveTraceRequest, start_time_)>(
          reinterpret_cast<char*>(&start_time_),
          reinterpret_cast<char*>(&other->start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArchiveTraceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ArchiveTraceResponse::_Internal {
 public:
};

ArchiveTraceResponse::ArchiveTraceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jaeger.api_v2.ArchiveTraceResponse)
}
ArchiveTraceResponse::ArchiveTraceResponse(const ArchiveTraceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jaeger.api_v2.ArchiveTraceResponse)
}

void ArchiveTraceResponse::SharedCtor() {
}

ArchiveTraceResponse::~ArchiveTraceResponse() {
  // @@protoc_insertion_point(destructor:jaeger.api_v2.ArchiveTraceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArchiveTraceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ArchiveTraceResponse::ArenaDtor(void* object) {
  ArchiveTraceResponse* _this = reinterpret_cast< ArchiveTraceResponse* >(object);
  (void)_this;
}
void ArchiveTraceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArchiveTraceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArchiveTraceResponse& ArchiveTraceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArchiveTraceResponse_query_2eproto.base);
  return *internal_default_instance();
}


void ArchiveTraceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:jaeger.api_v2.ArchiveTraceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArchiveTraceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArchiveTraceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jaeger.api_v2.ArchiveTraceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jaeger.api_v2.ArchiveTraceResponse)
  return target;
}

size_t ArchiveTraceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jaeger.api_v2.ArchiveTraceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArchiveTraceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jaeger.api_v2.ArchiveTraceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ArchiveTraceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArchiveTraceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jaeger.api_v2.ArchiveTraceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jaeger.api_v2.ArchiveTraceResponse)
    MergeFrom(*source);
  }
}

void ArchiveTraceResponse::MergeFrom(const ArchiveTraceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jaeger.api_v2.ArchiveTraceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ArchiveTraceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jaeger.api_v2.ArchiveTraceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArchiveTraceResponse::CopyFrom(const ArchiveTraceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jaeger.api_v2.ArchiveTraceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArchiveTraceResponse::IsInitialized() const {
  return true;
}

void ArchiveTraceResponse::InternalSwap(ArchiveTraceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArchiveTraceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

TraceQueryParameters_TagsEntry_DoNotUse::TraceQueryParameters_TagsEntry_DoNotUse() {}
TraceQueryParameters_TagsEntry_DoNotUse::TraceQueryParameters_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TraceQueryParameters_TagsEntry_DoNotUse::MergeFrom(const TraceQueryParameters_TagsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TraceQueryParameters_TagsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TraceQueryParameters_TagsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class TraceQueryParameters::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& start_time_min(const TraceQueryParameters* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& start_time_max(const TraceQueryParameters* msg);
  static const PROTOBUF_NAMESPACE_ID::Duration& duration_min(const TraceQueryParameters* msg);
  static const PROTOBUF_NAMESPACE_ID::Duration& duration_max(const TraceQueryParameters* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
TraceQueryParameters::_Internal::start_time_min(const TraceQueryParameters* msg) {
  return *msg->start_time_min_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
TraceQueryParameters::_Internal::start_time_max(const TraceQueryParameters* msg) {
  return *msg->start_time_max_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
TraceQueryParameters::_Internal::duration_min(const TraceQueryParameters* msg) {
  return *msg->duration_min_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
TraceQueryParameters::_Internal::duration_max(const TraceQueryParameters* msg) {
  return *msg->duration_max_;
}
void TraceQueryParameters::clear_start_time_min() {
  if (GetArena() == nullptr && start_time_min_ != nullptr) {
    delete start_time_min_;
  }
  start_time_min_ = nullptr;
}
void TraceQueryParameters::clear_start_time_max() {
  if (GetArena() == nullptr && start_time_max_ != nullptr) {
    delete start_time_max_;
  }
  start_time_max_ = nullptr;
}
void TraceQueryParameters::clear_duration_min() {
  if (GetArena() == nullptr && duration_min_ != nullptr) {
    delete duration_min_;
  }
  duration_min_ = nullptr;
}
void TraceQueryParameters::clear_duration_max() {
  if (GetArena() == nullptr && duration_max_ != nullptr) {
    delete duration_max_;
  }
  duration_max_ = nullptr;
}
TraceQueryParameters::TraceQueryParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jaeger.api_v2.TraceQueryParameters)
}
TraceQueryParameters::TraceQueryParameters(const TraceQueryParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tags_.MergeFrom(from.tags_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_name().empty()) {
    service_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_service_name(), 
      GetArena());
  }
  operation_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operation_name().empty()) {
    operation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_operation_name(), 
      GetArena());
  }
  if (from._internal_has_start_time_min()) {
    start_time_min_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_time_min_);
  } else {
    start_time_min_ = nullptr;
  }
  if (from._internal_has_start_time_max()) {
    start_time_max_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_time_max_);
  } else {
    start_time_max_ = nullptr;
  }
  if (from._internal_has_duration_min()) {
    duration_min_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.duration_min_);
  } else {
    duration_min_ = nullptr;
  }
  if (from._internal_has_duration_max()) {
    duration_max_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.duration_max_);
  } else {
    duration_max_ = nullptr;
  }
  search_depth_ = from.search_depth_;
  // @@protoc_insertion_point(copy_constructor:jaeger.api_v2.TraceQueryParameters)
}

void TraceQueryParameters::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TraceQueryParameters_query_2eproto.base);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operation_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&start_time_min_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&search_depth_) -
      reinterpret_cast<char*>(&start_time_min_)) + sizeof(search_depth_));
}

TraceQueryParameters::~TraceQueryParameters() {
  // @@protoc_insertion_point(destructor:jaeger.api_v2.TraceQueryParameters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TraceQueryParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operation_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_time_min_;
  if (this != internal_default_instance()) delete start_time_max_;
  if (this != internal_default_instance()) delete duration_min_;
  if (this != internal_default_instance()) delete duration_max_;
}

void TraceQueryParameters::ArenaDtor(void* object) {
  TraceQueryParameters* _this = reinterpret_cast< TraceQueryParameters* >(object);
  (void)_this;
}
void TraceQueryParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TraceQueryParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TraceQueryParameters& TraceQueryParameters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TraceQueryParameters_query_2eproto.base);
  return *internal_default_instance();
}


void TraceQueryParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:jaeger.api_v2.TraceQueryParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  service_name_.ClearToEmpty();
  operation_name_.ClearToEmpty();
  if (GetArena() == nullptr && start_time_min_ != nullptr) {
    delete start_time_min_;
  }
  start_time_min_ = nullptr;
  if (GetArena() == nullptr && start_time_max_ != nullptr) {
    delete start_time_max_;
  }
  start_time_max_ = nullptr;
  if (GetArena() == nullptr && duration_min_ != nullptr) {
    delete duration_min_;
  }
  duration_min_ = nullptr;
  if (GetArena() == nullptr && duration_max_ != nullptr) {
    delete duration_max_;
  }
  duration_max_ = nullptr;
  search_depth_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceQueryParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jaeger.api_v2.TraceQueryParameters.service_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string operation_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_operation_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jaeger.api_v2.TraceQueryParameters.operation_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> tags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&tags_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_time_min = 4 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time_min(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_time_max = 5 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time_max(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration duration_min = 6 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration_min(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration duration_max = 7 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration_max(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 search_depth = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          search_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TraceQueryParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jaeger.api_v2.TraceQueryParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jaeger.api_v2.TraceQueryParameters.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // string operation_name = 2;
  if (this->operation_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operation_name().data(), static_cast<int>(this->_internal_operation_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jaeger.api_v2.TraceQueryParameters.operation_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_operation_name(), target);
  }

  // map<string, string> tags = 3;
  if (!this->_internal_tags().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "jaeger.api_v2.TraceQueryParameters.TagsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "jaeger.api_v2.TraceQueryParameters.TagsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_tags().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_tags().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TraceQueryParameters_TagsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it) {
        target = TraceQueryParameters_TagsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .google.protobuf.Timestamp start_time_min = 4 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->has_start_time_min()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::start_time_min(this), target, stream);
  }

  // .google.protobuf.Timestamp start_time_max = 5 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->has_start_time_max()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::start_time_max(this), target, stream);
  }

  // .google.protobuf.Duration duration_min = 6 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  if (this->has_duration_min()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::duration_min(this), target, stream);
  }

  // .google.protobuf.Duration duration_max = 7 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  if (this->has_duration_max()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::duration_max(this), target, stream);
  }

  // int32 search_depth = 8;
  if (this->search_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_search_depth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jaeger.api_v2.TraceQueryParameters)
  return target;
}

size_t TraceQueryParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jaeger.api_v2.TraceQueryParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> tags = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tags_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_tags().begin();
      it != this->_internal_tags().end(); ++it) {
    total_size += TraceQueryParameters_TagsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // string operation_name = 2;
  if (this->operation_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operation_name());
  }

  // .google.protobuf.Timestamp start_time_min = 4 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->has_start_time_min()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_min_);
  }

  // .google.protobuf.Timestamp start_time_max = 5 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->has_start_time_max()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_max_);
  }

  // .google.protobuf.Duration duration_min = 6 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  if (this->has_duration_min()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *duration_min_);
  }

  // .google.protobuf.Duration duration_max = 7 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  if (this->has_duration_max()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *duration_max_);
  }

  // int32 search_depth = 8;
  if (this->search_depth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_search_depth());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceQueryParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jaeger.api_v2.TraceQueryParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const TraceQueryParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TraceQueryParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jaeger.api_v2.TraceQueryParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jaeger.api_v2.TraceQueryParameters)
    MergeFrom(*source);
  }
}

void TraceQueryParameters::MergeFrom(const TraceQueryParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jaeger.api_v2.TraceQueryParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from.service_name().size() > 0) {
    _internal_set_service_name(from._internal_service_name());
  }
  if (from.operation_name().size() > 0) {
    _internal_set_operation_name(from._internal_operation_name());
  }
  if (from.has_start_time_min()) {
    _internal_mutable_start_time_min()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_time_min());
  }
  if (from.has_start_time_max()) {
    _internal_mutable_start_time_max()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_time_max());
  }
  if (from.has_duration_min()) {
    _internal_mutable_duration_min()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_duration_min());
  }
  if (from.has_duration_max()) {
    _internal_mutable_duration_max()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_duration_max());
  }
  if (from.search_depth() != 0) {
    _internal_set_search_depth(from._internal_search_depth());
  }
}

void TraceQueryParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jaeger.api_v2.TraceQueryParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraceQueryParameters::CopyFrom(const TraceQueryParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jaeger.api_v2.TraceQueryParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceQueryParameters::IsInitialized() const {
  return true;
}

void TraceQueryParameters::InternalSwap(TraceQueryParameters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tags_.Swap(&other->tags_);
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  operation_name_.Swap(&other->operation_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceQueryParameters, search_depth_)
      + sizeof(TraceQueryParameters::search_depth_)
      - PROTOBUF_FIELD_OFFSET(TraceQueryParameters, start_time_min_)>(
          reinterpret_cast<char*>(&start_time_min_),
          reinterpret_cast<char*>(&other->start_time_min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceQueryParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FindTracesRequest::_Internal {
 public:
  static const ::jaeger::api_v2::TraceQueryParameters& query(const FindTracesRequest* msg);
};

const ::jaeger::api_v2::TraceQueryParameters&
FindTracesRequest::_Internal::query(const FindTracesRequest* msg) {
  return *msg->query_;
}
FindTracesRequest::FindTracesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jaeger.api_v2.FindTracesRequest)
}
FindTracesRequest::FindTracesRequest(const FindTracesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_query()) {
    query_ = new ::jaeger::api_v2::TraceQueryParameters(*from.query_);
  } else {
    query_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:jaeger.api_v2.FindTracesRequest)
}

void FindTracesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FindTracesRequest_query_2eproto.base);
  query_ = nullptr;
}

FindTracesRequest::~FindTracesRequest() {
  // @@protoc_insertion_point(destructor:jaeger.api_v2.FindTracesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FindTracesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete query_;
}

void FindTracesRequest::ArenaDtor(void* object) {
  FindTracesRequest* _this = reinterpret_cast< FindTracesRequest* >(object);
  (void)_this;
}
void FindTracesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FindTracesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FindTracesRequest& FindTracesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FindTracesRequest_query_2eproto.base);
  return *internal_default_instance();
}


void FindTracesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:jaeger.api_v2.FindTracesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindTracesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .jaeger.api_v2.TraceQueryParameters query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FindTracesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jaeger.api_v2.FindTracesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .jaeger.api_v2.TraceQueryParameters query = 1;
  if (this->has_query()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::query(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jaeger.api_v2.FindTracesRequest)
  return target;
}

size_t FindTracesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jaeger.api_v2.FindTracesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .jaeger.api_v2.TraceQueryParameters query = 1;
  if (this->has_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *query_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FindTracesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jaeger.api_v2.FindTracesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FindTracesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FindTracesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jaeger.api_v2.FindTracesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jaeger.api_v2.FindTracesRequest)
    MergeFrom(*source);
  }
}

void FindTracesRequest::MergeFrom(const FindTracesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jaeger.api_v2.FindTracesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_query()) {
    _internal_mutable_query()->::jaeger::api_v2::TraceQueryParameters::MergeFrom(from._internal_query());
  }
}

void FindTracesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jaeger.api_v2.FindTracesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindTracesRequest::CopyFrom(const FindTracesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jaeger.api_v2.FindTracesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindTracesRequest::IsInitialized() const {
  return true;
}

void FindTracesRequest::InternalSwap(FindTracesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(query_, other->query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FindTracesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetServicesRequest::_Internal {
 public:
};

GetServicesRequest::GetServicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jaeger.api_v2.GetServicesRequest)
}
GetServicesRequest::GetServicesRequest(const GetServicesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jaeger.api_v2.GetServicesRequest)
}

void GetServicesRequest::SharedCtor() {
}

GetServicesRequest::~GetServicesRequest() {
  // @@protoc_insertion_point(destructor:jaeger.api_v2.GetServicesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetServicesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetServicesRequest::ArenaDtor(void* object) {
  GetServicesRequest* _this = reinterpret_cast< GetServicesRequest* >(object);
  (void)_this;
}
void GetServicesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServicesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServicesRequest& GetServicesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServicesRequest_query_2eproto.base);
  return *internal_default_instance();
}


void GetServicesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:jaeger.api_v2.GetServicesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServicesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServicesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jaeger.api_v2.GetServicesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jaeger.api_v2.GetServicesRequest)
  return target;
}

size_t GetServicesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jaeger.api_v2.GetServicesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServicesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jaeger.api_v2.GetServicesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServicesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServicesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jaeger.api_v2.GetServicesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jaeger.api_v2.GetServicesRequest)
    MergeFrom(*source);
  }
}

void GetServicesRequest::MergeFrom(const GetServicesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jaeger.api_v2.GetServicesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetServicesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jaeger.api_v2.GetServicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServicesRequest::CopyFrom(const GetServicesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jaeger.api_v2.GetServicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServicesRequest::IsInitialized() const {
  return true;
}

void GetServicesRequest::InternalSwap(GetServicesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServicesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetServicesResponse::_Internal {
 public:
};

GetServicesResponse::GetServicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  services_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jaeger.api_v2.GetServicesResponse)
}
GetServicesResponse::GetServicesResponse(const GetServicesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      services_(from.services_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jaeger.api_v2.GetServicesResponse)
}

void GetServicesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetServicesResponse_query_2eproto.base);
}

GetServicesResponse::~GetServicesResponse() {
  // @@protoc_insertion_point(destructor:jaeger.api_v2.GetServicesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetServicesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetServicesResponse::ArenaDtor(void* object) {
  GetServicesResponse* _this = reinterpret_cast< GetServicesResponse* >(object);
  (void)_this;
}
void GetServicesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServicesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServicesResponse& GetServicesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServicesResponse_query_2eproto.base);
  return *internal_default_instance();
}


void GetServicesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:jaeger.api_v2.GetServicesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  services_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServicesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string services = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_services();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jaeger.api_v2.GetServicesResponse.services"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServicesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jaeger.api_v2.GetServicesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string services = 1;
  for (int i = 0, n = this->_internal_services_size(); i < n; i++) {
    const auto& s = this->_internal_services(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jaeger.api_v2.GetServicesResponse.services");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jaeger.api_v2.GetServicesResponse)
  return target;
}

size_t GetServicesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jaeger.api_v2.GetServicesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string services = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(services_.size());
  for (int i = 0, n = services_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      services_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServicesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jaeger.api_v2.GetServicesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServicesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServicesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jaeger.api_v2.GetServicesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jaeger.api_v2.GetServicesResponse)
    MergeFrom(*source);
  }
}

void GetServicesResponse::MergeFrom(const GetServicesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jaeger.api_v2.GetServicesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  services_.MergeFrom(from.services_);
}

void GetServicesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jaeger.api_v2.GetServicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServicesResponse::CopyFrom(const GetServicesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jaeger.api_v2.GetServicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServicesResponse::IsInitialized() const {
  return true;
}

void GetServicesResponse::InternalSwap(GetServicesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  services_.InternalSwap(&other->services_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServicesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetOperationsRequest::_Internal {
 public:
};

GetOperationsRequest::GetOperationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jaeger.api_v2.GetOperationsRequest)
}
GetOperationsRequest::GetOperationsRequest(const GetOperationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  service_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service().empty()) {
    service_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_service(), 
      GetArena());
  }
  span_kind_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_span_kind().empty()) {
    span_kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_span_kind(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:jaeger.api_v2.GetOperationsRequest)
}

void GetOperationsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetOperationsRequest_query_2eproto.base);
  service_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  span_kind_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetOperationsRequest::~GetOperationsRequest() {
  // @@protoc_insertion_point(destructor:jaeger.api_v2.GetOperationsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetOperationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  service_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  span_kind_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetOperationsRequest::ArenaDtor(void* object) {
  GetOperationsRequest* _this = reinterpret_cast< GetOperationsRequest* >(object);
  (void)_this;
}
void GetOperationsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOperationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetOperationsRequest& GetOperationsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetOperationsRequest_query_2eproto.base);
  return *internal_default_instance();
}


void GetOperationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:jaeger.api_v2.GetOperationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_.ClearToEmpty();
  span_kind_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOperationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string service = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_service();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jaeger.api_v2.GetOperationsRequest.service"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string span_kind = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_span_kind();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jaeger.api_v2.GetOperationsRequest.span_kind"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOperationsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jaeger.api_v2.GetOperationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service = 1;
  if (this->service().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service().data(), static_cast<int>(this->_internal_service().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jaeger.api_v2.GetOperationsRequest.service");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service(), target);
  }

  // string span_kind = 2;
  if (this->span_kind().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_span_kind().data(), static_cast<int>(this->_internal_span_kind().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jaeger.api_v2.GetOperationsRequest.span_kind");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_span_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jaeger.api_v2.GetOperationsRequest)
  return target;
}

size_t GetOperationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jaeger.api_v2.GetOperationsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service = 1;
  if (this->service().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service());
  }

  // string span_kind = 2;
  if (this->span_kind().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_span_kind());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetOperationsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jaeger.api_v2.GetOperationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOperationsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetOperationsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jaeger.api_v2.GetOperationsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jaeger.api_v2.GetOperationsRequest)
    MergeFrom(*source);
  }
}

void GetOperationsRequest::MergeFrom(const GetOperationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jaeger.api_v2.GetOperationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service().size() > 0) {
    _internal_set_service(from._internal_service());
  }
  if (from.span_kind().size() > 0) {
    _internal_set_span_kind(from._internal_span_kind());
  }
}

void GetOperationsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jaeger.api_v2.GetOperationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOperationsRequest::CopyFrom(const GetOperationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jaeger.api_v2.GetOperationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOperationsRequest::IsInitialized() const {
  return true;
}

void GetOperationsRequest::InternalSwap(GetOperationsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  service_.Swap(&other->service_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  span_kind_.Swap(&other->span_kind_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOperationsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Operation::_Internal {
 public:
};

Operation::Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jaeger.api_v2.Operation)
}
Operation::Operation(const Operation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  span_kind_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_span_kind().empty()) {
    span_kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_span_kind(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:jaeger.api_v2.Operation)
}

void Operation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Operation_query_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  span_kind_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Operation::~Operation() {
  // @@protoc_insertion_point(destructor:jaeger.api_v2.Operation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Operation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  span_kind_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Operation::ArenaDtor(void* object) {
  Operation* _this = reinterpret_cast< Operation* >(object);
  (void)_this;
}
void Operation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Operation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Operation& Operation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Operation_query_2eproto.base);
  return *internal_default_instance();
}


void Operation::Clear() {
// @@protoc_insertion_point(message_clear_start:jaeger.api_v2.Operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  span_kind_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Operation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jaeger.api_v2.Operation.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string span_kind = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_span_kind();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jaeger.api_v2.Operation.span_kind"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Operation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jaeger.api_v2.Operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jaeger.api_v2.Operation.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string span_kind = 2;
  if (this->span_kind().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_span_kind().data(), static_cast<int>(this->_internal_span_kind().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jaeger.api_v2.Operation.span_kind");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_span_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jaeger.api_v2.Operation)
  return target;
}

size_t Operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jaeger.api_v2.Operation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string span_kind = 2;
  if (this->span_kind().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_span_kind());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Operation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jaeger.api_v2.Operation)
  GOOGLE_DCHECK_NE(&from, this);
  const Operation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Operation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jaeger.api_v2.Operation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jaeger.api_v2.Operation)
    MergeFrom(*source);
  }
}

void Operation::MergeFrom(const Operation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jaeger.api_v2.Operation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.span_kind().size() > 0) {
    _internal_set_span_kind(from._internal_span_kind());
  }
}

void Operation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jaeger.api_v2.Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Operation::CopyFrom(const Operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jaeger.api_v2.Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operation::IsInitialized() const {
  return true;
}

void Operation::InternalSwap(Operation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  span_kind_.Swap(&other->span_kind_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Operation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetOperationsResponse::_Internal {
 public:
};

GetOperationsResponse::GetOperationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  operationnames_(arena),
  operations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jaeger.api_v2.GetOperationsResponse)
}
GetOperationsResponse::GetOperationsResponse(const GetOperationsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      operationnames_(from.operationnames_),
      operations_(from.operations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jaeger.api_v2.GetOperationsResponse)
}

void GetOperationsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetOperationsResponse_query_2eproto.base);
}

GetOperationsResponse::~GetOperationsResponse() {
  // @@protoc_insertion_point(destructor:jaeger.api_v2.GetOperationsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetOperationsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetOperationsResponse::ArenaDtor(void* object) {
  GetOperationsResponse* _this = reinterpret_cast< GetOperationsResponse* >(object);
  (void)_this;
}
void GetOperationsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOperationsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetOperationsResponse& GetOperationsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetOperationsResponse_query_2eproto.base);
  return *internal_default_instance();
}


void GetOperationsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:jaeger.api_v2.GetOperationsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operationnames_.Clear();
  operations_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOperationsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string operationNames = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_operationnames();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jaeger.api_v2.GetOperationsResponse.operationNames"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .jaeger.api_v2.Operation operations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOperationsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jaeger.api_v2.GetOperationsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string operationNames = 1;
  for (int i = 0, n = this->_internal_operationnames_size(); i < n; i++) {
    const auto& s = this->_internal_operationnames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jaeger.api_v2.GetOperationsResponse.operationNames");
    target = stream->WriteString(1, s, target);
  }

  // repeated .jaeger.api_v2.Operation operations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_operations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_operations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jaeger.api_v2.GetOperationsResponse)
  return target;
}

size_t GetOperationsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jaeger.api_v2.GetOperationsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string operationNames = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(operationnames_.size());
  for (int i = 0, n = operationnames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      operationnames_.Get(i));
  }

  // repeated .jaeger.api_v2.Operation operations = 2;
  total_size += 1UL * this->_internal_operations_size();
  for (const auto& msg : this->operations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetOperationsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jaeger.api_v2.GetOperationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOperationsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetOperationsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jaeger.api_v2.GetOperationsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jaeger.api_v2.GetOperationsResponse)
    MergeFrom(*source);
  }
}

void GetOperationsResponse::MergeFrom(const GetOperationsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jaeger.api_v2.GetOperationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operationnames_.MergeFrom(from.operationnames_);
  operations_.MergeFrom(from.operations_);
}

void GetOperationsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jaeger.api_v2.GetOperationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOperationsResponse::CopyFrom(const GetOperationsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jaeger.api_v2.GetOperationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOperationsResponse::IsInitialized() const {
  return true;
}

void GetOperationsResponse::InternalSwap(GetOperationsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  operationnames_.InternalSwap(&other->operationnames_);
  operations_.InternalSwap(&other->operations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOperationsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetDependenciesRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const GetDependenciesRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const GetDependenciesRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
GetDependenciesRequest::_Internal::start_time(const GetDependenciesRequest* msg) {
  return *msg->start_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
GetDependenciesRequest::_Internal::end_time(const GetDependenciesRequest* msg) {
  return *msg->end_time_;
}
void GetDependenciesRequest::clear_start_time() {
  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
void GetDependenciesRequest::clear_end_time() {
  if (GetArena() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
}
GetDependenciesRequest::GetDependenciesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jaeger.api_v2.GetDependenciesRequest)
}
GetDependenciesRequest::GetDependenciesRequest(const GetDependenciesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start_time()) {
    start_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from._internal_has_end_time()) {
    end_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_time_);
  } else {
    end_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:jaeger.api_v2.GetDependenciesRequest)
}

void GetDependenciesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetDependenciesRequest_query_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&start_time_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
}

GetDependenciesRequest::~GetDependenciesRequest() {
  // @@protoc_insertion_point(destructor:jaeger.api_v2.GetDependenciesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDependenciesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
}

void GetDependenciesRequest::ArenaDtor(void* object) {
  GetDependenciesRequest* _this = reinterpret_cast< GetDependenciesRequest* >(object);
  (void)_this;
}
void GetDependenciesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDependenciesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDependenciesRequest& GetDependenciesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDependenciesRequest_query_2eproto.base);
  return *internal_default_instance();
}


void GetDependenciesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:jaeger.api_v2.GetDependenciesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArena() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDependenciesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp start_time = 1 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDependenciesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jaeger.api_v2.GetDependenciesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start_time = 1 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->has_start_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::start_time(this), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->has_end_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::end_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jaeger.api_v2.GetDependenciesRequest)
  return target;
}

size_t GetDependenciesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jaeger.api_v2.GetDependenciesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start_time = 1 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Timestamp end_time = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDependenciesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jaeger.api_v2.GetDependenciesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDependenciesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDependenciesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jaeger.api_v2.GetDependenciesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jaeger.api_v2.GetDependenciesRequest)
    MergeFrom(*source);
  }
}

void GetDependenciesRequest::MergeFrom(const GetDependenciesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jaeger.api_v2.GetDependenciesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start_time()) {
    _internal_mutable_start_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_time());
  }
  if (from.has_end_time()) {
    _internal_mutable_end_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end_time());
  }
}

void GetDependenciesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jaeger.api_v2.GetDependenciesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDependenciesRequest::CopyFrom(const GetDependenciesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jaeger.api_v2.GetDependenciesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDependenciesRequest::IsInitialized() const {
  return true;
}

void GetDependenciesRequest::InternalSwap(GetDependenciesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetDependenciesRequest, end_time_)
      + sizeof(GetDependenciesRequest::end_time_)
      - PROTOBUF_FIELD_OFFSET(GetDependenciesRequest, start_time_)>(
          reinterpret_cast<char*>(&start_time_),
          reinterpret_cast<char*>(&other->start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDependenciesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetDependenciesResponse::_Internal {
 public:
};

void GetDependenciesResponse::clear_dependencies() {
  dependencies_.Clear();
}
GetDependenciesResponse::GetDependenciesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dependencies_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jaeger.api_v2.GetDependenciesResponse)
}
GetDependenciesResponse::GetDependenciesResponse(const GetDependenciesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dependencies_(from.dependencies_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jaeger.api_v2.GetDependenciesResponse)
}

void GetDependenciesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetDependenciesResponse_query_2eproto.base);
}

GetDependenciesResponse::~GetDependenciesResponse() {
  // @@protoc_insertion_point(destructor:jaeger.api_v2.GetDependenciesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDependenciesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetDependenciesResponse::ArenaDtor(void* object) {
  GetDependenciesResponse* _this = reinterpret_cast< GetDependenciesResponse* >(object);
  (void)_this;
}
void GetDependenciesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDependenciesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDependenciesResponse& GetDependenciesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDependenciesResponse_query_2eproto.base);
  return *internal_default_instance();
}


void GetDependenciesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:jaeger.api_v2.GetDependenciesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dependencies_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDependenciesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .jaeger.api_v2.DependencyLink dependencies = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dependencies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDependenciesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jaeger.api_v2.GetDependenciesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jaeger.api_v2.DependencyLink dependencies = 1 [(.gogoproto.nullable) = false];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dependencies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_dependencies(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jaeger.api_v2.GetDependenciesResponse)
  return target;
}

size_t GetDependenciesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jaeger.api_v2.GetDependenciesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .jaeger.api_v2.DependencyLink dependencies = 1 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_dependencies_size();
  for (const auto& msg : this->dependencies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDependenciesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jaeger.api_v2.GetDependenciesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDependenciesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDependenciesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jaeger.api_v2.GetDependenciesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jaeger.api_v2.GetDependenciesResponse)
    MergeFrom(*source);
  }
}

void GetDependenciesResponse::MergeFrom(const GetDependenciesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jaeger.api_v2.GetDependenciesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dependencies_.MergeFrom(from.dependencies_);
}

void GetDependenciesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jaeger.api_v2.GetDependenciesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDependenciesResponse::CopyFrom(const GetDependenciesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jaeger.api_v2.GetDependenciesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDependenciesResponse::IsInitialized() const {
  return true;
}

void GetDependenciesResponse::InternalSwap(GetDependenciesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dependencies_.InternalSwap(&other->dependencies_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDependenciesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace api_v2
}  // namespace jaeger
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::jaeger::api_v2::GetTraceRequest* Arena::CreateMaybeMessage< ::jaeger::api_v2::GetTraceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jaeger::api_v2::GetTraceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::jaeger::api_v2::SpansResponseChunk* Arena::CreateMaybeMessage< ::jaeger::api_v2::SpansResponseChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jaeger::api_v2::SpansResponseChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::jaeger::api_v2::ArchiveTraceRequest* Arena::CreateMaybeMessage< ::jaeger::api_v2::ArchiveTraceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jaeger::api_v2::ArchiveTraceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::jaeger::api_v2::ArchiveTraceResponse* Arena::CreateMaybeMessage< ::jaeger::api_v2::ArchiveTraceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jaeger::api_v2::ArchiveTraceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::jaeger::api_v2::TraceQueryParameters_TagsEntry_DoNotUse* Arena::CreateMaybeMessage< ::jaeger::api_v2::TraceQueryParameters_TagsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jaeger::api_v2::TraceQueryParameters_TagsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::jaeger::api_v2::TraceQueryParameters* Arena::CreateMaybeMessage< ::jaeger::api_v2::TraceQueryParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jaeger::api_v2::TraceQueryParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::jaeger::api_v2::FindTracesRequest* Arena::CreateMaybeMessage< ::jaeger::api_v2::FindTracesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jaeger::api_v2::FindTracesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::jaeger::api_v2::GetServicesRequest* Arena::CreateMaybeMessage< ::jaeger::api_v2::GetServicesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jaeger::api_v2::GetServicesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::jaeger::api_v2::GetServicesResponse* Arena::CreateMaybeMessage< ::jaeger::api_v2::GetServicesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jaeger::api_v2::GetServicesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::jaeger::api_v2::GetOperationsRequest* Arena::CreateMaybeMessage< ::jaeger::api_v2::GetOperationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jaeger::api_v2::GetOperationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::jaeger::api_v2::Operation* Arena::CreateMaybeMessage< ::jaeger::api_v2::Operation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jaeger::api_v2::Operation >(arena);
}
template<> PROTOBUF_NOINLINE ::jaeger::api_v2::GetOperationsResponse* Arena::CreateMaybeMessage< ::jaeger::api_v2::GetOperationsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jaeger::api_v2::GetOperationsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::jaeger::api_v2::GetDependenciesRequest* Arena::CreateMaybeMessage< ::jaeger::api_v2::GetDependenciesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jaeger::api_v2::GetDependenciesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::jaeger::api_v2::GetDependenciesResponse* Arena::CreateMaybeMessage< ::jaeger::api_v2::GetDependenciesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jaeger::api_v2::GetDependenciesResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
