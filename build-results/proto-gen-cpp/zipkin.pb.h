// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zipkin.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_zipkin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_zipkin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zipkin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_zipkin_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zipkin_2eproto;
namespace zipkin {
namespace proto3 {
class Annotation;
class AnnotationDefaultTypeInternal;
extern AnnotationDefaultTypeInternal _Annotation_default_instance_;
class Endpoint;
class EndpointDefaultTypeInternal;
extern EndpointDefaultTypeInternal _Endpoint_default_instance_;
class ListOfSpans;
class ListOfSpansDefaultTypeInternal;
extern ListOfSpansDefaultTypeInternal _ListOfSpans_default_instance_;
class ReportResponse;
class ReportResponseDefaultTypeInternal;
extern ReportResponseDefaultTypeInternal _ReportResponse_default_instance_;
class Span;
class SpanDefaultTypeInternal;
extern SpanDefaultTypeInternal _Span_default_instance_;
class Span_TagsEntry_DoNotUse;
class Span_TagsEntry_DoNotUseDefaultTypeInternal;
extern Span_TagsEntry_DoNotUseDefaultTypeInternal _Span_TagsEntry_DoNotUse_default_instance_;
}  // namespace proto3
}  // namespace zipkin
PROTOBUF_NAMESPACE_OPEN
template<> ::zipkin::proto3::Annotation* Arena::CreateMaybeMessage<::zipkin::proto3::Annotation>(Arena*);
template<> ::zipkin::proto3::Endpoint* Arena::CreateMaybeMessage<::zipkin::proto3::Endpoint>(Arena*);
template<> ::zipkin::proto3::ListOfSpans* Arena::CreateMaybeMessage<::zipkin::proto3::ListOfSpans>(Arena*);
template<> ::zipkin::proto3::ReportResponse* Arena::CreateMaybeMessage<::zipkin::proto3::ReportResponse>(Arena*);
template<> ::zipkin::proto3::Span* Arena::CreateMaybeMessage<::zipkin::proto3::Span>(Arena*);
template<> ::zipkin::proto3::Span_TagsEntry_DoNotUse* Arena::CreateMaybeMessage<::zipkin::proto3::Span_TagsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zipkin {
namespace proto3 {

enum Span_Kind : int {
  Span_Kind_SPAN_KIND_UNSPECIFIED = 0,
  Span_Kind_CLIENT = 1,
  Span_Kind_SERVER = 2,
  Span_Kind_PRODUCER = 3,
  Span_Kind_CONSUMER = 4,
  Span_Kind_Span_Kind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Span_Kind_Span_Kind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Span_Kind_IsValid(int value);
constexpr Span_Kind Span_Kind_Kind_MIN = Span_Kind_SPAN_KIND_UNSPECIFIED;
constexpr Span_Kind Span_Kind_Kind_MAX = Span_Kind_CONSUMER;
constexpr int Span_Kind_Kind_ARRAYSIZE = Span_Kind_Kind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Span_Kind_descriptor();
template<typename T>
inline const std::string& Span_Kind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Span_Kind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Span_Kind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Span_Kind_descriptor(), enum_t_value);
}
inline bool Span_Kind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Span_Kind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Span_Kind>(
    Span_Kind_descriptor(), name, value);
}
// ===================================================================

class Span_TagsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Span_TagsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Span_TagsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Span_TagsEntry_DoNotUse();
  explicit Span_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Span_TagsEntry_DoNotUse& other);
  static const Span_TagsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Span_TagsEntry_DoNotUse*>(&_Span_TagsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "zipkin.proto3.Span.TagsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "zipkin.proto3.Span.TagsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zipkin_2eproto);
    return ::descriptor_table_zipkin_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class Span PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zipkin.proto3.Span) */ {
 public:
  inline Span() : Span(nullptr) {}
  virtual ~Span();

  Span(const Span& from);
  Span(Span&& from) noexcept
    : Span() {
    *this = ::std::move(from);
  }

  inline Span& operator=(const Span& from) {
    CopyFrom(from);
    return *this;
  }
  inline Span& operator=(Span&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Span& default_instance();

  static inline const Span* internal_default_instance() {
    return reinterpret_cast<const Span*>(
               &_Span_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Span& a, Span& b) {
    a.Swap(&b);
  }
  inline void Swap(Span* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Span* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Span* New() const final {
    return CreateMaybeMessage<Span>(nullptr);
  }

  Span* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Span>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Span& from);
  void MergeFrom(const Span& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Span* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zipkin.proto3.Span";
  }
  protected:
  explicit Span(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zipkin_2eproto);
    return ::descriptor_table_zipkin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  typedef Span_Kind Kind;
  static constexpr Kind SPAN_KIND_UNSPECIFIED =
    Span_Kind_SPAN_KIND_UNSPECIFIED;
  static constexpr Kind CLIENT =
    Span_Kind_CLIENT;
  static constexpr Kind SERVER =
    Span_Kind_SERVER;
  static constexpr Kind PRODUCER =
    Span_Kind_PRODUCER;
  static constexpr Kind CONSUMER =
    Span_Kind_CONSUMER;
  static inline bool Kind_IsValid(int value) {
    return Span_Kind_IsValid(value);
  }
  static constexpr Kind Kind_MIN =
    Span_Kind_Kind_MIN;
  static constexpr Kind Kind_MAX =
    Span_Kind_Kind_MAX;
  static constexpr int Kind_ARRAYSIZE =
    Span_Kind_Kind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Kind_descriptor() {
    return Span_Kind_descriptor();
  }
  template<typename T>
  static inline const std::string& Kind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Kind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Kind_Name.");
    return Span_Kind_Name(enum_t_value);
  }
  static inline bool Kind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Kind* value) {
    return Span_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 10,
    kTagsFieldNumber = 11,
    kTraceIdFieldNumber = 1,
    kParentIdFieldNumber = 2,
    kIdFieldNumber = 3,
    kNameFieldNumber = 5,
    kLocalEndpointFieldNumber = 8,
    kRemoteEndpointFieldNumber = 9,
    kTimestampFieldNumber = 6,
    kDurationFieldNumber = 7,
    kKindFieldNumber = 4,
    kDebugFieldNumber = 12,
    kSharedFieldNumber = 13,
  };
  // repeated .zipkin.proto3.Annotation annotations = 10;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  ::zipkin::proto3::Annotation* mutable_annotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zipkin::proto3::Annotation >*
      mutable_annotations();
  private:
  const ::zipkin::proto3::Annotation& _internal_annotations(int index) const;
  ::zipkin::proto3::Annotation* _internal_add_annotations();
  public:
  const ::zipkin::proto3::Annotation& annotations(int index) const;
  ::zipkin::proto3::Annotation* add_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zipkin::proto3::Annotation >&
      annotations() const;

  // map<string, string> tags = 11;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_tags();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_tags();

  // bytes trace_id = 1;
  void clear_trace_id();
  const std::string& trace_id() const;
  void set_trace_id(const std::string& value);
  void set_trace_id(std::string&& value);
  void set_trace_id(const char* value);
  void set_trace_id(const void* value, size_t size);
  std::string* mutable_trace_id();
  std::string* release_trace_id();
  void set_allocated_trace_id(std::string* trace_id);
  private:
  const std::string& _internal_trace_id() const;
  void _internal_set_trace_id(const std::string& value);
  std::string* _internal_mutable_trace_id();
  public:

  // bytes parent_id = 2;
  void clear_parent_id();
  const std::string& parent_id() const;
  void set_parent_id(const std::string& value);
  void set_parent_id(std::string&& value);
  void set_parent_id(const char* value);
  void set_parent_id(const void* value, size_t size);
  std::string* mutable_parent_id();
  std::string* release_parent_id();
  void set_allocated_parent_id(std::string* parent_id);
  private:
  const std::string& _internal_parent_id() const;
  void _internal_set_parent_id(const std::string& value);
  std::string* _internal_mutable_parent_id();
  public:

  // bytes id = 3;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 5;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .zipkin.proto3.Endpoint local_endpoint = 8;
  bool has_local_endpoint() const;
  private:
  bool _internal_has_local_endpoint() const;
  public:
  void clear_local_endpoint();
  const ::zipkin::proto3::Endpoint& local_endpoint() const;
  ::zipkin::proto3::Endpoint* release_local_endpoint();
  ::zipkin::proto3::Endpoint* mutable_local_endpoint();
  void set_allocated_local_endpoint(::zipkin::proto3::Endpoint* local_endpoint);
  private:
  const ::zipkin::proto3::Endpoint& _internal_local_endpoint() const;
  ::zipkin::proto3::Endpoint* _internal_mutable_local_endpoint();
  public:
  void unsafe_arena_set_allocated_local_endpoint(
      ::zipkin::proto3::Endpoint* local_endpoint);
  ::zipkin::proto3::Endpoint* unsafe_arena_release_local_endpoint();

  // .zipkin.proto3.Endpoint remote_endpoint = 9;
  bool has_remote_endpoint() const;
  private:
  bool _internal_has_remote_endpoint() const;
  public:
  void clear_remote_endpoint();
  const ::zipkin::proto3::Endpoint& remote_endpoint() const;
  ::zipkin::proto3::Endpoint* release_remote_endpoint();
  ::zipkin::proto3::Endpoint* mutable_remote_endpoint();
  void set_allocated_remote_endpoint(::zipkin::proto3::Endpoint* remote_endpoint);
  private:
  const ::zipkin::proto3::Endpoint& _internal_remote_endpoint() const;
  ::zipkin::proto3::Endpoint* _internal_mutable_remote_endpoint();
  public:
  void unsafe_arena_set_allocated_remote_endpoint(
      ::zipkin::proto3::Endpoint* remote_endpoint);
  ::zipkin::proto3::Endpoint* unsafe_arena_release_remote_endpoint();

  // fixed64 timestamp = 6;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 duration = 7;
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::uint64 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .zipkin.proto3.Span.Kind kind = 4;
  void clear_kind();
  ::zipkin::proto3::Span_Kind kind() const;
  void set_kind(::zipkin::proto3::Span_Kind value);
  private:
  ::zipkin::proto3::Span_Kind _internal_kind() const;
  void _internal_set_kind(::zipkin::proto3::Span_Kind value);
  public:

  // bool debug = 12;
  void clear_debug();
  bool debug() const;
  void set_debug(bool value);
  private:
  bool _internal_debug() const;
  void _internal_set_debug(bool value);
  public:

  // bool shared = 13;
  void clear_shared();
  bool shared() const;
  void set_shared(bool value);
  private:
  bool _internal_shared() const;
  void _internal_set_shared(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zipkin.proto3.Span)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zipkin::proto3::Annotation > annotations_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Span_TagsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::zipkin::proto3::Endpoint* local_endpoint_;
  ::zipkin::proto3::Endpoint* remote_endpoint_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 duration_;
  int kind_;
  bool debug_;
  bool shared_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zipkin_2eproto;
};
// -------------------------------------------------------------------

class Endpoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zipkin.proto3.Endpoint) */ {
 public:
  inline Endpoint() : Endpoint(nullptr) {}
  virtual ~Endpoint();

  Endpoint(const Endpoint& from);
  Endpoint(Endpoint&& from) noexcept
    : Endpoint() {
    *this = ::std::move(from);
  }

  inline Endpoint& operator=(const Endpoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Endpoint& operator=(Endpoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Endpoint& default_instance();

  static inline const Endpoint* internal_default_instance() {
    return reinterpret_cast<const Endpoint*>(
               &_Endpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Endpoint& a, Endpoint& b) {
    a.Swap(&b);
  }
  inline void Swap(Endpoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Endpoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Endpoint* New() const final {
    return CreateMaybeMessage<Endpoint>(nullptr);
  }

  Endpoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Endpoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Endpoint& from);
  void MergeFrom(const Endpoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Endpoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zipkin.proto3.Endpoint";
  }
  protected:
  explicit Endpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zipkin_2eproto);
    return ::descriptor_table_zipkin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
    kIpv4FieldNumber = 2,
    kIpv6FieldNumber = 3,
    kPortFieldNumber = 4,
  };
  // string service_name = 1;
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // bytes ipv4 = 2;
  void clear_ipv4();
  const std::string& ipv4() const;
  void set_ipv4(const std::string& value);
  void set_ipv4(std::string&& value);
  void set_ipv4(const char* value);
  void set_ipv4(const void* value, size_t size);
  std::string* mutable_ipv4();
  std::string* release_ipv4();
  void set_allocated_ipv4(std::string* ipv4);
  private:
  const std::string& _internal_ipv4() const;
  void _internal_set_ipv4(const std::string& value);
  std::string* _internal_mutable_ipv4();
  public:

  // bytes ipv6 = 3;
  void clear_ipv6();
  const std::string& ipv6() const;
  void set_ipv6(const std::string& value);
  void set_ipv6(std::string&& value);
  void set_ipv6(const char* value);
  void set_ipv6(const void* value, size_t size);
  std::string* mutable_ipv6();
  std::string* release_ipv6();
  void set_allocated_ipv6(std::string* ipv6);
  private:
  const std::string& _internal_ipv6() const;
  void _internal_set_ipv6(const std::string& value);
  std::string* _internal_mutable_ipv6();
  public:

  // int32 port = 4;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zipkin.proto3.Endpoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv6_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zipkin_2eproto;
};
// -------------------------------------------------------------------

class Annotation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zipkin.proto3.Annotation) */ {
 public:
  inline Annotation() : Annotation(nullptr) {}
  virtual ~Annotation();

  Annotation(const Annotation& from);
  Annotation(Annotation&& from) noexcept
    : Annotation() {
    *this = ::std::move(from);
  }

  inline Annotation& operator=(const Annotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Annotation& operator=(Annotation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Annotation& default_instance();

  static inline const Annotation* internal_default_instance() {
    return reinterpret_cast<const Annotation*>(
               &_Annotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Annotation& a, Annotation& b) {
    a.Swap(&b);
  }
  inline void Swap(Annotation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Annotation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Annotation* New() const final {
    return CreateMaybeMessage<Annotation>(nullptr);
  }

  Annotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Annotation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Annotation& from);
  void MergeFrom(const Annotation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Annotation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zipkin.proto3.Annotation";
  }
  protected:
  explicit Annotation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zipkin_2eproto);
    return ::descriptor_table_zipkin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // fixed64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:zipkin.proto3.Annotation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zipkin_2eproto;
};
// -------------------------------------------------------------------

class ListOfSpans PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zipkin.proto3.ListOfSpans) */ {
 public:
  inline ListOfSpans() : ListOfSpans(nullptr) {}
  virtual ~ListOfSpans();

  ListOfSpans(const ListOfSpans& from);
  ListOfSpans(ListOfSpans&& from) noexcept
    : ListOfSpans() {
    *this = ::std::move(from);
  }

  inline ListOfSpans& operator=(const ListOfSpans& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListOfSpans& operator=(ListOfSpans&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListOfSpans& default_instance();

  static inline const ListOfSpans* internal_default_instance() {
    return reinterpret_cast<const ListOfSpans*>(
               &_ListOfSpans_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListOfSpans& a, ListOfSpans& b) {
    a.Swap(&b);
  }
  inline void Swap(ListOfSpans* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListOfSpans* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListOfSpans* New() const final {
    return CreateMaybeMessage<ListOfSpans>(nullptr);
  }

  ListOfSpans* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListOfSpans>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListOfSpans& from);
  void MergeFrom(const ListOfSpans& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListOfSpans* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zipkin.proto3.ListOfSpans";
  }
  protected:
  explicit ListOfSpans(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zipkin_2eproto);
    return ::descriptor_table_zipkin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpansFieldNumber = 1,
  };
  // repeated .zipkin.proto3.Span spans = 1;
  int spans_size() const;
  private:
  int _internal_spans_size() const;
  public:
  void clear_spans();
  ::zipkin::proto3::Span* mutable_spans(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zipkin::proto3::Span >*
      mutable_spans();
  private:
  const ::zipkin::proto3::Span& _internal_spans(int index) const;
  ::zipkin::proto3::Span* _internal_add_spans();
  public:
  const ::zipkin::proto3::Span& spans(int index) const;
  ::zipkin::proto3::Span* add_spans();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zipkin::proto3::Span >&
      spans() const;

  // @@protoc_insertion_point(class_scope:zipkin.proto3.ListOfSpans)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zipkin::proto3::Span > spans_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zipkin_2eproto;
};
// -------------------------------------------------------------------

class ReportResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zipkin.proto3.ReportResponse) */ {
 public:
  inline ReportResponse() : ReportResponse(nullptr) {}
  virtual ~ReportResponse();

  ReportResponse(const ReportResponse& from);
  ReportResponse(ReportResponse&& from) noexcept
    : ReportResponse() {
    *this = ::std::move(from);
  }

  inline ReportResponse& operator=(const ReportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportResponse& operator=(ReportResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReportResponse& default_instance();

  static inline const ReportResponse* internal_default_instance() {
    return reinterpret_cast<const ReportResponse*>(
               &_ReportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ReportResponse& a, ReportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReportResponse* New() const final {
    return CreateMaybeMessage<ReportResponse>(nullptr);
  }

  ReportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReportResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReportResponse& from);
  void MergeFrom(const ReportResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zipkin.proto3.ReportResponse";
  }
  protected:
  explicit ReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zipkin_2eproto);
    return ::descriptor_table_zipkin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:zipkin.proto3.ReportResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zipkin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Span

// bytes trace_id = 1;
inline void Span::clear_trace_id() {
  trace_id_.ClearToEmpty();
}
inline const std::string& Span::trace_id() const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.Span.trace_id)
  return _internal_trace_id();
}
inline void Span::set_trace_id(const std::string& value) {
  _internal_set_trace_id(value);
  // @@protoc_insertion_point(field_set:zipkin.proto3.Span.trace_id)
}
inline std::string* Span::mutable_trace_id() {
  // @@protoc_insertion_point(field_mutable:zipkin.proto3.Span.trace_id)
  return _internal_mutable_trace_id();
}
inline const std::string& Span::_internal_trace_id() const {
  return trace_id_.Get();
}
inline void Span::_internal_set_trace_id(const std::string& value) {
  
  trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Span::set_trace_id(std::string&& value) {
  
  trace_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zipkin.proto3.Span.trace_id)
}
inline void Span::set_trace_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:zipkin.proto3.Span.trace_id)
}
inline void Span::set_trace_id(const void* value,
    size_t size) {
  
  trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zipkin.proto3.Span.trace_id)
}
inline std::string* Span::_internal_mutable_trace_id() {
  
  return trace_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Span::release_trace_id() {
  // @@protoc_insertion_point(field_release:zipkin.proto3.Span.trace_id)
  return trace_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Span::set_allocated_trace_id(std::string* trace_id) {
  if (trace_id != nullptr) {
    
  } else {
    
  }
  trace_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trace_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zipkin.proto3.Span.trace_id)
}

// bytes parent_id = 2;
inline void Span::clear_parent_id() {
  parent_id_.ClearToEmpty();
}
inline const std::string& Span::parent_id() const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.Span.parent_id)
  return _internal_parent_id();
}
inline void Span::set_parent_id(const std::string& value) {
  _internal_set_parent_id(value);
  // @@protoc_insertion_point(field_set:zipkin.proto3.Span.parent_id)
}
inline std::string* Span::mutable_parent_id() {
  // @@protoc_insertion_point(field_mutable:zipkin.proto3.Span.parent_id)
  return _internal_mutable_parent_id();
}
inline const std::string& Span::_internal_parent_id() const {
  return parent_id_.Get();
}
inline void Span::_internal_set_parent_id(const std::string& value) {
  
  parent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Span::set_parent_id(std::string&& value) {
  
  parent_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zipkin.proto3.Span.parent_id)
}
inline void Span::set_parent_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:zipkin.proto3.Span.parent_id)
}
inline void Span::set_parent_id(const void* value,
    size_t size) {
  
  parent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zipkin.proto3.Span.parent_id)
}
inline std::string* Span::_internal_mutable_parent_id() {
  
  return parent_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Span::release_parent_id() {
  // @@protoc_insertion_point(field_release:zipkin.proto3.Span.parent_id)
  return parent_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Span::set_allocated_parent_id(std::string* parent_id) {
  if (parent_id != nullptr) {
    
  } else {
    
  }
  parent_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zipkin.proto3.Span.parent_id)
}

// bytes id = 3;
inline void Span::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Span::id() const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.Span.id)
  return _internal_id();
}
inline void Span::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:zipkin.proto3.Span.id)
}
inline std::string* Span::mutable_id() {
  // @@protoc_insertion_point(field_mutable:zipkin.proto3.Span.id)
  return _internal_mutable_id();
}
inline const std::string& Span::_internal_id() const {
  return id_.Get();
}
inline void Span::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Span::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zipkin.proto3.Span.id)
}
inline void Span::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:zipkin.proto3.Span.id)
}
inline void Span::set_id(const void* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zipkin.proto3.Span.id)
}
inline std::string* Span::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Span::release_id() {
  // @@protoc_insertion_point(field_release:zipkin.proto3.Span.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Span::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zipkin.proto3.Span.id)
}

// .zipkin.proto3.Span.Kind kind = 4;
inline void Span::clear_kind() {
  kind_ = 0;
}
inline ::zipkin::proto3::Span_Kind Span::_internal_kind() const {
  return static_cast< ::zipkin::proto3::Span_Kind >(kind_);
}
inline ::zipkin::proto3::Span_Kind Span::kind() const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.Span.kind)
  return _internal_kind();
}
inline void Span::_internal_set_kind(::zipkin::proto3::Span_Kind value) {
  
  kind_ = value;
}
inline void Span::set_kind(::zipkin::proto3::Span_Kind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:zipkin.proto3.Span.kind)
}

// string name = 5;
inline void Span::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Span::name() const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.Span.name)
  return _internal_name();
}
inline void Span::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:zipkin.proto3.Span.name)
}
inline std::string* Span::mutable_name() {
  // @@protoc_insertion_point(field_mutable:zipkin.proto3.Span.name)
  return _internal_mutable_name();
}
inline const std::string& Span::_internal_name() const {
  return name_.Get();
}
inline void Span::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Span::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zipkin.proto3.Span.name)
}
inline void Span::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:zipkin.proto3.Span.name)
}
inline void Span::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zipkin.proto3.Span.name)
}
inline std::string* Span::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Span::release_name() {
  // @@protoc_insertion_point(field_release:zipkin.proto3.Span.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Span::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zipkin.proto3.Span.name)
}

// fixed64 timestamp = 6;
inline void Span::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Span::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Span::timestamp() const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.Span.timestamp)
  return _internal_timestamp();
}
inline void Span::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void Span::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:zipkin.proto3.Span.timestamp)
}

// uint64 duration = 7;
inline void Span::clear_duration() {
  duration_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Span::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Span::duration() const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.Span.duration)
  return _internal_duration();
}
inline void Span::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  duration_ = value;
}
inline void Span::set_duration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:zipkin.proto3.Span.duration)
}

// .zipkin.proto3.Endpoint local_endpoint = 8;
inline bool Span::_internal_has_local_endpoint() const {
  return this != internal_default_instance() && local_endpoint_ != nullptr;
}
inline bool Span::has_local_endpoint() const {
  return _internal_has_local_endpoint();
}
inline void Span::clear_local_endpoint() {
  if (GetArena() == nullptr && local_endpoint_ != nullptr) {
    delete local_endpoint_;
  }
  local_endpoint_ = nullptr;
}
inline const ::zipkin::proto3::Endpoint& Span::_internal_local_endpoint() const {
  const ::zipkin::proto3::Endpoint* p = local_endpoint_;
  return p != nullptr ? *p : reinterpret_cast<const ::zipkin::proto3::Endpoint&>(
      ::zipkin::proto3::_Endpoint_default_instance_);
}
inline const ::zipkin::proto3::Endpoint& Span::local_endpoint() const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.Span.local_endpoint)
  return _internal_local_endpoint();
}
inline void Span::unsafe_arena_set_allocated_local_endpoint(
    ::zipkin::proto3::Endpoint* local_endpoint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_endpoint_);
  }
  local_endpoint_ = local_endpoint;
  if (local_endpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zipkin.proto3.Span.local_endpoint)
}
inline ::zipkin::proto3::Endpoint* Span::release_local_endpoint() {
  
  ::zipkin::proto3::Endpoint* temp = local_endpoint_;
  local_endpoint_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zipkin::proto3::Endpoint* Span::unsafe_arena_release_local_endpoint() {
  // @@protoc_insertion_point(field_release:zipkin.proto3.Span.local_endpoint)
  
  ::zipkin::proto3::Endpoint* temp = local_endpoint_;
  local_endpoint_ = nullptr;
  return temp;
}
inline ::zipkin::proto3::Endpoint* Span::_internal_mutable_local_endpoint() {
  
  if (local_endpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::zipkin::proto3::Endpoint>(GetArena());
    local_endpoint_ = p;
  }
  return local_endpoint_;
}
inline ::zipkin::proto3::Endpoint* Span::mutable_local_endpoint() {
  // @@protoc_insertion_point(field_mutable:zipkin.proto3.Span.local_endpoint)
  return _internal_mutable_local_endpoint();
}
inline void Span::set_allocated_local_endpoint(::zipkin::proto3::Endpoint* local_endpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete local_endpoint_;
  }
  if (local_endpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(local_endpoint);
    if (message_arena != submessage_arena) {
      local_endpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_endpoint, submessage_arena);
    }
    
  } else {
    
  }
  local_endpoint_ = local_endpoint;
  // @@protoc_insertion_point(field_set_allocated:zipkin.proto3.Span.local_endpoint)
}

// .zipkin.proto3.Endpoint remote_endpoint = 9;
inline bool Span::_internal_has_remote_endpoint() const {
  return this != internal_default_instance() && remote_endpoint_ != nullptr;
}
inline bool Span::has_remote_endpoint() const {
  return _internal_has_remote_endpoint();
}
inline void Span::clear_remote_endpoint() {
  if (GetArena() == nullptr && remote_endpoint_ != nullptr) {
    delete remote_endpoint_;
  }
  remote_endpoint_ = nullptr;
}
inline const ::zipkin::proto3::Endpoint& Span::_internal_remote_endpoint() const {
  const ::zipkin::proto3::Endpoint* p = remote_endpoint_;
  return p != nullptr ? *p : reinterpret_cast<const ::zipkin::proto3::Endpoint&>(
      ::zipkin::proto3::_Endpoint_default_instance_);
}
inline const ::zipkin::proto3::Endpoint& Span::remote_endpoint() const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.Span.remote_endpoint)
  return _internal_remote_endpoint();
}
inline void Span::unsafe_arena_set_allocated_remote_endpoint(
    ::zipkin::proto3::Endpoint* remote_endpoint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remote_endpoint_);
  }
  remote_endpoint_ = remote_endpoint;
  if (remote_endpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zipkin.proto3.Span.remote_endpoint)
}
inline ::zipkin::proto3::Endpoint* Span::release_remote_endpoint() {
  
  ::zipkin::proto3::Endpoint* temp = remote_endpoint_;
  remote_endpoint_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zipkin::proto3::Endpoint* Span::unsafe_arena_release_remote_endpoint() {
  // @@protoc_insertion_point(field_release:zipkin.proto3.Span.remote_endpoint)
  
  ::zipkin::proto3::Endpoint* temp = remote_endpoint_;
  remote_endpoint_ = nullptr;
  return temp;
}
inline ::zipkin::proto3::Endpoint* Span::_internal_mutable_remote_endpoint() {
  
  if (remote_endpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::zipkin::proto3::Endpoint>(GetArena());
    remote_endpoint_ = p;
  }
  return remote_endpoint_;
}
inline ::zipkin::proto3::Endpoint* Span::mutable_remote_endpoint() {
  // @@protoc_insertion_point(field_mutable:zipkin.proto3.Span.remote_endpoint)
  return _internal_mutable_remote_endpoint();
}
inline void Span::set_allocated_remote_endpoint(::zipkin::proto3::Endpoint* remote_endpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete remote_endpoint_;
  }
  if (remote_endpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(remote_endpoint);
    if (message_arena != submessage_arena) {
      remote_endpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remote_endpoint, submessage_arena);
    }
    
  } else {
    
  }
  remote_endpoint_ = remote_endpoint;
  // @@protoc_insertion_point(field_set_allocated:zipkin.proto3.Span.remote_endpoint)
}

// repeated .zipkin.proto3.Annotation annotations = 10;
inline int Span::_internal_annotations_size() const {
  return annotations_.size();
}
inline int Span::annotations_size() const {
  return _internal_annotations_size();
}
inline void Span::clear_annotations() {
  annotations_.Clear();
}
inline ::zipkin::proto3::Annotation* Span::mutable_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:zipkin.proto3.Span.annotations)
  return annotations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zipkin::proto3::Annotation >*
Span::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_list:zipkin.proto3.Span.annotations)
  return &annotations_;
}
inline const ::zipkin::proto3::Annotation& Span::_internal_annotations(int index) const {
  return annotations_.Get(index);
}
inline const ::zipkin::proto3::Annotation& Span::annotations(int index) const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.Span.annotations)
  return _internal_annotations(index);
}
inline ::zipkin::proto3::Annotation* Span::_internal_add_annotations() {
  return annotations_.Add();
}
inline ::zipkin::proto3::Annotation* Span::add_annotations() {
  // @@protoc_insertion_point(field_add:zipkin.proto3.Span.annotations)
  return _internal_add_annotations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zipkin::proto3::Annotation >&
Span::annotations() const {
  // @@protoc_insertion_point(field_list:zipkin.proto3.Span.annotations)
  return annotations_;
}

// map<string, string> tags = 11;
inline int Span::_internal_tags_size() const {
  return tags_.size();
}
inline int Span::tags_size() const {
  return _internal_tags_size();
}
inline void Span::clear_tags() {
  tags_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Span::_internal_tags() const {
  return tags_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Span::tags() const {
  // @@protoc_insertion_point(field_map:zipkin.proto3.Span.tags)
  return _internal_tags();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Span::_internal_mutable_tags() {
  return tags_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Span::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:zipkin.proto3.Span.tags)
  return _internal_mutable_tags();
}

// bool debug = 12;
inline void Span::clear_debug() {
  debug_ = false;
}
inline bool Span::_internal_debug() const {
  return debug_;
}
inline bool Span::debug() const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.Span.debug)
  return _internal_debug();
}
inline void Span::_internal_set_debug(bool value) {
  
  debug_ = value;
}
inline void Span::set_debug(bool value) {
  _internal_set_debug(value);
  // @@protoc_insertion_point(field_set:zipkin.proto3.Span.debug)
}

// bool shared = 13;
inline void Span::clear_shared() {
  shared_ = false;
}
inline bool Span::_internal_shared() const {
  return shared_;
}
inline bool Span::shared() const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.Span.shared)
  return _internal_shared();
}
inline void Span::_internal_set_shared(bool value) {
  
  shared_ = value;
}
inline void Span::set_shared(bool value) {
  _internal_set_shared(value);
  // @@protoc_insertion_point(field_set:zipkin.proto3.Span.shared)
}

// -------------------------------------------------------------------

// Endpoint

// string service_name = 1;
inline void Endpoint::clear_service_name() {
  service_name_.ClearToEmpty();
}
inline const std::string& Endpoint::service_name() const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.Endpoint.service_name)
  return _internal_service_name();
}
inline void Endpoint::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:zipkin.proto3.Endpoint.service_name)
}
inline std::string* Endpoint::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:zipkin.proto3.Endpoint.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& Endpoint::_internal_service_name() const {
  return service_name_.Get();
}
inline void Endpoint::_internal_set_service_name(const std::string& value) {
  
  service_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Endpoint::set_service_name(std::string&& value) {
  
  service_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zipkin.proto3.Endpoint.service_name)
}
inline void Endpoint::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:zipkin.proto3.Endpoint.service_name)
}
inline void Endpoint::set_service_name(const char* value,
    size_t size) {
  
  service_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zipkin.proto3.Endpoint.service_name)
}
inline std::string* Endpoint::_internal_mutable_service_name() {
  
  return service_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Endpoint::release_service_name() {
  // @@protoc_insertion_point(field_release:zipkin.proto3.Endpoint.service_name)
  return service_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Endpoint::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zipkin.proto3.Endpoint.service_name)
}

// bytes ipv4 = 2;
inline void Endpoint::clear_ipv4() {
  ipv4_.ClearToEmpty();
}
inline const std::string& Endpoint::ipv4() const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.Endpoint.ipv4)
  return _internal_ipv4();
}
inline void Endpoint::set_ipv4(const std::string& value) {
  _internal_set_ipv4(value);
  // @@protoc_insertion_point(field_set:zipkin.proto3.Endpoint.ipv4)
}
inline std::string* Endpoint::mutable_ipv4() {
  // @@protoc_insertion_point(field_mutable:zipkin.proto3.Endpoint.ipv4)
  return _internal_mutable_ipv4();
}
inline const std::string& Endpoint::_internal_ipv4() const {
  return ipv4_.Get();
}
inline void Endpoint::_internal_set_ipv4(const std::string& value) {
  
  ipv4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Endpoint::set_ipv4(std::string&& value) {
  
  ipv4_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zipkin.proto3.Endpoint.ipv4)
}
inline void Endpoint::set_ipv4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ipv4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:zipkin.proto3.Endpoint.ipv4)
}
inline void Endpoint::set_ipv4(const void* value,
    size_t size) {
  
  ipv4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zipkin.proto3.Endpoint.ipv4)
}
inline std::string* Endpoint::_internal_mutable_ipv4() {
  
  return ipv4_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Endpoint::release_ipv4() {
  // @@protoc_insertion_point(field_release:zipkin.proto3.Endpoint.ipv4)
  return ipv4_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Endpoint::set_allocated_ipv4(std::string* ipv4) {
  if (ipv4 != nullptr) {
    
  } else {
    
  }
  ipv4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipv4,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zipkin.proto3.Endpoint.ipv4)
}

// bytes ipv6 = 3;
inline void Endpoint::clear_ipv6() {
  ipv6_.ClearToEmpty();
}
inline const std::string& Endpoint::ipv6() const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.Endpoint.ipv6)
  return _internal_ipv6();
}
inline void Endpoint::set_ipv6(const std::string& value) {
  _internal_set_ipv6(value);
  // @@protoc_insertion_point(field_set:zipkin.proto3.Endpoint.ipv6)
}
inline std::string* Endpoint::mutable_ipv6() {
  // @@protoc_insertion_point(field_mutable:zipkin.proto3.Endpoint.ipv6)
  return _internal_mutable_ipv6();
}
inline const std::string& Endpoint::_internal_ipv6() const {
  return ipv6_.Get();
}
inline void Endpoint::_internal_set_ipv6(const std::string& value) {
  
  ipv6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Endpoint::set_ipv6(std::string&& value) {
  
  ipv6_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zipkin.proto3.Endpoint.ipv6)
}
inline void Endpoint::set_ipv6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ipv6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:zipkin.proto3.Endpoint.ipv6)
}
inline void Endpoint::set_ipv6(const void* value,
    size_t size) {
  
  ipv6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zipkin.proto3.Endpoint.ipv6)
}
inline std::string* Endpoint::_internal_mutable_ipv6() {
  
  return ipv6_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Endpoint::release_ipv6() {
  // @@protoc_insertion_point(field_release:zipkin.proto3.Endpoint.ipv6)
  return ipv6_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Endpoint::set_allocated_ipv6(std::string* ipv6) {
  if (ipv6 != nullptr) {
    
  } else {
    
  }
  ipv6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipv6,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zipkin.proto3.Endpoint.ipv6)
}

// int32 port = 4;
inline void Endpoint::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Endpoint::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Endpoint::port() const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.Endpoint.port)
  return _internal_port();
}
inline void Endpoint::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void Endpoint::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:zipkin.proto3.Endpoint.port)
}

// -------------------------------------------------------------------

// Annotation

// fixed64 timestamp = 1;
inline void Annotation::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Annotation::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Annotation::timestamp() const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.Annotation.timestamp)
  return _internal_timestamp();
}
inline void Annotation::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void Annotation::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:zipkin.proto3.Annotation.timestamp)
}

// string value = 2;
inline void Annotation::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Annotation::value() const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.Annotation.value)
  return _internal_value();
}
inline void Annotation::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:zipkin.proto3.Annotation.value)
}
inline std::string* Annotation::mutable_value() {
  // @@protoc_insertion_point(field_mutable:zipkin.proto3.Annotation.value)
  return _internal_mutable_value();
}
inline const std::string& Annotation::_internal_value() const {
  return value_.Get();
}
inline void Annotation::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Annotation::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zipkin.proto3.Annotation.value)
}
inline void Annotation::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:zipkin.proto3.Annotation.value)
}
inline void Annotation::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zipkin.proto3.Annotation.value)
}
inline std::string* Annotation::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Annotation::release_value() {
  // @@protoc_insertion_point(field_release:zipkin.proto3.Annotation.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Annotation::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zipkin.proto3.Annotation.value)
}

// -------------------------------------------------------------------

// ListOfSpans

// repeated .zipkin.proto3.Span spans = 1;
inline int ListOfSpans::_internal_spans_size() const {
  return spans_.size();
}
inline int ListOfSpans::spans_size() const {
  return _internal_spans_size();
}
inline void ListOfSpans::clear_spans() {
  spans_.Clear();
}
inline ::zipkin::proto3::Span* ListOfSpans::mutable_spans(int index) {
  // @@protoc_insertion_point(field_mutable:zipkin.proto3.ListOfSpans.spans)
  return spans_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zipkin::proto3::Span >*
ListOfSpans::mutable_spans() {
  // @@protoc_insertion_point(field_mutable_list:zipkin.proto3.ListOfSpans.spans)
  return &spans_;
}
inline const ::zipkin::proto3::Span& ListOfSpans::_internal_spans(int index) const {
  return spans_.Get(index);
}
inline const ::zipkin::proto3::Span& ListOfSpans::spans(int index) const {
  // @@protoc_insertion_point(field_get:zipkin.proto3.ListOfSpans.spans)
  return _internal_spans(index);
}
inline ::zipkin::proto3::Span* ListOfSpans::_internal_add_spans() {
  return spans_.Add();
}
inline ::zipkin::proto3::Span* ListOfSpans::add_spans() {
  // @@protoc_insertion_point(field_add:zipkin.proto3.ListOfSpans.spans)
  return _internal_add_spans();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zipkin::proto3::Span >&
ListOfSpans::spans() const {
  // @@protoc_insertion_point(field_list:zipkin.proto3.ListOfSpans.spans)
  return spans_;
}

// -------------------------------------------------------------------

// ReportResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto3
}  // namespace zipkin

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zipkin::proto3::Span_Kind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zipkin::proto3::Span_Kind>() {
  return ::zipkin::proto3::Span_Kind_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_zipkin_2eproto
