// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sampling.proto

#include "sampling.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_sampling_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OperationSamplingStrategy_sampling_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sampling_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PerOperationSamplingStrategies_sampling_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sampling_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProbabilisticSamplingStrategy_sampling_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sampling_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RateLimitingSamplingStrategy_sampling_2eproto;
namespace jaeger {
namespace api_v2 {
class ProbabilisticSamplingStrategyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProbabilisticSamplingStrategy> _instance;
} _ProbabilisticSamplingStrategy_default_instance_;
class RateLimitingSamplingStrategyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RateLimitingSamplingStrategy> _instance;
} _RateLimitingSamplingStrategy_default_instance_;
class OperationSamplingStrategyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OperationSamplingStrategy> _instance;
} _OperationSamplingStrategy_default_instance_;
class PerOperationSamplingStrategiesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerOperationSamplingStrategies> _instance;
} _PerOperationSamplingStrategies_default_instance_;
class SamplingStrategyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SamplingStrategyResponse> _instance;
} _SamplingStrategyResponse_default_instance_;
class SamplingStrategyParametersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SamplingStrategyParameters> _instance;
} _SamplingStrategyParameters_default_instance_;
}  // namespace api_v2
}  // namespace jaeger
static void InitDefaultsscc_info_OperationSamplingStrategy_sampling_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jaeger::api_v2::_OperationSamplingStrategy_default_instance_;
    new (ptr) ::jaeger::api_v2::OperationSamplingStrategy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OperationSamplingStrategy_sampling_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OperationSamplingStrategy_sampling_2eproto}, {
      &scc_info_ProbabilisticSamplingStrategy_sampling_2eproto.base,}};

static void InitDefaultsscc_info_PerOperationSamplingStrategies_sampling_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jaeger::api_v2::_PerOperationSamplingStrategies_default_instance_;
    new (ptr) ::jaeger::api_v2::PerOperationSamplingStrategies();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PerOperationSamplingStrategies_sampling_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PerOperationSamplingStrategies_sampling_2eproto}, {
      &scc_info_OperationSamplingStrategy_sampling_2eproto.base,}};

static void InitDefaultsscc_info_ProbabilisticSamplingStrategy_sampling_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jaeger::api_v2::_ProbabilisticSamplingStrategy_default_instance_;
    new (ptr) ::jaeger::api_v2::ProbabilisticSamplingStrategy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProbabilisticSamplingStrategy_sampling_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProbabilisticSamplingStrategy_sampling_2eproto}, {}};

static void InitDefaultsscc_info_RateLimitingSamplingStrategy_sampling_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jaeger::api_v2::_RateLimitingSamplingStrategy_default_instance_;
    new (ptr) ::jaeger::api_v2::RateLimitingSamplingStrategy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RateLimitingSamplingStrategy_sampling_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RateLimitingSamplingStrategy_sampling_2eproto}, {}};

static void InitDefaultsscc_info_SamplingStrategyParameters_sampling_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jaeger::api_v2::_SamplingStrategyParameters_default_instance_;
    new (ptr) ::jaeger::api_v2::SamplingStrategyParameters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SamplingStrategyParameters_sampling_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SamplingStrategyParameters_sampling_2eproto}, {}};

static void InitDefaultsscc_info_SamplingStrategyResponse_sampling_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jaeger::api_v2::_SamplingStrategyResponse_default_instance_;
    new (ptr) ::jaeger::api_v2::SamplingStrategyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SamplingStrategyResponse_sampling_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SamplingStrategyResponse_sampling_2eproto}, {
      &scc_info_ProbabilisticSamplingStrategy_sampling_2eproto.base,
      &scc_info_RateLimitingSamplingStrategy_sampling_2eproto.base,
      &scc_info_PerOperationSamplingStrategies_sampling_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sampling_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sampling_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sampling_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sampling_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::ProbabilisticSamplingStrategy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::ProbabilisticSamplingStrategy, samplingrate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::RateLimitingSamplingStrategy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::RateLimitingSamplingStrategy, maxtracespersecond_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::OperationSamplingStrategy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::OperationSamplingStrategy, operation_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::OperationSamplingStrategy, probabilisticsampling_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::PerOperationSamplingStrategies, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::PerOperationSamplingStrategies, defaultsamplingprobability_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::PerOperationSamplingStrategies, defaultlowerboundtracespersecond_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::PerOperationSamplingStrategies, peroperationstrategies_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::PerOperationSamplingStrategies, defaultupperboundtracespersecond_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::SamplingStrategyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::SamplingStrategyResponse, strategytype_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::SamplingStrategyResponse, probabilisticsampling_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::SamplingStrategyResponse, ratelimitingsampling_),
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::SamplingStrategyResponse, operationsampling_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::SamplingStrategyParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jaeger::api_v2::SamplingStrategyParameters, servicename_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::jaeger::api_v2::ProbabilisticSamplingStrategy)},
  { 6, -1, sizeof(::jaeger::api_v2::RateLimitingSamplingStrategy)},
  { 12, -1, sizeof(::jaeger::api_v2::OperationSamplingStrategy)},
  { 19, -1, sizeof(::jaeger::api_v2::PerOperationSamplingStrategies)},
  { 28, -1, sizeof(::jaeger::api_v2::SamplingStrategyResponse)},
  { 37, -1, sizeof(::jaeger::api_v2::SamplingStrategyParameters)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jaeger::api_v2::_ProbabilisticSamplingStrategy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jaeger::api_v2::_RateLimitingSamplingStrategy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jaeger::api_v2::_OperationSamplingStrategy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jaeger::api_v2::_PerOperationSamplingStrategies_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jaeger::api_v2::_SamplingStrategyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jaeger::api_v2::_SamplingStrategyParameters_default_instance_),
};

const char descriptor_table_protodef_sampling_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016sampling.proto\022\rjaeger.api_v2\032\024gogopro"
  "to/gogo.proto\032\034google/api/annotations.pr"
  "oto\"5\n\035ProbabilisticSamplingStrategy\022\024\n\014"
  "samplingRate\030\001 \001(\001\":\n\034RateLimitingSampli"
  "ngStrategy\022\032\n\022maxTracesPerSecond\030\001 \001(\005\"{"
  "\n\031OperationSamplingStrategy\022\021\n\toperation"
  "\030\001 \001(\t\022K\n\025probabilisticSampling\030\002 \001(\0132,."
  "jaeger.api_v2.ProbabilisticSamplingStrat"
  "egy\"\342\001\n\036PerOperationSamplingStrategies\022\""
  "\n\032defaultSamplingProbability\030\001 \001(\001\022(\n de"
  "faultLowerBoundTracesPerSecond\030\002 \001(\001\022H\n\026"
  "perOperationStrategies\030\003 \003(\0132(.jaeger.ap"
  "i_v2.OperationSamplingStrategy\022(\n defaul"
  "tUpperBoundTracesPerSecond\030\004 \001(\001\"\267\002\n\030Sam"
  "plingStrategyResponse\0229\n\014strategyType\030\001 "
  "\001(\0162#.jaeger.api_v2.SamplingStrategyType"
  "\022K\n\025probabilisticSampling\030\002 \001(\0132,.jaeger"
  ".api_v2.ProbabilisticSamplingStrategy\022I\n"
  "\024rateLimitingSampling\030\003 \001(\0132+.jaeger.api"
  "_v2.RateLimitingSamplingStrategy\022H\n\021oper"
  "ationSampling\030\004 \001(\0132-.jaeger.api_v2.PerO"
  "perationSamplingStrategies\"1\n\032SamplingSt"
  "rategyParameters\022\023\n\013serviceName\030\001 \001(\t*<\n"
  "\024SamplingStrategyType\022\021\n\rPROBABILISTIC\020\000"
  "\022\021\n\rRATE_LIMITING\020\0012\242\001\n\017SamplingManager\022"
  "\216\001\n\023GetSamplingStrategy\022).jaeger.api_v2."
  "SamplingStrategyParameters\032\'.jaeger.api_"
  "v2.SamplingStrategyResponse\"#\202\323\344\223\002\035\"\030/ap"
  "i/v2/samplingStrategy:\001*B-\n\027io.jaegertra"
  "cing.api_v2Z\006api_v2\310\342\036\001\320\342\036\001\340\342\036\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sampling_2eproto_deps[2] = {
  &::descriptor_table_gogoproto_2fgogo_2eproto,
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sampling_2eproto_sccs[6] = {
  &scc_info_OperationSamplingStrategy_sampling_2eproto.base,
  &scc_info_PerOperationSamplingStrategies_sampling_2eproto.base,
  &scc_info_ProbabilisticSamplingStrategy_sampling_2eproto.base,
  &scc_info_RateLimitingSamplingStrategy_sampling_2eproto.base,
  &scc_info_SamplingStrategyParameters_sampling_2eproto.base,
  &scc_info_SamplingStrategyResponse_sampling_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sampling_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sampling_2eproto = {
  false, false, descriptor_table_protodef_sampling_2eproto, "sampling.proto", 1199,
  &descriptor_table_sampling_2eproto_once, descriptor_table_sampling_2eproto_sccs, descriptor_table_sampling_2eproto_deps, 6, 2,
  schemas, file_default_instances, TableStruct_sampling_2eproto::offsets,
  file_level_metadata_sampling_2eproto, 6, file_level_enum_descriptors_sampling_2eproto, file_level_service_descriptors_sampling_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sampling_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sampling_2eproto)), true);
namespace jaeger {
namespace api_v2 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SamplingStrategyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sampling_2eproto);
  return file_level_enum_descriptors_sampling_2eproto[0];
}
bool SamplingStrategyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ProbabilisticSamplingStrategy::_Internal {
 public:
};

ProbabilisticSamplingStrategy::ProbabilisticSamplingStrategy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jaeger.api_v2.ProbabilisticSamplingStrategy)
}
ProbabilisticSamplingStrategy::ProbabilisticSamplingStrategy(const ProbabilisticSamplingStrategy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  samplingrate_ = from.samplingrate_;
  // @@protoc_insertion_point(copy_constructor:jaeger.api_v2.ProbabilisticSamplingStrategy)
}

void ProbabilisticSamplingStrategy::SharedCtor() {
  samplingrate_ = 0;
}

ProbabilisticSamplingStrategy::~ProbabilisticSamplingStrategy() {
  // @@protoc_insertion_point(destructor:jaeger.api_v2.ProbabilisticSamplingStrategy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProbabilisticSamplingStrategy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProbabilisticSamplingStrategy::ArenaDtor(void* object) {
  ProbabilisticSamplingStrategy* _this = reinterpret_cast< ProbabilisticSamplingStrategy* >(object);
  (void)_this;
}
void ProbabilisticSamplingStrategy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProbabilisticSamplingStrategy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProbabilisticSamplingStrategy& ProbabilisticSamplingStrategy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProbabilisticSamplingStrategy_sampling_2eproto.base);
  return *internal_default_instance();
}


void ProbabilisticSamplingStrategy::Clear() {
// @@protoc_insertion_point(message_clear_start:jaeger.api_v2.ProbabilisticSamplingStrategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  samplingrate_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProbabilisticSamplingStrategy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double samplingRate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          samplingrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProbabilisticSamplingStrategy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jaeger.api_v2.ProbabilisticSamplingStrategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double samplingRate = 1;
  if (!(this->samplingrate() <= 0 && this->samplingrate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_samplingrate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jaeger.api_v2.ProbabilisticSamplingStrategy)
  return target;
}

size_t ProbabilisticSamplingStrategy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jaeger.api_v2.ProbabilisticSamplingStrategy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double samplingRate = 1;
  if (!(this->samplingrate() <= 0 && this->samplingrate() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProbabilisticSamplingStrategy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jaeger.api_v2.ProbabilisticSamplingStrategy)
  GOOGLE_DCHECK_NE(&from, this);
  const ProbabilisticSamplingStrategy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProbabilisticSamplingStrategy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jaeger.api_v2.ProbabilisticSamplingStrategy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jaeger.api_v2.ProbabilisticSamplingStrategy)
    MergeFrom(*source);
  }
}

void ProbabilisticSamplingStrategy::MergeFrom(const ProbabilisticSamplingStrategy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jaeger.api_v2.ProbabilisticSamplingStrategy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.samplingrate() <= 0 && from.samplingrate() >= 0)) {
    _internal_set_samplingrate(from._internal_samplingrate());
  }
}

void ProbabilisticSamplingStrategy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jaeger.api_v2.ProbabilisticSamplingStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProbabilisticSamplingStrategy::CopyFrom(const ProbabilisticSamplingStrategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jaeger.api_v2.ProbabilisticSamplingStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProbabilisticSamplingStrategy::IsInitialized() const {
  return true;
}

void ProbabilisticSamplingStrategy::InternalSwap(ProbabilisticSamplingStrategy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(samplingrate_, other->samplingrate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProbabilisticSamplingStrategy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RateLimitingSamplingStrategy::_Internal {
 public:
};

RateLimitingSamplingStrategy::RateLimitingSamplingStrategy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jaeger.api_v2.RateLimitingSamplingStrategy)
}
RateLimitingSamplingStrategy::RateLimitingSamplingStrategy(const RateLimitingSamplingStrategy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  maxtracespersecond_ = from.maxtracespersecond_;
  // @@protoc_insertion_point(copy_constructor:jaeger.api_v2.RateLimitingSamplingStrategy)
}

void RateLimitingSamplingStrategy::SharedCtor() {
  maxtracespersecond_ = 0;
}

RateLimitingSamplingStrategy::~RateLimitingSamplingStrategy() {
  // @@protoc_insertion_point(destructor:jaeger.api_v2.RateLimitingSamplingStrategy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RateLimitingSamplingStrategy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RateLimitingSamplingStrategy::ArenaDtor(void* object) {
  RateLimitingSamplingStrategy* _this = reinterpret_cast< RateLimitingSamplingStrategy* >(object);
  (void)_this;
}
void RateLimitingSamplingStrategy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RateLimitingSamplingStrategy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RateLimitingSamplingStrategy& RateLimitingSamplingStrategy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RateLimitingSamplingStrategy_sampling_2eproto.base);
  return *internal_default_instance();
}


void RateLimitingSamplingStrategy::Clear() {
// @@protoc_insertion_point(message_clear_start:jaeger.api_v2.RateLimitingSamplingStrategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  maxtracespersecond_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RateLimitingSamplingStrategy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 maxTracesPerSecond = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          maxtracespersecond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RateLimitingSamplingStrategy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jaeger.api_v2.RateLimitingSamplingStrategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 maxTracesPerSecond = 1;
  if (this->maxtracespersecond() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_maxtracespersecond(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jaeger.api_v2.RateLimitingSamplingStrategy)
  return target;
}

size_t RateLimitingSamplingStrategy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jaeger.api_v2.RateLimitingSamplingStrategy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 maxTracesPerSecond = 1;
  if (this->maxtracespersecond() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxtracespersecond());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RateLimitingSamplingStrategy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jaeger.api_v2.RateLimitingSamplingStrategy)
  GOOGLE_DCHECK_NE(&from, this);
  const RateLimitingSamplingStrategy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RateLimitingSamplingStrategy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jaeger.api_v2.RateLimitingSamplingStrategy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jaeger.api_v2.RateLimitingSamplingStrategy)
    MergeFrom(*source);
  }
}

void RateLimitingSamplingStrategy::MergeFrom(const RateLimitingSamplingStrategy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jaeger.api_v2.RateLimitingSamplingStrategy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.maxtracespersecond() != 0) {
    _internal_set_maxtracespersecond(from._internal_maxtracespersecond());
  }
}

void RateLimitingSamplingStrategy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jaeger.api_v2.RateLimitingSamplingStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateLimitingSamplingStrategy::CopyFrom(const RateLimitingSamplingStrategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jaeger.api_v2.RateLimitingSamplingStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateLimitingSamplingStrategy::IsInitialized() const {
  return true;
}

void RateLimitingSamplingStrategy::InternalSwap(RateLimitingSamplingStrategy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(maxtracespersecond_, other->maxtracespersecond_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RateLimitingSamplingStrategy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OperationSamplingStrategy::_Internal {
 public:
  static const ::jaeger::api_v2::ProbabilisticSamplingStrategy& probabilisticsampling(const OperationSamplingStrategy* msg);
};

const ::jaeger::api_v2::ProbabilisticSamplingStrategy&
OperationSamplingStrategy::_Internal::probabilisticsampling(const OperationSamplingStrategy* msg) {
  return *msg->probabilisticsampling_;
}
OperationSamplingStrategy::OperationSamplingStrategy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jaeger.api_v2.OperationSamplingStrategy)
}
OperationSamplingStrategy::OperationSamplingStrategy(const OperationSamplingStrategy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  operation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operation().empty()) {
    operation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_operation(), 
      GetArena());
  }
  if (from._internal_has_probabilisticsampling()) {
    probabilisticsampling_ = new ::jaeger::api_v2::ProbabilisticSamplingStrategy(*from.probabilisticsampling_);
  } else {
    probabilisticsampling_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:jaeger.api_v2.OperationSamplingStrategy)
}

void OperationSamplingStrategy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OperationSamplingStrategy_sampling_2eproto.base);
  operation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  probabilisticsampling_ = nullptr;
}

OperationSamplingStrategy::~OperationSamplingStrategy() {
  // @@protoc_insertion_point(destructor:jaeger.api_v2.OperationSamplingStrategy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OperationSamplingStrategy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  operation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete probabilisticsampling_;
}

void OperationSamplingStrategy::ArenaDtor(void* object) {
  OperationSamplingStrategy* _this = reinterpret_cast< OperationSamplingStrategy* >(object);
  (void)_this;
}
void OperationSamplingStrategy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationSamplingStrategy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OperationSamplingStrategy& OperationSamplingStrategy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OperationSamplingStrategy_sampling_2eproto.base);
  return *internal_default_instance();
}


void OperationSamplingStrategy::Clear() {
// @@protoc_insertion_point(message_clear_start:jaeger.api_v2.OperationSamplingStrategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operation_.ClearToEmpty();
  if (GetArena() == nullptr && probabilisticsampling_ != nullptr) {
    delete probabilisticsampling_;
  }
  probabilisticsampling_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationSamplingStrategy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_operation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jaeger.api_v2.OperationSamplingStrategy.operation"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_probabilisticsampling(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OperationSamplingStrategy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jaeger.api_v2.OperationSamplingStrategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string operation = 1;
  if (this->operation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operation().data(), static_cast<int>(this->_internal_operation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jaeger.api_v2.OperationSamplingStrategy.operation");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_operation(), target);
  }

  // .jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;
  if (this->has_probabilisticsampling()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::probabilisticsampling(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jaeger.api_v2.OperationSamplingStrategy)
  return target;
}

size_t OperationSamplingStrategy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jaeger.api_v2.OperationSamplingStrategy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string operation = 1;
  if (this->operation().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operation());
  }

  // .jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;
  if (this->has_probabilisticsampling()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *probabilisticsampling_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperationSamplingStrategy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jaeger.api_v2.OperationSamplingStrategy)
  GOOGLE_DCHECK_NE(&from, this);
  const OperationSamplingStrategy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OperationSamplingStrategy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jaeger.api_v2.OperationSamplingStrategy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jaeger.api_v2.OperationSamplingStrategy)
    MergeFrom(*source);
  }
}

void OperationSamplingStrategy::MergeFrom(const OperationSamplingStrategy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jaeger.api_v2.OperationSamplingStrategy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.operation().size() > 0) {
    _internal_set_operation(from._internal_operation());
  }
  if (from.has_probabilisticsampling()) {
    _internal_mutable_probabilisticsampling()->::jaeger::api_v2::ProbabilisticSamplingStrategy::MergeFrom(from._internal_probabilisticsampling());
  }
}

void OperationSamplingStrategy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jaeger.api_v2.OperationSamplingStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationSamplingStrategy::CopyFrom(const OperationSamplingStrategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jaeger.api_v2.OperationSamplingStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationSamplingStrategy::IsInitialized() const {
  return true;
}

void OperationSamplingStrategy::InternalSwap(OperationSamplingStrategy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  operation_.Swap(&other->operation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(probabilisticsampling_, other->probabilisticsampling_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationSamplingStrategy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PerOperationSamplingStrategies::_Internal {
 public:
};

PerOperationSamplingStrategies::PerOperationSamplingStrategies(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  peroperationstrategies_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jaeger.api_v2.PerOperationSamplingStrategies)
}
PerOperationSamplingStrategies::PerOperationSamplingStrategies(const PerOperationSamplingStrategies& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      peroperationstrategies_(from.peroperationstrategies_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&defaultsamplingprobability_, &from.defaultsamplingprobability_,
    static_cast<size_t>(reinterpret_cast<char*>(&defaultupperboundtracespersecond_) -
    reinterpret_cast<char*>(&defaultsamplingprobability_)) + sizeof(defaultupperboundtracespersecond_));
  // @@protoc_insertion_point(copy_constructor:jaeger.api_v2.PerOperationSamplingStrategies)
}

void PerOperationSamplingStrategies::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerOperationSamplingStrategies_sampling_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&defaultsamplingprobability_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&defaultupperboundtracespersecond_) -
      reinterpret_cast<char*>(&defaultsamplingprobability_)) + sizeof(defaultupperboundtracespersecond_));
}

PerOperationSamplingStrategies::~PerOperationSamplingStrategies() {
  // @@protoc_insertion_point(destructor:jaeger.api_v2.PerOperationSamplingStrategies)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PerOperationSamplingStrategies::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PerOperationSamplingStrategies::ArenaDtor(void* object) {
  PerOperationSamplingStrategies* _this = reinterpret_cast< PerOperationSamplingStrategies* >(object);
  (void)_this;
}
void PerOperationSamplingStrategies::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PerOperationSamplingStrategies::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerOperationSamplingStrategies& PerOperationSamplingStrategies::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerOperationSamplingStrategies_sampling_2eproto.base);
  return *internal_default_instance();
}


void PerOperationSamplingStrategies::Clear() {
// @@protoc_insertion_point(message_clear_start:jaeger.api_v2.PerOperationSamplingStrategies)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peroperationstrategies_.Clear();
  ::memset(&defaultsamplingprobability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&defaultupperboundtracespersecond_) -
      reinterpret_cast<char*>(&defaultsamplingprobability_)) + sizeof(defaultupperboundtracespersecond_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerOperationSamplingStrategies::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double defaultSamplingProbability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          defaultsamplingprobability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double defaultLowerBoundTracesPerSecond = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          defaultlowerboundtracespersecond_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .jaeger.api_v2.OperationSamplingStrategy perOperationStrategies = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_peroperationstrategies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // double defaultUpperBoundTracesPerSecond = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          defaultupperboundtracespersecond_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PerOperationSamplingStrategies::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jaeger.api_v2.PerOperationSamplingStrategies)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double defaultSamplingProbability = 1;
  if (!(this->defaultsamplingprobability() <= 0 && this->defaultsamplingprobability() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_defaultsamplingprobability(), target);
  }

  // double defaultLowerBoundTracesPerSecond = 2;
  if (!(this->defaultlowerboundtracespersecond() <= 0 && this->defaultlowerboundtracespersecond() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_defaultlowerboundtracespersecond(), target);
  }

  // repeated .jaeger.api_v2.OperationSamplingStrategy perOperationStrategies = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_peroperationstrategies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_peroperationstrategies(i), target, stream);
  }

  // double defaultUpperBoundTracesPerSecond = 4;
  if (!(this->defaultupperboundtracespersecond() <= 0 && this->defaultupperboundtracespersecond() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_defaultupperboundtracespersecond(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jaeger.api_v2.PerOperationSamplingStrategies)
  return target;
}

size_t PerOperationSamplingStrategies::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jaeger.api_v2.PerOperationSamplingStrategies)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .jaeger.api_v2.OperationSamplingStrategy perOperationStrategies = 3;
  total_size += 1UL * this->_internal_peroperationstrategies_size();
  for (const auto& msg : this->peroperationstrategies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // double defaultSamplingProbability = 1;
  if (!(this->defaultsamplingprobability() <= 0 && this->defaultsamplingprobability() >= 0)) {
    total_size += 1 + 8;
  }

  // double defaultLowerBoundTracesPerSecond = 2;
  if (!(this->defaultlowerboundtracespersecond() <= 0 && this->defaultlowerboundtracespersecond() >= 0)) {
    total_size += 1 + 8;
  }

  // double defaultUpperBoundTracesPerSecond = 4;
  if (!(this->defaultupperboundtracespersecond() <= 0 && this->defaultupperboundtracespersecond() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerOperationSamplingStrategies::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jaeger.api_v2.PerOperationSamplingStrategies)
  GOOGLE_DCHECK_NE(&from, this);
  const PerOperationSamplingStrategies* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PerOperationSamplingStrategies>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jaeger.api_v2.PerOperationSamplingStrategies)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jaeger.api_v2.PerOperationSamplingStrategies)
    MergeFrom(*source);
  }
}

void PerOperationSamplingStrategies::MergeFrom(const PerOperationSamplingStrategies& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jaeger.api_v2.PerOperationSamplingStrategies)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peroperationstrategies_.MergeFrom(from.peroperationstrategies_);
  if (!(from.defaultsamplingprobability() <= 0 && from.defaultsamplingprobability() >= 0)) {
    _internal_set_defaultsamplingprobability(from._internal_defaultsamplingprobability());
  }
  if (!(from.defaultlowerboundtracespersecond() <= 0 && from.defaultlowerboundtracespersecond() >= 0)) {
    _internal_set_defaultlowerboundtracespersecond(from._internal_defaultlowerboundtracespersecond());
  }
  if (!(from.defaultupperboundtracespersecond() <= 0 && from.defaultupperboundtracespersecond() >= 0)) {
    _internal_set_defaultupperboundtracespersecond(from._internal_defaultupperboundtracespersecond());
  }
}

void PerOperationSamplingStrategies::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jaeger.api_v2.PerOperationSamplingStrategies)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerOperationSamplingStrategies::CopyFrom(const PerOperationSamplingStrategies& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jaeger.api_v2.PerOperationSamplingStrategies)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerOperationSamplingStrategies::IsInitialized() const {
  return true;
}

void PerOperationSamplingStrategies::InternalSwap(PerOperationSamplingStrategies* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  peroperationstrategies_.InternalSwap(&other->peroperationstrategies_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerOperationSamplingStrategies, defaultupperboundtracespersecond_)
      + sizeof(PerOperationSamplingStrategies::defaultupperboundtracespersecond_)
      - PROTOBUF_FIELD_OFFSET(PerOperationSamplingStrategies, defaultsamplingprobability_)>(
          reinterpret_cast<char*>(&defaultsamplingprobability_),
          reinterpret_cast<char*>(&other->defaultsamplingprobability_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PerOperationSamplingStrategies::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SamplingStrategyResponse::_Internal {
 public:
  static const ::jaeger::api_v2::ProbabilisticSamplingStrategy& probabilisticsampling(const SamplingStrategyResponse* msg);
  static const ::jaeger::api_v2::RateLimitingSamplingStrategy& ratelimitingsampling(const SamplingStrategyResponse* msg);
  static const ::jaeger::api_v2::PerOperationSamplingStrategies& operationsampling(const SamplingStrategyResponse* msg);
};

const ::jaeger::api_v2::ProbabilisticSamplingStrategy&
SamplingStrategyResponse::_Internal::probabilisticsampling(const SamplingStrategyResponse* msg) {
  return *msg->probabilisticsampling_;
}
const ::jaeger::api_v2::RateLimitingSamplingStrategy&
SamplingStrategyResponse::_Internal::ratelimitingsampling(const SamplingStrategyResponse* msg) {
  return *msg->ratelimitingsampling_;
}
const ::jaeger::api_v2::PerOperationSamplingStrategies&
SamplingStrategyResponse::_Internal::operationsampling(const SamplingStrategyResponse* msg) {
  return *msg->operationsampling_;
}
SamplingStrategyResponse::SamplingStrategyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jaeger.api_v2.SamplingStrategyResponse)
}
SamplingStrategyResponse::SamplingStrategyResponse(const SamplingStrategyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_probabilisticsampling()) {
    probabilisticsampling_ = new ::jaeger::api_v2::ProbabilisticSamplingStrategy(*from.probabilisticsampling_);
  } else {
    probabilisticsampling_ = nullptr;
  }
  if (from._internal_has_ratelimitingsampling()) {
    ratelimitingsampling_ = new ::jaeger::api_v2::RateLimitingSamplingStrategy(*from.ratelimitingsampling_);
  } else {
    ratelimitingsampling_ = nullptr;
  }
  if (from._internal_has_operationsampling()) {
    operationsampling_ = new ::jaeger::api_v2::PerOperationSamplingStrategies(*from.operationsampling_);
  } else {
    operationsampling_ = nullptr;
  }
  strategytype_ = from.strategytype_;
  // @@protoc_insertion_point(copy_constructor:jaeger.api_v2.SamplingStrategyResponse)
}

void SamplingStrategyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SamplingStrategyResponse_sampling_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&probabilisticsampling_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&strategytype_) -
      reinterpret_cast<char*>(&probabilisticsampling_)) + sizeof(strategytype_));
}

SamplingStrategyResponse::~SamplingStrategyResponse() {
  // @@protoc_insertion_point(destructor:jaeger.api_v2.SamplingStrategyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SamplingStrategyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete probabilisticsampling_;
  if (this != internal_default_instance()) delete ratelimitingsampling_;
  if (this != internal_default_instance()) delete operationsampling_;
}

void SamplingStrategyResponse::ArenaDtor(void* object) {
  SamplingStrategyResponse* _this = reinterpret_cast< SamplingStrategyResponse* >(object);
  (void)_this;
}
void SamplingStrategyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SamplingStrategyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SamplingStrategyResponse& SamplingStrategyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SamplingStrategyResponse_sampling_2eproto.base);
  return *internal_default_instance();
}


void SamplingStrategyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:jaeger.api_v2.SamplingStrategyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && probabilisticsampling_ != nullptr) {
    delete probabilisticsampling_;
  }
  probabilisticsampling_ = nullptr;
  if (GetArena() == nullptr && ratelimitingsampling_ != nullptr) {
    delete ratelimitingsampling_;
  }
  ratelimitingsampling_ = nullptr;
  if (GetArena() == nullptr && operationsampling_ != nullptr) {
    delete operationsampling_;
  }
  operationsampling_ = nullptr;
  strategytype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SamplingStrategyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .jaeger.api_v2.SamplingStrategyType strategyType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_strategytype(static_cast<::jaeger::api_v2::SamplingStrategyType>(val));
        } else goto handle_unusual;
        continue;
      // .jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_probabilisticsampling(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .jaeger.api_v2.RateLimitingSamplingStrategy rateLimitingSampling = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ratelimitingsampling(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .jaeger.api_v2.PerOperationSamplingStrategies operationSampling = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_operationsampling(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SamplingStrategyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jaeger.api_v2.SamplingStrategyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .jaeger.api_v2.SamplingStrategyType strategyType = 1;
  if (this->strategytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_strategytype(), target);
  }

  // .jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;
  if (this->has_probabilisticsampling()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::probabilisticsampling(this), target, stream);
  }

  // .jaeger.api_v2.RateLimitingSamplingStrategy rateLimitingSampling = 3;
  if (this->has_ratelimitingsampling()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ratelimitingsampling(this), target, stream);
  }

  // .jaeger.api_v2.PerOperationSamplingStrategies operationSampling = 4;
  if (this->has_operationsampling()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::operationsampling(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jaeger.api_v2.SamplingStrategyResponse)
  return target;
}

size_t SamplingStrategyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jaeger.api_v2.SamplingStrategyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;
  if (this->has_probabilisticsampling()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *probabilisticsampling_);
  }

  // .jaeger.api_v2.RateLimitingSamplingStrategy rateLimitingSampling = 3;
  if (this->has_ratelimitingsampling()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ratelimitingsampling_);
  }

  // .jaeger.api_v2.PerOperationSamplingStrategies operationSampling = 4;
  if (this->has_operationsampling()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *operationsampling_);
  }

  // .jaeger.api_v2.SamplingStrategyType strategyType = 1;
  if (this->strategytype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_strategytype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SamplingStrategyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jaeger.api_v2.SamplingStrategyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SamplingStrategyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SamplingStrategyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jaeger.api_v2.SamplingStrategyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jaeger.api_v2.SamplingStrategyResponse)
    MergeFrom(*source);
  }
}

void SamplingStrategyResponse::MergeFrom(const SamplingStrategyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jaeger.api_v2.SamplingStrategyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_probabilisticsampling()) {
    _internal_mutable_probabilisticsampling()->::jaeger::api_v2::ProbabilisticSamplingStrategy::MergeFrom(from._internal_probabilisticsampling());
  }
  if (from.has_ratelimitingsampling()) {
    _internal_mutable_ratelimitingsampling()->::jaeger::api_v2::RateLimitingSamplingStrategy::MergeFrom(from._internal_ratelimitingsampling());
  }
  if (from.has_operationsampling()) {
    _internal_mutable_operationsampling()->::jaeger::api_v2::PerOperationSamplingStrategies::MergeFrom(from._internal_operationsampling());
  }
  if (from.strategytype() != 0) {
    _internal_set_strategytype(from._internal_strategytype());
  }
}

void SamplingStrategyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jaeger.api_v2.SamplingStrategyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SamplingStrategyResponse::CopyFrom(const SamplingStrategyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jaeger.api_v2.SamplingStrategyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SamplingStrategyResponse::IsInitialized() const {
  return true;
}

void SamplingStrategyResponse::InternalSwap(SamplingStrategyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SamplingStrategyResponse, strategytype_)
      + sizeof(SamplingStrategyResponse::strategytype_)
      - PROTOBUF_FIELD_OFFSET(SamplingStrategyResponse, probabilisticsampling_)>(
          reinterpret_cast<char*>(&probabilisticsampling_),
          reinterpret_cast<char*>(&other->probabilisticsampling_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SamplingStrategyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SamplingStrategyParameters::_Internal {
 public:
};

SamplingStrategyParameters::SamplingStrategyParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jaeger.api_v2.SamplingStrategyParameters)
}
SamplingStrategyParameters::SamplingStrategyParameters(const SamplingStrategyParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  servicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_servicename().empty()) {
    servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_servicename(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:jaeger.api_v2.SamplingStrategyParameters)
}

void SamplingStrategyParameters::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SamplingStrategyParameters_sampling_2eproto.base);
  servicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SamplingStrategyParameters::~SamplingStrategyParameters() {
  // @@protoc_insertion_point(destructor:jaeger.api_v2.SamplingStrategyParameters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SamplingStrategyParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  servicename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SamplingStrategyParameters::ArenaDtor(void* object) {
  SamplingStrategyParameters* _this = reinterpret_cast< SamplingStrategyParameters* >(object);
  (void)_this;
}
void SamplingStrategyParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SamplingStrategyParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SamplingStrategyParameters& SamplingStrategyParameters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SamplingStrategyParameters_sampling_2eproto.base);
  return *internal_default_instance();
}


void SamplingStrategyParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:jaeger.api_v2.SamplingStrategyParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servicename_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SamplingStrategyParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string serviceName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_servicename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jaeger.api_v2.SamplingStrategyParameters.serviceName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SamplingStrategyParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jaeger.api_v2.SamplingStrategyParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string serviceName = 1;
  if (this->servicename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servicename().data(), static_cast<int>(this->_internal_servicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jaeger.api_v2.SamplingStrategyParameters.serviceName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_servicename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jaeger.api_v2.SamplingStrategyParameters)
  return target;
}

size_t SamplingStrategyParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jaeger.api_v2.SamplingStrategyParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serviceName = 1;
  if (this->servicename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servicename());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SamplingStrategyParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jaeger.api_v2.SamplingStrategyParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const SamplingStrategyParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SamplingStrategyParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jaeger.api_v2.SamplingStrategyParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jaeger.api_v2.SamplingStrategyParameters)
    MergeFrom(*source);
  }
}

void SamplingStrategyParameters::MergeFrom(const SamplingStrategyParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jaeger.api_v2.SamplingStrategyParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.servicename().size() > 0) {
    _internal_set_servicename(from._internal_servicename());
  }
}

void SamplingStrategyParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jaeger.api_v2.SamplingStrategyParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SamplingStrategyParameters::CopyFrom(const SamplingStrategyParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jaeger.api_v2.SamplingStrategyParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SamplingStrategyParameters::IsInitialized() const {
  return true;
}

void SamplingStrategyParameters::InternalSwap(SamplingStrategyParameters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  servicename_.Swap(&other->servicename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SamplingStrategyParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace api_v2
}  // namespace jaeger
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::jaeger::api_v2::ProbabilisticSamplingStrategy* Arena::CreateMaybeMessage< ::jaeger::api_v2::ProbabilisticSamplingStrategy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jaeger::api_v2::ProbabilisticSamplingStrategy >(arena);
}
template<> PROTOBUF_NOINLINE ::jaeger::api_v2::RateLimitingSamplingStrategy* Arena::CreateMaybeMessage< ::jaeger::api_v2::RateLimitingSamplingStrategy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jaeger::api_v2::RateLimitingSamplingStrategy >(arena);
}
template<> PROTOBUF_NOINLINE ::jaeger::api_v2::OperationSamplingStrategy* Arena::CreateMaybeMessage< ::jaeger::api_v2::OperationSamplingStrategy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jaeger::api_v2::OperationSamplingStrategy >(arena);
}
template<> PROTOBUF_NOINLINE ::jaeger::api_v2::PerOperationSamplingStrategies* Arena::CreateMaybeMessage< ::jaeger::api_v2::PerOperationSamplingStrategies >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jaeger::api_v2::PerOperationSamplingStrategies >(arena);
}
template<> PROTOBUF_NOINLINE ::jaeger::api_v2::SamplingStrategyResponse* Arena::CreateMaybeMessage< ::jaeger::api_v2::SamplingStrategyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jaeger::api_v2::SamplingStrategyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::jaeger::api_v2::SamplingStrategyParameters* Arena::CreateMaybeMessage< ::jaeger::api_v2::SamplingStrategyParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jaeger::api_v2::SamplingStrategyParameters >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
