// source: zipkin.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.zipkin.proto3.Span');
goog.provide('proto.zipkin.proto3.Span.Kind');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Map');
goog.require('jspb.Message');
goog.require('proto.zipkin.proto3.Annotation');
goog.require('proto.zipkin.proto3.Endpoint');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zipkin.proto3.Span = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zipkin.proto3.Span.repeatedFields_, null);
};
goog.inherits(proto.zipkin.proto3.Span, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zipkin.proto3.Span.displayName = 'proto.zipkin.proto3.Span';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zipkin.proto3.Span.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zipkin.proto3.Span.prototype.toObject = function(opt_includeInstance) {
  return proto.zipkin.proto3.Span.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zipkin.proto3.Span} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zipkin.proto3.Span.toObject = function(includeInstance, msg) {
  var f, obj = {
    traceId: msg.getTraceId_asB64(),
    parentId: msg.getParentId_asB64(),
    id: msg.getId_asB64(),
    kind: jspb.Message.getFieldWithDefault(msg, 4, 0),
    name: jspb.Message.getFieldWithDefault(msg, 5, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 6, 0),
    duration: jspb.Message.getFieldWithDefault(msg, 7, 0),
    localEndpoint: (f = msg.getLocalEndpoint()) && proto.zipkin.proto3.Endpoint.toObject(includeInstance, f),
    remoteEndpoint: (f = msg.getRemoteEndpoint()) && proto.zipkin.proto3.Endpoint.toObject(includeInstance, f),
    annotationsList: jspb.Message.toObjectList(msg.getAnnotationsList(),
    proto.zipkin.proto3.Annotation.toObject, includeInstance),
    tagsMap: (f = msg.getTagsMap()) ? f.toObject(includeInstance, undefined) : [],
    debug: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    shared: jspb.Message.getBooleanFieldWithDefault(msg, 13, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zipkin.proto3.Span}
 */
proto.zipkin.proto3.Span.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zipkin.proto3.Span;
  return proto.zipkin.proto3.Span.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zipkin.proto3.Span} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zipkin.proto3.Span}
 */
proto.zipkin.proto3.Span.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTraceId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setParentId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 4:
      var value = /** @type {!proto.zipkin.proto3.Span.Kind} */ (reader.readEnum());
      msg.setKind(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setTimestamp(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDuration(value);
      break;
    case 8:
      var value = new proto.zipkin.proto3.Endpoint;
      reader.readMessage(value,proto.zipkin.proto3.Endpoint.deserializeBinaryFromReader);
      msg.setLocalEndpoint(value);
      break;
    case 9:
      var value = new proto.zipkin.proto3.Endpoint;
      reader.readMessage(value,proto.zipkin.proto3.Endpoint.deserializeBinaryFromReader);
      msg.setRemoteEndpoint(value);
      break;
    case 10:
      var value = new proto.zipkin.proto3.Annotation;
      reader.readMessage(value,proto.zipkin.proto3.Annotation.deserializeBinaryFromReader);
      msg.addAnnotations(value);
      break;
    case 11:
      var value = msg.getTagsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDebug(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShared(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zipkin.proto3.Span.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zipkin.proto3.Span.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zipkin.proto3.Span} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zipkin.proto3.Span.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTraceId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getParentId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getKind();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeFixed64(
      6,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getLocalEndpoint();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.zipkin.proto3.Endpoint.serializeBinaryToWriter
    );
  }
  f = message.getRemoteEndpoint();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.zipkin.proto3.Endpoint.serializeBinaryToWriter
    );
  }
  f = message.getAnnotationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.zipkin.proto3.Annotation.serializeBinaryToWriter
    );
  }
  f = message.getTagsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(11, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getDebug();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getShared();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.zipkin.proto3.Span.Kind = {
  SPAN_KIND_UNSPECIFIED: 0,
  CLIENT: 1,
  SERVER: 2,
  PRODUCER: 3,
  CONSUMER: 4
};

/**
 * optional bytes trace_id = 1;
 * @return {string}
 */
proto.zipkin.proto3.Span.prototype.getTraceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes trace_id = 1;
 * This is a type-conversion wrapper around `getTraceId()`
 * @return {string}
 */
proto.zipkin.proto3.Span.prototype.getTraceId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTraceId()));
};


/**
 * optional bytes trace_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTraceId()`
 * @return {!Uint8Array}
 */
proto.zipkin.proto3.Span.prototype.getTraceId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTraceId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.zipkin.proto3.Span} returns this
 */
proto.zipkin.proto3.Span.prototype.setTraceId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes parent_id = 2;
 * @return {string}
 */
proto.zipkin.proto3.Span.prototype.getParentId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes parent_id = 2;
 * This is a type-conversion wrapper around `getParentId()`
 * @return {string}
 */
proto.zipkin.proto3.Span.prototype.getParentId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getParentId()));
};


/**
 * optional bytes parent_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getParentId()`
 * @return {!Uint8Array}
 */
proto.zipkin.proto3.Span.prototype.getParentId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getParentId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.zipkin.proto3.Span} returns this
 */
proto.zipkin.proto3.Span.prototype.setParentId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes id = 3;
 * @return {string}
 */
proto.zipkin.proto3.Span.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes id = 3;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.zipkin.proto3.Span.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.zipkin.proto3.Span.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.zipkin.proto3.Span} returns this
 */
proto.zipkin.proto3.Span.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional Kind kind = 4;
 * @return {!proto.zipkin.proto3.Span.Kind}
 */
proto.zipkin.proto3.Span.prototype.getKind = function() {
  return /** @type {!proto.zipkin.proto3.Span.Kind} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.zipkin.proto3.Span.Kind} value
 * @return {!proto.zipkin.proto3.Span} returns this
 */
proto.zipkin.proto3.Span.prototype.setKind = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string name = 5;
 * @return {string}
 */
proto.zipkin.proto3.Span.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.zipkin.proto3.Span} returns this
 */
proto.zipkin.proto3.Span.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional fixed64 timestamp = 6;
 * @return {number}
 */
proto.zipkin.proto3.Span.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.zipkin.proto3.Span} returns this
 */
proto.zipkin.proto3.Span.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 duration = 7;
 * @return {number}
 */
proto.zipkin.proto3.Span.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.zipkin.proto3.Span} returns this
 */
proto.zipkin.proto3.Span.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional Endpoint local_endpoint = 8;
 * @return {?proto.zipkin.proto3.Endpoint}
 */
proto.zipkin.proto3.Span.prototype.getLocalEndpoint = function() {
  return /** @type{?proto.zipkin.proto3.Endpoint} */ (
    jspb.Message.getWrapperField(this, proto.zipkin.proto3.Endpoint, 8));
};


/**
 * @param {?proto.zipkin.proto3.Endpoint|undefined} value
 * @return {!proto.zipkin.proto3.Span} returns this
*/
proto.zipkin.proto3.Span.prototype.setLocalEndpoint = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zipkin.proto3.Span} returns this
 */
proto.zipkin.proto3.Span.prototype.clearLocalEndpoint = function() {
  return this.setLocalEndpoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zipkin.proto3.Span.prototype.hasLocalEndpoint = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Endpoint remote_endpoint = 9;
 * @return {?proto.zipkin.proto3.Endpoint}
 */
proto.zipkin.proto3.Span.prototype.getRemoteEndpoint = function() {
  return /** @type{?proto.zipkin.proto3.Endpoint} */ (
    jspb.Message.getWrapperField(this, proto.zipkin.proto3.Endpoint, 9));
};


/**
 * @param {?proto.zipkin.proto3.Endpoint|undefined} value
 * @return {!proto.zipkin.proto3.Span} returns this
*/
proto.zipkin.proto3.Span.prototype.setRemoteEndpoint = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zipkin.proto3.Span} returns this
 */
proto.zipkin.proto3.Span.prototype.clearRemoteEndpoint = function() {
  return this.setRemoteEndpoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zipkin.proto3.Span.prototype.hasRemoteEndpoint = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated Annotation annotations = 10;
 * @return {!Array<!proto.zipkin.proto3.Annotation>}
 */
proto.zipkin.proto3.Span.prototype.getAnnotationsList = function() {
  return /** @type{!Array<!proto.zipkin.proto3.Annotation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.zipkin.proto3.Annotation, 10));
};


/**
 * @param {!Array<!proto.zipkin.proto3.Annotation>} value
 * @return {!proto.zipkin.proto3.Span} returns this
*/
proto.zipkin.proto3.Span.prototype.setAnnotationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.zipkin.proto3.Annotation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.zipkin.proto3.Annotation}
 */
proto.zipkin.proto3.Span.prototype.addAnnotations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.zipkin.proto3.Annotation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.zipkin.proto3.Span} returns this
 */
proto.zipkin.proto3.Span.prototype.clearAnnotationsList = function() {
  return this.setAnnotationsList([]);
};


/**
 * map<string, string> tags = 11;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.zipkin.proto3.Span.prototype.getTagsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 11, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.zipkin.proto3.Span} returns this
 */
proto.zipkin.proto3.Span.prototype.clearTagsMap = function() {
  this.getTagsMap().clear();
  return this;};


/**
 * optional bool debug = 12;
 * @return {boolean}
 */
proto.zipkin.proto3.Span.prototype.getDebug = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.zipkin.proto3.Span} returns this
 */
proto.zipkin.proto3.Span.prototype.setDebug = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bool shared = 13;
 * @return {boolean}
 */
proto.zipkin.proto3.Span.prototype.getShared = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.zipkin.proto3.Span} returns this
 */
proto.zipkin.proto3.Span.prototype.setShared = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


